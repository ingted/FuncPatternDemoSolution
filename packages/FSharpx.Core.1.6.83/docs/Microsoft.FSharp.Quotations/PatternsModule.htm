<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <title>PatternsModule - Microsoft&#174; Visual Studio&#174; 2012 Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body><div id="namespaces">
	<h2 class="fixed">Namespaces</h2>
	<div class="scroll">
		<ul>
			<li>
          <a href="../FSharp.Control/index.htm">FSharp.Control</a>
      </li>
			<li>
          <a href="../FSharp.IO/index.htm">FSharp.IO</a>
      </li>
			<li>
          <a href="../FSharp.Net/index.htm">FSharp.Net</a>
      </li>
			<li>
          <a href="../FSharpx/index.htm">FSharpx</a>
      </li>
			<li>
          <a href="../FSharpx.Core/index.htm">FSharpx.Core</a>
      </li>
			<li>
          <a href="../FSharpx.DataStructures/index.htm">FSharpx.DataStructures</a>
      </li>
			<li>
          <a href="../FSharpx.Http/index.htm">FSharpx.Http</a>
      </li>
			<li>
          <a href="../FSharpx.Observable/index.htm">FSharpx.Observable</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders/index.htm">FSharpx.TypeProviders</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.AppSettings/index.htm">FSharpx.TypeProviders.AppSettings</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Documents/index.htm">FSharpx.TypeProviders.Documents</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Excel/index.htm">FSharpx.TypeProviders.Excel</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase/index.htm">FSharpx.TypeProviders.Freebase</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.DesignTime/index.htm">FSharpx.TypeProviders.Freebase.DesignTime</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.FreebaseRuntime/index.htm">FSharpx.TypeProviders.Freebase.FreebaseRuntime</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.FreebaseTypeExtender/index.htm">FSharpx.TypeProviders.Freebase.FreebaseTypeExtender</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Graph/index.htm">FSharpx.TypeProviders.Graph</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Machine/index.htm">FSharpx.TypeProviders.Machine</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Math/index.htm">FSharpx.TypeProviders.Math</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Regex/index.htm">FSharpx.TypeProviders.Regex</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Xaml/index.htm">FSharpx.TypeProviders.Xaml</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections/index.htm">Microsoft.FSharp.Collections</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections.Tagged/index.htm">Microsoft.FSharp.Collections.Tagged</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Control/index.htm">Microsoft.FSharp.Control</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Core/index.htm">Microsoft.FSharp.Core</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Core.CompilerServices/index.htm">Microsoft.FSharp.Core.CompilerServices</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Data.TypeProviders.DesignTime/index.htm">Microsoft.FSharp.Data.TypeProviders.DesignTime</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Data.UnitSystems.SI.UnitNames/index.htm">Microsoft.FSharp.Data.UnitSystems.SI.UnitNames</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq/index.htm">Microsoft.FSharp.Linq</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq.QueryRunExtensions/index.htm">Microsoft.FSharp.Linq.QueryRunExtensions</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq.RuntimeHelpers/index.htm">Microsoft.FSharp.Linq.RuntimeHelpers</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Math/index.htm">Microsoft.FSharp.Math</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Metadata/index.htm">Microsoft.FSharp.Metadata</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.NativeInterop/index.htm">Microsoft.FSharp.NativeInterop</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Quotations/index.htm" class="current">Microsoft.FSharp.Quotations</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Reflection/index.htm">Microsoft.FSharp.Reflection</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text/index.htm">Microsoft.FSharp.Text</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.Lexing/index.htm">Microsoft.FSharp.Text.Lexing</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.Parsing/index.htm">Microsoft.FSharp.Text.Parsing</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.StructuredFormat/index.htm">Microsoft.FSharp.Text.StructuredFormat</a>
      </li>
			<li>
          <a href="../Samples.FSharp.ProvidedTypes/index.htm">Samples.FSharp.ProvidedTypes</a>
      </li>
			<li>
          <a href="../Utilities.Caching/index.htm">Utilities.Caching</a>
      </li>
		</ul>
	</div>
</div><div id="types">
  <h2 class="fixed">Types in Microsoft.FSharp.Quotations</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../Microsoft.FSharp.Quotations/DerivedPatternsModule.htm">DerivedPatternsModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Quotations/ExprShapeModule.htm">ExprShapeModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Quotations/FSharpExpr`1.htm">FSharpExpr&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Quotations/FSharpVar.htm">FSharpVar</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Quotations/PatternsModule.htm" class="current">PatternsModule</a>
        </li>
		</ul>
	</div>
</div>
    <div class="header">
		<p class="class"><strong>Type</strong> PatternsModule</p>
		<p><strong>Namespace</strong> Microsoft.FSharp.Quotations</p>
	</div>
    <div class="sub-header">
			<div id="summary">Contains a set of primitive F# active patterns to analyze F# expression objects 
			</div>
		
		
			<h3 class="section">Methods</h3>
			<ul>
				<li><a href="../Microsoft.FSharp.Quotations/PatternsModule.htm#AddressOfPattern">AddressOfPattern</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/PatternsModule.htm#AddressSetPattern">AddressSetPattern</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/PatternsModule.htm#ApplicationPattern">ApplicationPattern</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/PatternsModule.htm#CallPattern">CallPattern</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/PatternsModule.htm#CoercePattern">CoercePattern</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/PatternsModule.htm#DefaultValuePattern">DefaultValuePattern</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/PatternsModule.htm#FieldGetPattern">FieldGetPattern</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/PatternsModule.htm#FieldSetPattern">FieldSetPattern</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/PatternsModule.htm#ForIntegerRangeLoopPattern">ForIntegerRangeLoopPattern</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/PatternsModule.htm#IfThenElsePattern">IfThenElsePattern</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/PatternsModule.htm#LambdaPattern">LambdaPattern</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/PatternsModule.htm#LetPattern">LetPattern</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/PatternsModule.htm#LetRecursivePattern">LetRecursivePattern</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/PatternsModule.htm#NewArrayPattern">NewArrayPattern</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/PatternsModule.htm#NewDelegatePattern">NewDelegatePattern</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/PatternsModule.htm#NewObjectPattern">NewObjectPattern</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/PatternsModule.htm#NewRecordPattern">NewRecordPattern</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/PatternsModule.htm#NewTuplePattern">NewTuplePattern</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/PatternsModule.htm#NewUnionCasePattern">NewUnionCasePattern</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/PatternsModule.htm#PropertyGetPattern">PropertyGetPattern</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/PatternsModule.htm#PropertySetPattern">PropertySetPattern</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/PatternsModule.htm#QuotePattern">QuotePattern</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/PatternsModule.htm#SequentialPattern">SequentialPattern</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/PatternsModule.htm#TryFinallyPattern">TryFinallyPattern</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/PatternsModule.htm#TryWithPattern">TryWithPattern</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/PatternsModule.htm#TupleGetPattern">TupleGetPattern</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/PatternsModule.htm#TypeTestPattern">TypeTestPattern</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/PatternsModule.htm#UnionCaseTestPattern">UnionCaseTestPattern</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/PatternsModule.htm#ValuePattern">ValuePattern</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/PatternsModule.htm#VarPattern">VarPattern</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/PatternsModule.htm#VarSetPattern">VarSetPattern</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/PatternsModule.htm#WhileLoopPattern">WhileLoopPattern</a></li>
			</ul>
		
		
	</div>
	
	
	
	<h3 class="section">Public static methods</h3>
	
	<div id="AddressOfPattern" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>AddressOfPattern</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> input)</h4>
		<div class="content">An active pattern to recognize expressions that represent getting the address of a value 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> input</h6>
          <p class="comments">The input expression to match against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>Expr option </p>
      </div>
      
    </div>
	</div>
	<div id="AddressSetPattern" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>AddressSetPattern</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> input)</h4>
		<div class="content">An active pattern to recognize expressions that represent setting the value held at an address 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> input</h6>
          <p class="comments">The input expression to match against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>(Expr * Expr) option </p>
      </div>
      
    </div>
	</div>
	<div id="ApplicationPattern" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>ApplicationPattern</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> input)</h4>
		<div class="content">An active pattern to recognize expressions that represent applications of first class function values 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> input</h6>
          <p class="comments">The input expression to match against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>(Expr * Expr) option </p>
      </div>
      
    </div>
	</div>
	<div id="CallPattern" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>CallPattern</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> input)</h4>
		<div class="content">An active pattern to recognize expressions that represent calls to static and instance methods, and functions defined in modules 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> input</h6>
          <p class="comments">The input expression to match against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>(Expr option * MethodInfo * Expr list) option </p>
      </div>
      
    </div>
	</div>
	<div id="CoercePattern" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>CoercePattern</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> input)</h4>
		<div class="content">An active pattern to recognize expressions that represent coercions from one type to another 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> input</h6>
          <p class="comments">The input expression to match against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>(Expr * Type) option </p>
      </div>
      
    </div>
	</div>
	<div id="DefaultValuePattern" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>DefaultValuePattern</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> input)</h4>
		<div class="content">An active pattern to recognize expressions that represent invocations of a default constructor of a struct 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> input</h6>
          <p class="comments">The input expression to match against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>Type option </p>
      </div>
      
    </div>
	</div>
	<div id="FieldGetPattern" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>FieldGetPattern</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> input)</h4>
		<div class="content">An active pattern to recognize expressions that represent getting a static or instance field 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> input</h6>
          <p class="comments">The input expression to match against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>(Expr option * FieldInfo) option </p>
      </div>
      
    </div>
	</div>
	<div id="FieldSetPattern" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>FieldSetPattern</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> input)</h4>
		<div class="content">An active pattern to recognize expressions that represent setting a static or instance field 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> input</h6>
          <p class="comments">The input expression to match against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>(Expr option * FieldInfo * Expr) option </p>
      </div>
      
    </div>
	</div>
	<div id="ForIntegerRangeLoopPattern" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>ForIntegerRangeLoopPattern</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> input)</h4>
		<div class="content">An active pattern to recognize expressions that represent loops over integer ranges 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> input</h6>
          <p class="comments">The input expression to match against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>(Var * Expr * Expr * Expr) option </p>
      </div>
      
    </div>
	</div>
	<div id="IfThenElsePattern" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>IfThenElsePattern</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> input)</h4>
		<div class="content">An active pattern to recognize expressions that represent conditionals 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> input</h6>
          <p class="comments">The input expression to match against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>(Expr * Expr * Expr) option </p>
      </div>
      
    </div>
	</div>
	<div id="LambdaPattern" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>LambdaPattern</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> input)</h4>
		<div class="content">An active pattern to recognize expressions that represent first class function values 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> input</h6>
          <p class="comments">The input expression to match against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>(Var * Expr) option </p>
      </div>
      
    </div>
	</div>
	<div id="LetPattern" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>LetPattern</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> input)</h4>
		<div class="content">An active pattern to recognize expressions that represent let bindings 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> input</h6>
          <p class="comments">The input expression to match against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>(Var * Expr * Expr) option </p>
      </div>
      
    </div>
	</div>
	<div id="LetRecursivePattern" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>LetRecursivePattern</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> input)</h4>
		<div class="content">An active pattern to recognize expressions that represent recursive let bindings of one or more variables 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> input</h6>
          <p class="comments">The input expression to match against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>((Var * Expr) list * Expr) option </p>
      </div>
      
    </div>
	</div>
	<div id="NewArrayPattern" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>NewArrayPattern</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> input)</h4>
		<div class="content">An active pattern to recognize expressions that represent the construction of arrays 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> input</h6>
          <p class="comments">The input expression to match against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>(Type * Expr list) option </p>
      </div>
      
    </div>
	</div>
	<div id="NewDelegatePattern" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>NewDelegatePattern</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> input)</h4>
		<div class="content">An active pattern to recognize expressions that represent construction of delegate values 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> input</h6>
          <p class="comments">The input expression to match against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>(Type * Var list * Expr) option </p>
      </div>
      
    </div>
	</div>
	<div id="NewObjectPattern" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>NewObjectPattern</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> input)</h4>
		<div class="content">An active pattern to recognize expressions that represent invocation of object constructors 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> input</h6>
          <p class="comments">The input expression to match against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>(ConstructorInfo * Expr list) option </p>
      </div>
      
    </div>
	</div>
	<div id="NewRecordPattern" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>NewRecordPattern</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> input)</h4>
		<div class="content">An active pattern to recognize expressions that represent construction of record values 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> input</h6>
          <p class="comments">The input expression to match against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>(Type * Expr list) option </p>
      </div>
      
    </div>
	</div>
	<div id="NewTuplePattern" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>NewTuplePattern</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> input)</h4>
		<div class="content">An active pattern to recognize expressions that represent construction of tuple values 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> input</h6>
          <p class="comments">The input expression to match against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>(Expr list) option </p>
      </div>
      
    </div>
	</div>
	<div id="NewUnionCasePattern" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>NewUnionCasePattern</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> input)</h4>
		<div class="content">An active pattern to recognize expressions that represent construction of particular union case values 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> input</h6>
          <p class="comments">The input expression to match against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>(UnionCaseInfo * Expr list) option </p>
      </div>
      
    </div>
	</div>
	<div id="PropertyGetPattern" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>PropertyGetPattern</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> input)</h4>
		<div class="content">An active pattern to recognize expressions that represent the read of a static or instance property, or a non-function value declared in a module 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> input</h6>
          <p class="comments">The input expression to match against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>(Expr option * PropertyInfo * Expr list) option </p>
      </div>
      
    </div>
	</div>
	<div id="PropertySetPattern" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>PropertySetPattern</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> input)</h4>
		<div class="content">An active pattern to recognize expressions that represent setting a static or instance property, or a non-function value declared in a module 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> input</h6>
          <p class="comments">The input expression to match against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>(Expr option * PropertyInfo * Expr list * Expr) option </p>
      </div>
      
    </div>
	</div>
	<div id="QuotePattern" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>QuotePattern</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> input)</h4>
		<div class="content">An active pattern to recognize expressions that represent a nested quotation literal 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> input</h6>
          <p class="comments">The input expression to match against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>Expr option </p>
      </div>
      
    </div>
	</div>
	<div id="SequentialPattern" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>SequentialPattern</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> input)</h4>
		<div class="content">An active pattern to recognize expressions that represent sequential exeuction of one expression followed by another 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> input</h6>
          <p class="comments">The input expression to match against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>(Expr * Expr) option </p>
      </div>
      
    </div>
	</div>
	<div id="TryFinallyPattern" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>TryFinallyPattern</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> input)</h4>
		<div class="content">An active pattern to recognize expressions that represent a try/finally construct 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> input</h6>
          <p class="comments">The input expression to match against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>(Expr * Expr) option </p>
      </div>
      
    </div>
	</div>
	<div id="TryWithPattern" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>TryWithPattern</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> input)</h4>
		<div class="content">An active pattern to recognize expressions that represent a try/with construct for exception filtering and catching 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> input</h6>
          <p class="comments">The input expression to match against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>(Expr * Var * Expr * Var * Expr) option </p>
      </div>
      
    </div>
	</div>
	<div id="TupleGetPattern" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>TupleGetPattern</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> input)</h4>
		<div class="content">An active pattern to recognize expressions that represent getting a tuple field 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> input</h6>
          <p class="comments">The input expression to match against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>(Expr * int) option </p>
      </div>
      
    </div>
	</div>
	<div id="TypeTestPattern" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>TypeTestPattern</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> input)</h4>
		<div class="content">An active pattern to recognize expressions that represent a dynamic type test 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> input</h6>
          <p class="comments">The input expression to match against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>(Expr * Type) option </p>
      </div>
      
    </div>
	</div>
	<div id="UnionCaseTestPattern" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>UnionCaseTestPattern</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> input)</h4>
		<div class="content">An active pattern to recognize expressions that represent a test if a value is of a particular union case 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> input</h6>
          <p class="comments">The input expression to match against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>(Expr * UnionCaseInfo) option </p>
      </div>
      
    </div>
	</div>
	<div id="ValuePattern" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>ValuePattern</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> input)</h4>
		<div class="content">An active pattern to recognize expressions that represent a constant value 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> input</h6>
          <p class="comments">The input expression to match against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>(obj * Type) option </p>
      </div>
      
    </div>
	</div>
	<div id="VarPattern" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>VarPattern</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> input)</h4>
		<div class="content">An active pattern to recognize expressions that represent a variable 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> input</h6>
          <p class="comments">The input expression to match against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>Var option </p>
      </div>
      
    </div>
	</div>
	<div id="VarSetPattern" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>VarSetPattern</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> input)</h4>
		<div class="content">An active pattern to recognize expressions that represent setting a mutable variable 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> input</h6>
          <p class="comments">The input expression to match against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>(Var * Expr) option </p>
      </div>
      
    </div>
	</div>
	<div id="WhileLoopPattern" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>WhileLoopPattern</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> input)</h4>
		<div class="content">An active pattern to recognize expressions that represent while loops 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> input</h6>
          <p class="comments">The input expression to match against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>(Expr * Expr) option </p>
      </div>
      
    </div>
	</div>
	
	<div id="footer">
  <p>Based on v4.3.0.0 of FSharp.Core.dll (Microsoft&#174; Visual Studio&#174; 2012)</p>
  <p>Generated by <a href="http://docu.jagregory.com">docu</a></p>
</div>
  </body>
</html>