<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <title>FSharpExpr - Microsoft&#174; Visual Studio&#174; 2012 Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body><div id="namespaces">
	<h2 class="fixed">Namespaces</h2>
	<div class="scroll">
		<ul>
			<li>
          <a href="../FSharp.Control/index.htm">FSharp.Control</a>
      </li>
			<li>
          <a href="../FSharp.IO/index.htm">FSharp.IO</a>
      </li>
			<li>
          <a href="../FSharp.Net/index.htm">FSharp.Net</a>
      </li>
			<li>
          <a href="../FSharpx/index.htm">FSharpx</a>
      </li>
			<li>
          <a href="../FSharpx.Core/index.htm">FSharpx.Core</a>
      </li>
			<li>
          <a href="../FSharpx.DataStructures/index.htm">FSharpx.DataStructures</a>
      </li>
			<li>
          <a href="../FSharpx.Http/index.htm">FSharpx.Http</a>
      </li>
			<li>
          <a href="../FSharpx.Observable/index.htm">FSharpx.Observable</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders/index.htm">FSharpx.TypeProviders</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.AppSettings/index.htm">FSharpx.TypeProviders.AppSettings</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Documents/index.htm">FSharpx.TypeProviders.Documents</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Excel/index.htm">FSharpx.TypeProviders.Excel</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase/index.htm">FSharpx.TypeProviders.Freebase</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.DesignTime/index.htm">FSharpx.TypeProviders.Freebase.DesignTime</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.FreebaseRuntime/index.htm">FSharpx.TypeProviders.Freebase.FreebaseRuntime</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.FreebaseTypeExtender/index.htm">FSharpx.TypeProviders.Freebase.FreebaseTypeExtender</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Graph/index.htm">FSharpx.TypeProviders.Graph</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Machine/index.htm">FSharpx.TypeProviders.Machine</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Math/index.htm">FSharpx.TypeProviders.Math</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Regex/index.htm">FSharpx.TypeProviders.Regex</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Xaml/index.htm">FSharpx.TypeProviders.Xaml</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections/index.htm">Microsoft.FSharp.Collections</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections.Tagged/index.htm">Microsoft.FSharp.Collections.Tagged</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Control/index.htm">Microsoft.FSharp.Control</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Core/index.htm">Microsoft.FSharp.Core</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Core.CompilerServices/index.htm">Microsoft.FSharp.Core.CompilerServices</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Data.TypeProviders.DesignTime/index.htm">Microsoft.FSharp.Data.TypeProviders.DesignTime</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Data.UnitSystems.SI.UnitNames/index.htm">Microsoft.FSharp.Data.UnitSystems.SI.UnitNames</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq/index.htm">Microsoft.FSharp.Linq</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq.QueryRunExtensions/index.htm">Microsoft.FSharp.Linq.QueryRunExtensions</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq.RuntimeHelpers/index.htm">Microsoft.FSharp.Linq.RuntimeHelpers</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Math/index.htm">Microsoft.FSharp.Math</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Metadata/index.htm">Microsoft.FSharp.Metadata</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.NativeInterop/index.htm">Microsoft.FSharp.NativeInterop</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Quotations/index.htm" class="current">Microsoft.FSharp.Quotations</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Reflection/index.htm">Microsoft.FSharp.Reflection</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text/index.htm">Microsoft.FSharp.Text</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.Lexing/index.htm">Microsoft.FSharp.Text.Lexing</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.Parsing/index.htm">Microsoft.FSharp.Text.Parsing</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.StructuredFormat/index.htm">Microsoft.FSharp.Text.StructuredFormat</a>
      </li>
			<li>
          <a href="../Samples.FSharp.ProvidedTypes/index.htm">Samples.FSharp.ProvidedTypes</a>
      </li>
			<li>
          <a href="../Utilities.Caching/index.htm">Utilities.Caching</a>
      </li>
		</ul>
	</div>
</div><div id="types">
  <h2 class="fixed">Types in Microsoft.FSharp.Quotations</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../Microsoft.FSharp.Quotations/DerivedPatternsModule.htm">DerivedPatternsModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Quotations/ExprShapeModule.htm">ExprShapeModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm" class="current">FSharpExpr</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Quotations/FSharpExpr`1.htm">FSharpExpr&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Quotations/FSharpVar.htm">FSharpVar</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Quotations/PatternsModule.htm">PatternsModule</a>
        </li>
		</ul>
	</div>
</div>
    <div class="header">
		<p class="class"><strong>Type</strong> FSharpExpr</p>
		<p><strong>Namespace</strong> Microsoft.FSharp.Quotations</p>
	</div>
    <div class="sub-header">
			<div id="summary">Quoted expressions annotated with System.Type values. 
			</div>
		
		
			<h3 class="section">Methods</h3>
			<ul>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#AddressOf">AddressOf</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#AddressSet">AddressSet</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#Application">Application</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#Applications">Applications</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#Call">Call</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#Call">Call</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#Cast``1">Cast&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#Coerce">Coerce</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#DefaultValue">DefaultValue</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#Deserialize">Deserialize</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#FieldGet">FieldGet</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#FieldGet">FieldGet</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#FieldSet">FieldSet</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#FieldSet">FieldSet</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#ForIntegerRangeLoop">ForIntegerRangeLoop</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#GetFreeVars">GetFreeVars</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#GlobalVar``1">GlobalVar&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#IfThenElse">IfThenElse</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#Lambda">Lambda</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#Let">Let</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#LetRecursive">LetRecursive</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#NewArray">NewArray</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#NewDelegate">NewDelegate</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#NewObject">NewObject</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#NewRecord">NewRecord</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#NewTuple">NewTuple</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#NewUnionCase">NewUnionCase</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#PropertyGet">PropertyGet</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#PropertyGet">PropertyGet</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#PropertySet">PropertySet</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#PropertySet">PropertySet</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#Quote">Quote</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#RegisterReflectedDefinitions">RegisterReflectedDefinitions</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#Sequential">Sequential</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#Substitute">Substitute</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#ToString">ToString</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#TryFinally">TryFinally</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#TryGetReflectedDefinition">TryGetReflectedDefinition</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#TryWith">TryWith</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#TupleGet">TupleGet</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#TypeTest">TypeTest</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#UnionCaseTest">UnionCaseTest</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#Value">Value</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#Value``1">Value&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#Var">Var</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#VarSet">VarSet</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#WhileLoop">WhileLoop</a></li>
			</ul>
		
			<h3 class="section">Properties</h3>
			<ul>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#CustomAttributes">CustomAttributes</a></li>
				<li><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm#Type">Type</a></li>
			</ul>
		
	</div>
	
	
	<h3 class="section">Public instance methods</h3>
	
	<div id="GetFreeVars" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<FSharpVar>">IEnumerable&lt;FSharpVar&gt;</span> <strong>GetFreeVars</strong>()</h4>
		<div class="content">Gets the free expression variables of an expression as a list. 



      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<FSharpVar>">IEnumerable&lt;FSharpVar&gt;</span></code></h6>
        <p>A sequence of the free variables in the expression. </p>
      </div>
      
    </div>
	</div>
	<div id="Substitute" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>Substitute</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> substitution)</h4>
		<div class="content">Substitutes through the given expression using the given functions
to map variables to new values. The functions must give consistent results
at each application. Variable renaming may occur on the target expression
if variable capture occurs. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> substitution</h6>
          <p class="comments">The function to map variables into expressions. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The expression with the given substitutions. </p>
      </div>
      
    </div>
	</div>
	<div id="ToString" class="method">
		<h4><span title="System.string">string</span> <strong>ToString</strong>(<span title="System.bool">bool</span> full)</h4>
		<div class="content">Format the expression as a string 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.bool">bool</span></code> full</h6>
          <p class="comments">Indicates if method, property, constructor and type objects should be printed in detail. If false, these are abbreviated to their name. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.string">string</span></code></h6>
        <p>The formatted string. </p>
      </div>
      
    </div>
	</div>
	
	<h3 class="section">Public static methods</h3>
	
	<div id="AddressOf" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>AddressOf</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> target)</h4>
		<div class="content">Builds an expression that represents getting the address of a value. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> target</h6>
          <p class="comments">The target expression. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="AddressSet" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>AddressSet</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> target, <a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> value)</h4>
		<div class="content">Builds an expression that represents setting the value held at a particular address. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> target</h6>
          <p class="comments">The target expression. </p>
          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> value</h6>
          <p class="comments">The value to set at the address. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="Application" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>Application</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> functionExpr, <a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> argument)</h4>
		<div class="content">Builds an expression that represents the application of a first class function value to a single argument. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> functionExpr</h6>
          <p class="comments">The function to apply. </p>
          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> argument</h6>
          <p class="comments">The argument to the function. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="Applications" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>Applications</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> functionExpr, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> arguments)</h4>
		<div class="content">Builds an expression that represents the application of a first class function value to multiple arguments 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> functionExpr</h6>
          <p class="comments">The function to apply. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> arguments</h6>
          <p class="comments">The list of lists of arguments to the function. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="Call" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>Call</strong>(<span title="System.Reflection.MethodInfo">MethodInfo</span> methodInfo, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> arguments)</h4>
		<div class="content">Builds an expression that represents a call to an static method or module-bound function 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Reflection.MethodInfo">MethodInfo</span></code> methodInfo</h6>
          <p class="comments">The MethodInfo describing the method to call. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> arguments</h6>
          <p class="comments">The list of arguments to the method. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="Call" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>Call</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> obj, <span title="System.Reflection.MethodInfo">MethodInfo</span> methodInfo, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> arguments)</h4>
		<div class="content">Builds an expression that represents a call to an instance method associated with an object 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> obj</h6>
          <p class="comments">The input object. </p>
          <h6><code><span title="System.Reflection.MethodInfo">MethodInfo</span></code> methodInfo</h6>
          <p class="comments">The description of the method to call. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> arguments</h6>
          <p class="comments">The list of arguments to the method. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="Cast``1" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr`1.htm">FSharpExpr&lt;T&gt;</a> <strong>Cast&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> source)</h4>
		<div class="content">Returns a new typed expression given an underlying runtime-typed expression.
A type annotation is usually required to use this function, and
using an incorrect type annotation may result in a later runtime exception. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> source</h6>
          <p class="comments">The expression to cast. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr`1.htm">FSharpExpr&lt;T&gt;</a></code></h6>
        <p>The resulting typed expression. </p>
      </div>
      
    </div>
	</div>
	<div id="Coerce" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>Coerce</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> source, <span title="System.Type">Type</span> target)</h4>
		<div class="content">Builds an expression that represents the coercion of an expression to a type 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> source</h6>
          <p class="comments">The expression to coerce. </p>
          <h6><code><span title="System.Type">Type</span></code> target</h6>
          <p class="comments">The target type. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="DefaultValue" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>DefaultValue</strong>(<span title="System.Type">Type</span> expressionType)</h4>
		<div class="content">Builds an expression that represents the invocation of a default object constructor 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Type">Type</span></code> expressionType</h6>
          <p class="comments">The type on which the constructor is invoked. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="Deserialize" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>Deserialize</strong>(<span title="System.Type">Type</span> qualifyingType, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> spliceTypes, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> spliceExprs, <span title="System.Byte[]">Byte[]</span> bytes)</h4>
		<div class="content">This function is called automatically when quotation syntax (<@ @>) and related typed-expression
quotations are used. The bytes are a pickled binary representation of an unlinked form of the quoted expression,
and the System.Type argument is any type in the assembly where the quoted
expression occurs, i.e. it helps scope the interpretation of the cross-assembly
references in the bytes. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Type">Type</span></code> qualifyingType</h6>
          <p class="comments">A type in the assembly where the quotation occurs. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> spliceTypes</h6>
          <p class="comments">The list of spliced types. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> spliceExprs</h6>
          <p class="comments">The list of spliced expressions. </p>
          <h6><code><span title="System.Byte[]">Byte[]</span></code> bytes</h6>
          <p class="comments">The serialized form of the quoted expression. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="FieldGet" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>FieldGet</strong>(<span title="System.Reflection.FieldInfo">FieldInfo</span> fieldInfo)</h4>
		<div class="content">Builds an expression that represents the access of a static field 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Reflection.FieldInfo">FieldInfo</span></code> fieldInfo</h6>
          <p class="comments">The description of the field to access. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="FieldGet" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>FieldGet</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> obj, <span title="System.Reflection.FieldInfo">FieldInfo</span> fieldInfo)</h4>
		<div class="content">Builds an expression that represents the access of a field of an object 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> obj</h6>
          <p class="comments">The input object. </p>
          <h6><code><span title="System.Reflection.FieldInfo">FieldInfo</span></code> fieldInfo</h6>
          <p class="comments">The description of the field to access. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="FieldSet" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>FieldSet</strong>(<span title="System.Reflection.FieldInfo">FieldInfo</span> fieldInfo, <a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> value)</h4>
		<div class="content">Builds an expression that represents writing to a static field 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Reflection.FieldInfo">FieldInfo</span></code> fieldInfo</h6>
          <p class="comments">The description of the field to write to. </p>
          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> value</h6>
          <p class="comments">The value to the set to the field. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="FieldSet" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>FieldSet</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> obj, <span title="System.Reflection.FieldInfo">FieldInfo</span> fieldInfo, <a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> value)</h4>
		<div class="content">Builds an expression that represents writing to a field of an object 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> obj</h6>
          <p class="comments">The input object. </p>
          <h6><code><span title="System.Reflection.FieldInfo">FieldInfo</span></code> fieldInfo</h6>
          <p class="comments">The description of the field to write to. </p>
          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> value</h6>
          <p class="comments">The value to set to the field. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="ForIntegerRangeLoop" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>ForIntegerRangeLoop</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpVar.htm">FSharpVar</a> loopVariable, <a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> start, <a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> endExpr, <a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> body)</h4>
		<div class="content">Builds a 'for i =... to... do...' expression that represent loops over integer ranges 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpVar.htm">FSharpVar</a></code> loopVariable</h6>
          <p class="comments">The sub-expression declaring the loop variable. </p>
          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> start</h6>
          <p class="comments">The sub-expression setting the initial value of the loop variable. </p>
          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> endExpr</h6>
          <p class="comments">The sub-expression declaring the final value of the loop variable. </p>
          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> body</h6>
          <p class="comments">The sub-expression representing the body of the loop. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="GlobalVar``1" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr`1.htm">FSharpExpr&lt;T&gt;</a> <strong>GlobalVar&lt;T&gt;</strong>(<span title="System.string">string</span> name)</h4>
		<div class="content">Fetches or creates a new variable with the given name and type from a global pool of shared variables
indexed by name and type. The type is given by the expicit or inferred type parameter 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.string">string</span></code> name</h6>
          <p class="comments">The variable name. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr`1.htm">FSharpExpr&lt;T&gt;</a></code></h6>
        <p>The created of fetched typed global variable. </p>
      </div>
      
    </div>
	</div>
	<div id="IfThenElse" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>IfThenElse</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> guard, <a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> thenExpr, <a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> elseExpr)</h4>
		<div class="content">Builds 'if... then... else' expressions. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> guard</h6>
          <p class="comments">The condition expression. </p>
          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> thenExpr</h6>
          <p class="comments">The  <code>then</code>  sub-expression. </p>
          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> elseExpr</h6>
          <p class="comments">The  <code>else</code>  sub-expression. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="Lambda" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>Lambda</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpVar.htm">FSharpVar</a> parameter, <a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> body)</h4>
		<div class="content">Builds an expression that represents the constrution of an F# function value 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpVar.htm">FSharpVar</a></code> parameter</h6>
          <p class="comments">The parameter to the function. </p>
          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> body</h6>
          <p class="comments">The body of the function. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="Let" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>Let</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpVar.htm">FSharpVar</a> letVariable, <a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> letExpr, <a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> body)</h4>
		<div class="content">Builds expressions associated with 'let' constructs 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpVar.htm">FSharpVar</a></code> letVariable</h6>
          <p class="comments">The variable in the let expression. </p>
          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> letExpr</h6>
          <p class="comments">The expression bound to the variable. </p>
          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> body</h6>
          <p class="comments">The sub-expression where the binding is in scope. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="LetRecursive" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>LetRecursive</strong>(<a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> bindings, <a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> body)</h4>
		<div class="content">Builds recursives expressions associated with 'let rec' constructs 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> bindings</h6>
          <p class="comments">The list of bindings for the let expression. </p>
          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> body</h6>
          <p class="comments">The sub-expression where the bindings are in scope. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="NewArray" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>NewArray</strong>(<span title="System.Type">Type</span> elementType, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> elements)</h4>
		<div class="content">Builds an expression that represents the creation of an array value initialized with the given elements 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Type">Type</span></code> elementType</h6>
          <p class="comments">The type for the elements of the array. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> elements</h6>
          <p class="comments">The list of elements of the array. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="NewDelegate" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>NewDelegate</strong>(<span title="System.Type">Type</span> delegateType, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> parameters, <a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> body)</h4>
		<div class="content">Builds an expression that represents the creation of a delegate value for the given type 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Type">Type</span></code> delegateType</h6>
          <p class="comments">The type of delegate. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> parameters</h6>
          <p class="comments">The parameters for the delegate. </p>
          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> body</h6>
          <p class="comments">The body of the function. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="NewObject" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>NewObject</strong>(<span title="System.Reflection.ConstructorInfo">ConstructorInfo</span> constructorInfo, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> arguments)</h4>
		<div class="content">Builds an expression that represents the invocation of an object constructor 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Reflection.ConstructorInfo">ConstructorInfo</span></code> constructorInfo</h6>
          <p class="comments">The description of the constructor. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> arguments</h6>
          <p class="comments">The list of arguments to the constructor. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="NewRecord" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>NewRecord</strong>(<span title="System.Type">Type</span> recordType, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> elements)</h4>
		<div class="content">Builds record-construction expressions 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Type">Type</span></code> recordType</h6>
          <p class="comments">The type of record. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> elements</h6>
          <p class="comments">The list of elements of the record. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="NewTuple" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>NewTuple</strong>(<a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> elements)</h4>
		<div class="content">Builds an expression that represents the creation of an F# tuple value 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> elements</h6>
          <p class="comments">The list of elements of the tuple. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="NewUnionCase" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>NewUnionCase</strong>(<a href="../Microsoft.FSharp.Reflection/UnionCaseInfo.htm">UnionCaseInfo</a> unionCase, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> arguments)</h4>
		<div class="content">Builds an expression that represents the creation of a union case value 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Reflection/UnionCaseInfo.htm">UnionCaseInfo</a></code> unionCase</h6>
          <p class="comments">The description of the union case. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> arguments</h6>
          <p class="comments">The list of arguments for the case. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="PropertyGet" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>PropertyGet</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> obj, <span title="System.Reflection.PropertyInfo">PropertyInfo</span> property, <a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> indexerArgs)</h4>
		<div class="content">Builds an expression that represents reading a property of an object 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> obj</h6>
          <p class="comments">The input object. </p>
          <h6><code><span title="System.Reflection.PropertyInfo">PropertyInfo</span></code> property</h6>
          <p class="comments">The description of the property. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code> indexerArgs</h6>
          <p class="comments">List of indices for the property if it is an indexed property. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="PropertyGet" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>PropertyGet</strong>(<span title="System.Reflection.PropertyInfo">PropertyInfo</span> property, <a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> indexerArgs)</h4>
		<div class="content">Builds an expression that represents reading a static property 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Reflection.PropertyInfo">PropertyInfo</span></code> property</h6>
          <p class="comments">The description of the property. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code> indexerArgs</h6>
          <p class="comments">List of indices for the property if it is an indexed property. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="PropertySet" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>PropertySet</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> obj, <span title="System.Reflection.PropertyInfo">PropertyInfo</span> property, <a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> value, <a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> indexerArgs)</h4>
		<div class="content">Builds an expression that represents writing to a property of an object 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> obj</h6>
          <p class="comments">The input object. </p>
          <h6><code><span title="System.Reflection.PropertyInfo">PropertyInfo</span></code> property</h6>
          <p class="comments">The description of the property. </p>
          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> value</h6>
          <p class="comments">The value to set. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code> indexerArgs</h6>
          <p class="comments">List of indices for the property if it is an indexed property. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="PropertySet" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>PropertySet</strong>(<span title="System.Reflection.PropertyInfo">PropertyInfo</span> property, <a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> value, <a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> indexerArgs)</h4>
		<div class="content">Builds an expression that represents writing to a static property 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Reflection.PropertyInfo">PropertyInfo</span></code> property</h6>
          <p class="comments">The description of the property. </p>
          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> value</h6>
          <p class="comments">The value to set. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code> indexerArgs</h6>
          <p class="comments">List of indices for the property if it is an indexed property. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="Quote" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>Quote</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> inner)</h4>
		<div class="content">Builds an expression that represents a nested quotation literal 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> inner</h6>
          <p class="comments">The expression being quoted. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="RegisterReflectedDefinitions" class="method">
		<h4><span title="System.void">void</span> <strong>RegisterReflectedDefinitions</strong>(<span title="System.Reflection.Assembly">Assembly</span> assembly, <span title="System.string">string</span> resource, <span title="System.Byte[]">Byte[]</span> serializedValue)</h4>
		<div class="content">Permits interactive environments such as F# Interactive
to explicitly register new pickled resources that represent persisted
top level definitions. The string indicates a unique name for the resources
being added. The format for the bytes is the encoding generated by the F# compiler. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Reflection.Assembly">Assembly</span></code> assembly</h6>
          <p class="comments">The assembly associated with the resource. </p>
          <h6><code><span title="System.string">string</span></code> resource</h6>
          <p class="comments">The unique name for the resources being added. </p>
          <h6><code><span title="System.Byte[]">Byte[]</span></code> serializedValue</h6>
          <p class="comments">The serialized resource to register with the environment. </p>
      </div>

      
    </div>
	</div>
	<div id="Sequential" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>Sequential</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> first, <a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> second)</h4>
		<div class="content">Builds an expression that represents the sequential execution of one expression followed by another 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> first</h6>
          <p class="comments">The first expression. </p>
          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> second</h6>
          <p class="comments">The second expression. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="TryFinally" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>TryFinally</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> body, <a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> compensation)</h4>
		<div class="content">Builds an expression that represents a try/finally construct 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> body</h6>
          <p class="comments">The body of the try expression. </p>
          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> compensation</h6>
          <p class="comments">The final part of the expression to be evaluated. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="TryGetReflectedDefinition" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>TryGetReflectedDefinition</strong>(<span title="System.Reflection.MethodBase">MethodBase</span> methodBase)</h4>
		<div class="content">Try and find a stored reflection definition for the given method. Stored reflection
definitions are added to an F# assembly through the use of the [<ReflectedDefinition>] attribute. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Reflection.MethodBase">MethodBase</span></code> methodBase</h6>
          <p class="comments">The description of the method to find. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>The reflection definition or None if a match could not be found. </p>
      </div>
      
    </div>
	</div>
	<div id="TryWith" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>TryWith</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> body, <a href="../Microsoft.FSharp.Quotations/FSharpVar.htm">FSharpVar</a> filterVar, <a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> filterBody, <a href="../Microsoft.FSharp.Quotations/FSharpVar.htm">FSharpVar</a> catchVar, <a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> catchBody)</h4>
		<div class="content">Builds an expression that represents a try/with construct for exception filtering and catching. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> body</h6>
          <p class="comments">The body of the try expression. </p>
          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpVar.htm">FSharpVar</a></code> filterVar</h6>
          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> filterBody</h6>
          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpVar.htm">FSharpVar</a></code> catchVar</h6>
          <p class="comments">The variable to bind to a caught exception. </p>
          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> catchBody</h6>
          <p class="comments">The expression evaluated when an exception is caught. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="TupleGet" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>TupleGet</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> tuple, <span title="System.int">int</span> index)</h4>
		<div class="content">Builds an expression that represents getting a field of a tuple 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> tuple</h6>
          <p class="comments">The input tuple. </p>
          <h6><code><span title="System.int">int</span></code> index</h6>
          <p class="comments">The index of the tuple element to get. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="TypeTest" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>TypeTest</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> source, <span title="System.Type">Type</span> target)</h4>
		<div class="content">Builds an expression that represents a type test. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> source</h6>
          <p class="comments">The expression to test. </p>
          <h6><code><span title="System.Type">Type</span></code> target</h6>
          <p class="comments">The target type. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="UnionCaseTest" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>UnionCaseTest</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> source, <a href="../Microsoft.FSharp.Reflection/UnionCaseInfo.htm">UnionCaseInfo</a> unionCase)</h4>
		<div class="content">Builds an expression that represents a test of a value is of a particular union case 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> source</h6>
          <p class="comments">The expression to test. </p>
          <h6><code><a href="../Microsoft.FSharp.Reflection/UnionCaseInfo.htm">UnionCaseInfo</a></code> unionCase</h6>
          <p class="comments">The description of the union case. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="Value" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>Value</strong>(<span title="System.object">object</span> value, <span title="System.Type">Type</span> expressionType)</h4>
		<div class="content">Builds an expression that represents a constant value of a particular type 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.object">object</span></code> value</h6>
          <p class="comments">The untyped object. </p>
          <h6><code><span title="System.Type">Type</span></code> expressionType</h6>
          <p class="comments">The type of the object. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="Value``1" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>Value&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Quotations.T">T</span> value)</h4>
		<div class="content">Builds an expression that represents a constant value 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Quotations.T">T</span></code> value</h6>
          <p class="comments">The typed value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="Var" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>Var</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpVar.htm">FSharpVar</a> variable)</h4>
		<div class="content">Builds an expression that represents a variable 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpVar.htm">FSharpVar</a></code> variable</h6>
          <p class="comments">The input variable. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="VarSet" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>VarSet</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpVar.htm">FSharpVar</a> variable, <a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> value)</h4>
		<div class="content">Builds an expression that represents setting a mutable variable 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpVar.htm">FSharpVar</a></code> variable</h6>
          <p class="comments">The input variable. </p>
          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> value</h6>
          <p class="comments">The value to set. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	<div id="WhileLoop" class="method">
		<h4><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> <strong>WhileLoop</strong>(<a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> guard, <a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a> body)</h4>
		<div class="content">Builds an expression that represents a while loop 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> guard</h6>
          <p class="comments">The predicate to control the loop iteration. </p>
          <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code> body</h6>
          <p class="comments">The body of the while loop. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Quotations/FSharpExpr.htm">FSharpExpr</a></code></h6>
        <p>The resulting expression. </p>
      </div>
      
    </div>
	</div>
	
  <h3 class="section">Public properties</h3>

  <div id="CustomAttributes" class="method">
    <h4><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> <strong>CustomAttributes</strong> get; </h4>
    <div class="content">Returns the custom attributes of an expression. 
      
    </div>
  </div>
  <div id="Type" class="method">
    <h4><span title="System.Type">Type</span> <strong>Type</strong> get; </h4>
    <div class="content">Returns type of an expression. 
      
    </div>
  </div>
	<div id="footer">
  <p>Based on v4.3.0.0 of FSharp.Core.dll (Microsoft&#174; Visual Studio&#174; 2012)</p>
  <p>Generated by <a href="http://docu.jagregory.com">docu</a></p>
</div>
  </body>
</html>