<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <title>AsyncSeq - Microsoft&#174; Visual Studio&#174; 2012 Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body><div id="namespaces">
	<h2 class="fixed">Namespaces</h2>
	<div class="scroll">
		<ul>
			<li>
          <a href="../FSharp.Control/index.htm" class="current">FSharp.Control</a>
      </li>
			<li>
          <a href="../FSharp.IO/index.htm">FSharp.IO</a>
      </li>
			<li>
          <a href="../FSharp.Net/index.htm">FSharp.Net</a>
      </li>
			<li>
          <a href="../FSharpx/index.htm">FSharpx</a>
      </li>
			<li>
          <a href="../FSharpx.Core/index.htm">FSharpx.Core</a>
      </li>
			<li>
          <a href="../FSharpx.DataStructures/index.htm">FSharpx.DataStructures</a>
      </li>
			<li>
          <a href="../FSharpx.Http/index.htm">FSharpx.Http</a>
      </li>
			<li>
          <a href="../FSharpx.Observable/index.htm">FSharpx.Observable</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders/index.htm">FSharpx.TypeProviders</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.AppSettings/index.htm">FSharpx.TypeProviders.AppSettings</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Documents/index.htm">FSharpx.TypeProviders.Documents</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Excel/index.htm">FSharpx.TypeProviders.Excel</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase/index.htm">FSharpx.TypeProviders.Freebase</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.DesignTime/index.htm">FSharpx.TypeProviders.Freebase.DesignTime</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.FreebaseRuntime/index.htm">FSharpx.TypeProviders.Freebase.FreebaseRuntime</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.FreebaseTypeExtender/index.htm">FSharpx.TypeProviders.Freebase.FreebaseTypeExtender</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Graph/index.htm">FSharpx.TypeProviders.Graph</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Machine/index.htm">FSharpx.TypeProviders.Machine</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Math/index.htm">FSharpx.TypeProviders.Math</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Regex/index.htm">FSharpx.TypeProviders.Regex</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Xaml/index.htm">FSharpx.TypeProviders.Xaml</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections/index.htm">Microsoft.FSharp.Collections</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections.Tagged/index.htm">Microsoft.FSharp.Collections.Tagged</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Control/index.htm">Microsoft.FSharp.Control</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Core/index.htm">Microsoft.FSharp.Core</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Core.CompilerServices/index.htm">Microsoft.FSharp.Core.CompilerServices</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Data.TypeProviders.DesignTime/index.htm">Microsoft.FSharp.Data.TypeProviders.DesignTime</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Data.UnitSystems.SI.UnitNames/index.htm">Microsoft.FSharp.Data.UnitSystems.SI.UnitNames</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq/index.htm">Microsoft.FSharp.Linq</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq.QueryRunExtensions/index.htm">Microsoft.FSharp.Linq.QueryRunExtensions</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq.RuntimeHelpers/index.htm">Microsoft.FSharp.Linq.RuntimeHelpers</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Math/index.htm">Microsoft.FSharp.Math</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Metadata/index.htm">Microsoft.FSharp.Metadata</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.NativeInterop/index.htm">Microsoft.FSharp.NativeInterop</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Quotations/index.htm">Microsoft.FSharp.Quotations</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Reflection/index.htm">Microsoft.FSharp.Reflection</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text/index.htm">Microsoft.FSharp.Text</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.Lexing/index.htm">Microsoft.FSharp.Text.Lexing</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.Parsing/index.htm">Microsoft.FSharp.Text.Parsing</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.StructuredFormat/index.htm">Microsoft.FSharp.Text.StructuredFormat</a>
      </li>
			<li>
          <a href="../Samples.FSharp.ProvidedTypes/index.htm">Samples.FSharp.ProvidedTypes</a>
      </li>
			<li>
          <a href="../Utilities.Caching/index.htm">Utilities.Caching</a>
      </li>
		</ul>
	</div>
</div><div id="types">
  <h2 class="fixed">Types in FSharp.Control</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../FSharp.Control/AsyncExtensions.htm">AsyncExtensions</a>
        </li>
				<li>
            <a href="../FSharp.Control/AsyncSeq.htm" class="current">AsyncSeq</a>
        </li>
				<li>
            <a href="../FSharp.Control/AsyncSeqBuilder.htm">AsyncSeqBuilder</a>
        </li>
				<li>
            <a href="../FSharp.Control/AsyncSeqExtensions.htm">AsyncSeqExtensions</a>
        </li>
				<li>
            <a href="../FSharp.Control/AsyncSeqInner`1.htm">AsyncSeqInner&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharp.Control/AutoCancelAgent`1.htm">AutoCancelAgent&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharp.Control/BatchProcessingAgent`1.htm">BatchProcessingAgent&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharp.Control/BlockingQueueAgent`1.htm">BlockingQueueAgent&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharp.Control/CircularQueueAgent`1.htm">CircularQueueAgent&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharp.Control/ConcurrentSetAgent`1.htm">ConcurrentSetAgent&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharp.Control/ISubject`2.htm">ISubject&lt;TIn, TOut&gt;</a>
        </li>
				<li>
            <a href="../FSharp.Control/Observable.htm">Observable</a>
        </li>
				<li>
            <a href="../FSharp.Control/ObservableDispatcherExtensions.htm">ObservableDispatcherExtensions</a>
        </li>
				<li>
            <a href="../FSharp.Control/ObservableExtensions.htm">ObservableExtensions</a>
        </li>
				<li>
            <a href="../FSharp.Control/ObservableUpdate`1.htm">ObservableUpdate&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharp.Control/ReplaySubject`1.htm">ReplaySubject&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharp.Control/Seq.htm">Seq</a>
        </li>
				<li>
            <a href="../FSharp.Control/SlidingWindowAgent`1.htm">SlidingWindowAgent&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharp.Control/Subject`1.htm">Subject&lt;T&gt;</a>
        </li>
				<li>
            <a href="../FSharp.Control/Tags.htm">Tags</a>
        </li>
		</ul>
	</div>
</div>
    <div class="header">
		<p class="class"><strong>Type</strong> AsyncSeq</p>
		<p><strong>Namespace</strong> FSharp.Control</p>
	</div>
    <div class="sub-header">
			<div id="summary">Module with helper functions for working with asynchronous sequences 
			</div>
		
		
			<h3 class="section">Methods</h3>
			<ul>
				<li><a href="../FSharp.Control/AsyncSeq.htm#append``1">append&lt;T&gt;</a></li>
				<li><a href="../FSharp.Control/AsyncSeq.htm#cache``1">cache&lt;T&gt;</a></li>
				<li><a href="../FSharp.Control/AsyncSeq.htm#choose``2">choose&lt;T, a&gt;</a></li>
				<li><a href="../FSharp.Control/AsyncSeq.htm#chooseAsync``2">chooseAsync&lt;T, R&gt;</a></li>
				<li><a href="../FSharp.Control/AsyncSeq.htm#collect``2">collect&lt;T, TResult&gt;</a></li>
				<li><a href="../FSharp.Control/AsyncSeq.htm#filter``1">filter&lt;T&gt;</a></li>
				<li><a href="../FSharp.Control/AsyncSeq.htm#filterAsync``1">filterAsync&lt;T&gt;</a></li>
				<li><a href="../FSharp.Control/AsyncSeq.htm#firstOrDefault``1">firstOrDefault&lt;T&gt;</a></li>
				<li><a href="../FSharp.Control/AsyncSeq.htm#fold``2">fold&lt;TState, T&gt;</a></li>
				<li><a href="../FSharp.Control/AsyncSeq.htm#foldAsync``2">foldAsync&lt;TState, T&gt;</a></li>
				<li><a href="../FSharp.Control/AsyncSeq.htm#iter``1">iter&lt;T&gt;</a></li>
				<li><a href="../FSharp.Control/AsyncSeq.htm#iterAsync``1">iterAsync&lt;T&gt;</a></li>
				<li><a href="../FSharp.Control/AsyncSeq.htm#lastOrDefault``1">lastOrDefault&lt;T&gt;</a></li>
				<li><a href="../FSharp.Control/AsyncSeq.htm#map``2">map&lt;T, a&gt;</a></li>
				<li><a href="../FSharp.Control/AsyncSeq.htm#mapAsync``2">mapAsync&lt;T, TResult&gt;</a></li>
				<li><a href="../FSharp.Control/AsyncSeq.htm#ofObservable``1">ofObservable&lt;a&gt;</a></li>
				<li><a href="../FSharp.Control/AsyncSeq.htm#ofObservableBuffered``1">ofObservableBuffered&lt;a&gt;</a></li>
				<li><a href="../FSharp.Control/AsyncSeq.htm#pairwise``1">pairwise&lt;T&gt;</a></li>
				<li><a href="../FSharp.Control/AsyncSeq.htm#scan``2">scan&lt;TState, T&gt;</a></li>
				<li><a href="../FSharp.Control/AsyncSeq.htm#scanAsync``2">scanAsync&lt;TState, T&gt;</a></li>
				<li><a href="../FSharp.Control/AsyncSeq.htm#skip``1">skip&lt;T&gt;</a></li>
				<li><a href="../FSharp.Control/AsyncSeq.htm#skipWhile``1">skipWhile&lt;T&gt;</a></li>
				<li><a href="../FSharp.Control/AsyncSeq.htm#skipWhileAsync``1">skipWhileAsync&lt;T&gt;</a></li>
				<li><a href="../FSharp.Control/AsyncSeq.htm#take``1">take&lt;T&gt;</a></li>
				<li><a href="../FSharp.Control/AsyncSeq.htm#takeWhile``1">takeWhile&lt;T&gt;</a></li>
				<li><a href="../FSharp.Control/AsyncSeq.htm#takeWhileAsync``1">takeWhileAsync&lt;T&gt;</a></li>
				<li><a href="../FSharp.Control/AsyncSeq.htm#toBlockingSeq``1">toBlockingSeq&lt;T&gt;</a></li>
				<li><a href="../FSharp.Control/AsyncSeq.htm#toObservable``1">toObservable&lt;a&gt;</a></li>
				<li><a href="../FSharp.Control/AsyncSeq.htm#zip``2">zip&lt;T1, T2&gt;</a></li>
			</ul>
		
			<h3 class="section">Properties</h3>
			<ul>
				<li><a href="../FSharp.Control/AsyncSeq.htm#asyncSeq">asyncSeq</a></li>
			</ul>
		
	</div>
	
	
	
	<h3 class="section">Public static methods</h3>
	
	<div id="append``1" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>append&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> seq1, <a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> seq2)</h4>
		<div class="content">Yields all elements of the first asynchronous sequence and then
all elements of the second asynchronous sequence. 



      
    </div>
	</div>
	<div id="cache``1" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>cache&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> input)</h4>
		<div class="content">Create a new asynchronous sequence that caches all elements of the
sequence specified as the input. When accessing the resulting sequence
multiple times, the input will still be evaluated only once 



      
    </div>
	</div>
	<div id="choose``2" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>choose&lt;T, a&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> f, <a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> input)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="chooseAsync``2" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>chooseAsync&lt;T, R&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> f, <a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> input)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="collect``2" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>collect&lt;T, TResult&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> f, <a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> input)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="filter``1" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>filter&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> f, <a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> input)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="filterAsync``1" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>filterAsync&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> f, <a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> input)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="firstOrDefault``1" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>firstOrDefault&lt;T&gt;</strong>(<span title="FSharp.Control.T">T</span> def, <a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> input)</h4>
		<div class="content">Asynchronously returns the first element that was generated by the
given asynchronous sequence (or the specified default value). 



      
    </div>
	</div>
	<div id="fold``2" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>fold&lt;TState, T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> f, <span title="FSharp.Control.TState">TState</span> state, <a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> input)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="foldAsync``2" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>foldAsync&lt;TState, T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> f, <span title="FSharp.Control.TState">TState</span> state, <a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> input)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="iter``1" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>iter&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> f, <a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> input)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="iterAsync``1" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>iterAsync&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> f, <a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> input)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="lastOrDefault``1" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>lastOrDefault&lt;T&gt;</strong>(<span title="FSharp.Control.T">T</span> def, <a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> input)</h4>
		<div class="content">Asynchronously returns the last element that was generated by the
given asynchronous sequence (or the specified default value). 



      
    </div>
	</div>
	<div id="map``2" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>map&lt;T, a&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> f, <a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> input)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="mapAsync``2" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>mapAsync&lt;T, TResult&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> f, <a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> input)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="ofObservable``1" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>ofObservable&lt;a&gt;</strong>(<span title="System.IObservable<a>">IObservable&lt;a&gt;</span> input)</h4>
		<div class="content">Converts observable to an asynchronous sequence. Values that are produced
by the observable while the asynchronous sequence is blocked are discarded
(this function doesn't guarantee that asynchronou ssequence will return
all values produced by the observable) 



      
    </div>
	</div>
	<div id="ofObservableBuffered``1" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>ofObservableBuffered&lt;a&gt;</strong>(<span title="System.IObservable<a>">IObservable&lt;a&gt;</span> input)</h4>
		<div class="content">Converts observable to an asynchronous sequence. Values that are produced
by the observable while the asynchronous sequence is blocked are stored to
an unbounded buffer and are returned as next elements of the async sequence. 



      
    </div>
	</div>
	<div id="pairwise``1" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>pairwise&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> input)</h4>
		<div class="content">Returns an asynchronous sequence that returns pairs containing an element
from the input sequence and its predecessor. Empty sequence is returned for
singleton input sequence. 



      
    </div>
	</div>
	<div id="scan``2" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>scan&lt;TState, T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> f, <span title="FSharp.Control.TState">TState</span> state, <a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> input)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="scanAsync``2" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>scanAsync&lt;TState, T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> f, <span title="FSharp.Control.TState">TState</span> state, <a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> input)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="skip``1" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>skip&lt;T&gt;</strong>(<span title="System.int">int</span> count, <a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> input)</h4>
		<div class="content">Skips the first N elements of an asynchronous sequence and
then returns the rest of the sequence unmodified. 



      
    </div>
	</div>
	<div id="skipWhile``1" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>skipWhile&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> p, <a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> input)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="skipWhileAsync``1" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>skipWhileAsync&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> p, <a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> input)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="take``1" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>take&lt;T&gt;</strong>(<span title="System.int">int</span> count, <a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> input)</h4>
		<div class="content">Returns the first N elements of an asynchronous sequence 



      
    </div>
	</div>
	<div id="takeWhile``1" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>takeWhile&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> p, <a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> input)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="takeWhileAsync``1" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>takeWhileAsync&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> p, <a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> input)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="toBlockingSeq``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> <strong>toBlockingSeq&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> input)</h4>
		<div class="content">Converts asynchronous sequence to a synchronous blocking sequence.
The elements of the asynchronous sequence are consumed lazily. 



      
    </div>
	</div>
	<div id="toObservable``1" class="method">
		<h4><span title="System.IObservable<a>">IObservable&lt;a&gt;</span> <strong>toObservable&lt;a&gt;</strong>(<a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> aseq)</h4>
		<div class="content">Converts asynchronous sequence to an IObservable<_>. When the client subscribes
to the observable, a new copy of asynchronous sequence is started and is
sequentially iterated over (at the maximal possible speed). Disposing of the
observer cancels the iteration over asynchronous sequence. 



      
    </div>
	</div>
	<div id="zip``2" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>zip&lt;T1, T2&gt;</strong>(<a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> input1, <a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> input2)</h4>
		<div class="content">Combines two asynchronous sequences into a sequence of pairs.
The values from sequences are retrieved in parallel. 



      
    </div>
	</div>
	
  <h3 class="section">Public properties</h3>

  <div id="asyncSeq" class="method">
    <h4><a href="../FSharp.Control/AsyncSeqBuilder.htm">AsyncSeqBuilder</a> <strong>asyncSeq</strong> get; </h4>
    <div class="content">Builds an asynchronou sequence using the computation builder syntax 
      
    </div>
  </div>
	<div id="footer">
  <p>Based on v4.3.0.0 of FSharp.Core.dll (Microsoft&#174; Visual Studio&#174; 2012)</p>
  <p>Generated by <a href="http://docu.jagregory.com">docu</a></p>
</div>
  </body>
</html>