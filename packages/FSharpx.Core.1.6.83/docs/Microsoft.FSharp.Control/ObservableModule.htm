<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <title>ObservableModule - Microsoft&#174; Visual Studio&#174; 2012 Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body><div id="namespaces">
	<h2 class="fixed">Namespaces</h2>
	<div class="scroll">
		<ul>
			<li>
          <a href="../FSharp.Control/index.htm">FSharp.Control</a>
      </li>
			<li>
          <a href="../FSharp.IO/index.htm">FSharp.IO</a>
      </li>
			<li>
          <a href="../FSharp.Net/index.htm">FSharp.Net</a>
      </li>
			<li>
          <a href="../FSharpx/index.htm">FSharpx</a>
      </li>
			<li>
          <a href="../FSharpx.Core/index.htm">FSharpx.Core</a>
      </li>
			<li>
          <a href="../FSharpx.DataStructures/index.htm">FSharpx.DataStructures</a>
      </li>
			<li>
          <a href="../FSharpx.Http/index.htm">FSharpx.Http</a>
      </li>
			<li>
          <a href="../FSharpx.Observable/index.htm">FSharpx.Observable</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders/index.htm">FSharpx.TypeProviders</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.AppSettings/index.htm">FSharpx.TypeProviders.AppSettings</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Documents/index.htm">FSharpx.TypeProviders.Documents</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Excel/index.htm">FSharpx.TypeProviders.Excel</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase/index.htm">FSharpx.TypeProviders.Freebase</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.DesignTime/index.htm">FSharpx.TypeProviders.Freebase.DesignTime</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.FreebaseRuntime/index.htm">FSharpx.TypeProviders.Freebase.FreebaseRuntime</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.FreebaseTypeExtender/index.htm">FSharpx.TypeProviders.Freebase.FreebaseTypeExtender</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Graph/index.htm">FSharpx.TypeProviders.Graph</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Machine/index.htm">FSharpx.TypeProviders.Machine</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Math/index.htm">FSharpx.TypeProviders.Math</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Regex/index.htm">FSharpx.TypeProviders.Regex</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Xaml/index.htm">FSharpx.TypeProviders.Xaml</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections/index.htm">Microsoft.FSharp.Collections</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections.Tagged/index.htm">Microsoft.FSharp.Collections.Tagged</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Control/index.htm" class="current">Microsoft.FSharp.Control</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Core/index.htm">Microsoft.FSharp.Core</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Core.CompilerServices/index.htm">Microsoft.FSharp.Core.CompilerServices</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Data.TypeProviders.DesignTime/index.htm">Microsoft.FSharp.Data.TypeProviders.DesignTime</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Data.UnitSystems.SI.UnitNames/index.htm">Microsoft.FSharp.Data.UnitSystems.SI.UnitNames</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq/index.htm">Microsoft.FSharp.Linq</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq.QueryRunExtensions/index.htm">Microsoft.FSharp.Linq.QueryRunExtensions</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq.RuntimeHelpers/index.htm">Microsoft.FSharp.Linq.RuntimeHelpers</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Math/index.htm">Microsoft.FSharp.Math</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Metadata/index.htm">Microsoft.FSharp.Metadata</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.NativeInterop/index.htm">Microsoft.FSharp.NativeInterop</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Quotations/index.htm">Microsoft.FSharp.Quotations</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Reflection/index.htm">Microsoft.FSharp.Reflection</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text/index.htm">Microsoft.FSharp.Text</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.Lexing/index.htm">Microsoft.FSharp.Text.Lexing</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.Parsing/index.htm">Microsoft.FSharp.Text.Parsing</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.StructuredFormat/index.htm">Microsoft.FSharp.Text.StructuredFormat</a>
      </li>
			<li>
          <a href="../Samples.FSharp.ProvidedTypes/index.htm">Samples.FSharp.ProvidedTypes</a>
      </li>
			<li>
          <a href="../Utilities.Caching/index.htm">Utilities.Caching</a>
      </li>
		</ul>
	</div>
</div><div id="types">
  <h2 class="fixed">Types in Microsoft.FSharp.Control</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../Microsoft.FSharp.Control/AsyncResult`1.htm">AsyncResult&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/AsyncResultCell`1.htm">AsyncResultCell&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/AsyncStreamReader.htm">AsyncStreamReader</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/AsyncWorker`1.htm">AsyncWorker&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/CommonExtensions.htm">CommonExtensions</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/EventModule.htm">EventModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/FileExtensions.htm">FileExtensions</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/FSharpAsync.htm">FSharpAsync</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/FSharpAsyncBuilder.htm">FSharpAsyncBuilder</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/FSharpAsyncReplyChannel`1.htm">FSharpAsyncReplyChannel&lt;TReply&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/FSharpDelegateEvent`1.htm">FSharpDelegateEvent&lt;TDelegate&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/FSharpEvent`1.htm">FSharpEvent&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/FSharpEvent`2.htm">FSharpEvent&lt;TDelegate, TArgs&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/FSharpHandler`1.htm">FSharpHandler&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/FSharpMailboxProcessor`1.htm">FSharpMailboxProcessor&lt;TMsg&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/IDelegateEvent`1.htm">IDelegateEvent&lt;TDelegate&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/IEvent`2.htm">IEvent&lt;TDelegate, TArgs&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/LazyExtensions.htm">LazyExtensions</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/ObservableModule.htm" class="current">ObservableModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/StreamReaderExtensions.htm">StreamReaderExtensions</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/Tags.htm">Tags</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/WebClientExtensions.htm">WebClientExtensions</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/WebExtensions.htm">WebExtensions</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/WebRequestExtensions.htm">WebRequestExtensions</a>
        </li>
		</ul>
	</div>
</div>
    <div class="header">
		<p class="class"><strong>Type</strong> ObservableModule</p>
		<p><strong>Namespace</strong> Microsoft.FSharp.Control</p>
	</div>
    <div class="sub-header">
			<div id="summary">Basic operations on first class event and other observable objects. 
			</div>
		
		
			<h3 class="section">Methods</h3>
			<ul>
				<li><a href="../Microsoft.FSharp.Control/ObservableModule.htm#Add``1">Add&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Control/ObservableModule.htm#Choose``2">Choose&lt;T, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Control/ObservableModule.htm#Filter``1">Filter&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Control/ObservableModule.htm#Map``2">Map&lt;T, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Control/ObservableModule.htm#Merge``1">Merge&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Control/ObservableModule.htm#Pairwise``1">Pairwise&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Control/ObservableModule.htm#Partition``1">Partition&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Control/ObservableModule.htm#Scan``2">Scan&lt;TResult, T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Control/ObservableModule.htm#Split``3">Split&lt;T, TResult1, TResult2&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Control/ObservableModule.htm#Subscribe``1">Subscribe&lt;T&gt;</a></li>
			</ul>
		
		
	</div>
	
	
	
	<h3 class="section">Public static methods</h3>
	
	<div id="Add``1" class="method">
		<h4><span title="System.void">void</span> <strong>Add&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> callback, <span title="System.IObservable<T>">IObservable&lt;T&gt;</span> source)</h4>
		<div class="content">Creates an observer which permanently subscribes to the given observable and which calls
the given function for each observation. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> callback</h6>
          <p class="comments">The function to be called on each observation. </p>
          <h6><code><span title="System.IObservable<T>">IObservable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input Observable. </p>
      </div>

      
    </div>
	</div>
	<div id="Choose``2" class="method">
		<h4><span title="System.IObservable<TResult>">IObservable&lt;TResult&gt;</span> <strong>Choose&lt;T, TResult&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> chooser, <span title="System.IObservable<T>">IObservable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns an observable which chooses a projection of observations from the source
using the given function. The returned object will trigger observations  <code>x</code> for which the splitter returns  <code>Some x</code>. The returned object also propagates
all errors arising from the source and completes when the source completes. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> chooser</h6>
          <p class="comments">The function that returns Some for observations to be propagated
and None for observations to ignore. </p>
          <h6><code><span title="System.IObservable<T>">IObservable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input Observable. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.IObservable<TResult>">IObservable&lt;TResult&gt;</span></code></h6>
        <p>An Observable that only propagates some of the observations from the source. </p>
      </div>
      
    </div>
	</div>
	<div id="Filter``1" class="method">
		<h4><span title="System.IObservable<T>">IObservable&lt;T&gt;</span> <strong>Filter&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> predicate, <span title="System.IObservable<T>">IObservable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns an observable which filters the observations of the source
by the given function. The observable will see only those observations
for which the predicate returns true. The predicate is executed once for
each subscribed observer. The returned object also propagates error
observations arising from the source and completes when the source completes. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> predicate</h6>
          <h6><code><span title="System.IObservable<T>">IObservable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input Observable. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.IObservable<T>">IObservable&lt;T&gt;</span></code></h6>
        <p>An Observable that filters observations based on  <code>filter</code>. </p>
      </div>
      
    </div>
	</div>
	<div id="Map``2" class="method">
		<h4><span title="System.IObservable<TResult>">IObservable&lt;TResult&gt;</span> <strong>Map&lt;T, TResult&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> mapping, <span title="System.IObservable<T>">IObservable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns an observable which transforms the observations of the source by the
given function. The transformation function is executed once for each
subscribed observer. The returned object also propagates error observations
arising from the source and completes when the source completes. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> mapping</h6>
          <p class="comments">The function applied to observations from the source. </p>
          <h6><code><span title="System.IObservable<T>">IObservable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input Observable. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.IObservable<TResult>">IObservable&lt;TResult&gt;</span></code></h6>
        <p>An Observable of the type specified by  <code>mapping</code>. </p>
      </div>
      
    </div>
	</div>
	<div id="Merge``1" class="method">
		<h4><span title="System.IObservable<T>">IObservable&lt;T&gt;</span> <strong>Merge&lt;T&gt;</strong>(<span title="System.IObservable<T>">IObservable&lt;T&gt;</span> source1, <span title="System.IObservable<T>">IObservable&lt;T&gt;</span> source2)</h4>
		<div class="content">Returns an observable for the merged observations from the sources.
The returned object propagates success and error values arising
from either source and completes when both the sources have completed. <blockquote class="remarks">
  For each observer, the registered intermediate observing object is not
thread safe. That is, observations arising from the sources must not
be triggered concurrently on different threads. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.IObservable<T>">IObservable&lt;T&gt;</span></code> source1</h6>
          <p class="comments">The first Observable. </p>
          <h6><code><span title="System.IObservable<T>">IObservable&lt;T&gt;</span></code> source2</h6>
          <p class="comments">The second Observable. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.IObservable<T>">IObservable&lt;T&gt;</span></code></h6>
        <p>An Observable that propagates information from both sources. </p>
      </div>
      
    </div>
	</div>
	<div id="Pairwise``1" class="method">
		<h4><span title="System.IObservable<Tuple<T, T>>">IObservable&lt;Tuple&lt;T, T&gt;&gt;</span> <strong>Pairwise&lt;T&gt;</strong>(<span title="System.IObservable<T>">IObservable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns a new observable that triggers on the second and subsequent triggerings of the input observable.
The Nth triggering of the input observable passes the arguments from the N-1th and Nth triggering as
a pair. The argument passed to the N-1th triggering is held in hidden internal state until the
Nth triggering occurs. <blockquote class="remarks">
  For each observer, the registered intermediate observing object is not thread safe.
That is, observations arising from the source must not be triggered concurrently
on different threads. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.IObservable<T>">IObservable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input Observable. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.IObservable<Tuple<T, T>>">IObservable&lt;Tuple&lt;T, T&gt;&gt;</span></code></h6>
        <p>An Observable that triggers on successive pairs of observations from the input Observable. </p>
      </div>
      
    </div>
	</div>
	<div id="Partition``1" class="method">
		<h4><span title="System.Tuple<IObservable<T>, IObservable<T>>">Tuple&lt;IObservable&lt;T&gt;, IObservable&lt;T&gt;&gt;</span> <strong>Partition&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> predicate, <span title="System.IObservable<T>">IObservable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns two observables which partition the observations of the source by
the given function. The first will trigger observations for those values
for which the predicate returns true. The second will trigger observations
for those values where the predicate returns false. The predicate is
executed once for each subscribed observer. Both also propagate all error
observations arising from the source and each completes when the source
completes. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> predicate</h6>
          <p class="comments">The function to determine which output Observable will trigger
a particular observation. </p>
          <h6><code><span title="System.IObservable<T>">IObservable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input Observable. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Tuple<IObservable<T>, IObservable<T>>">Tuple&lt;IObservable&lt;T&gt;, IObservable&lt;T&gt;&gt;</span></code></h6>
        <p>A tuple of Observables.  The first triggers when the predicate returns true, and
the second triggers when the predicate returns false. </p>
      </div>
      
    </div>
	</div>
	<div id="Scan``2" class="method">
		<h4><span title="System.IObservable<TResult>">IObservable&lt;TResult&gt;</span> <strong>Scan&lt;TResult, T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> collector, <span title="Microsoft.FSharp.Control.TResult">TResult</span> state, <span title="System.IObservable<T>">IObservable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns an observable which, for each observer, allocates an item of state
and applies the given accumulating function to successive values arising from
the input. The returned object will trigger observations for each computed
state value, excluding the initial value. The returned object propagates
all errors arising from the source and completes when the source completes. <blockquote class="remarks">
  For each observer, the registered intermediate observing object is not thread safe.
That is, observations arising from the source must not be triggered concurrently
on different threads. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> collector</h6>
          <p class="comments">The function to update the state with each observation. </p>
          <h6><code><span title="Microsoft.FSharp.Control.TResult">TResult</span></code> state</h6>
          <p class="comments">The initial state. </p>
          <h6><code><span title="System.IObservable<T>">IObservable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input Observable. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.IObservable<TResult>">IObservable&lt;TResult&gt;</span></code></h6>
        <p>An Observable that triggers on the updated state values. </p>
      </div>
      
    </div>
	</div>
	<div id="Split``3" class="method">
		<h4><span title="System.Tuple<IObservable<TResult1>, IObservable<TResult2>>">Tuple&lt;IObservable&lt;TResult1&gt;, IObservable&lt;TResult2&gt;&gt;</span> <strong>Split&lt;T, TResult1, TResult2&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> splitter, <span title="System.IObservable<T>">IObservable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns two observables which split the observations of the source by the
given function. The first will trigger observations  <code>x</code>  for which the
splitter returns  <code>Choice1Of2 x</code>. The second will trigger observations <code>y</code>  for which the splitter returns  <code>Choice2Of2 y</code>  The splitter is
executed once for each subscribed observer. Both also propagate error
observations arising from the source and each completes when the source
completes. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> splitter</h6>
          <p class="comments">The function that takes an observation an transforms
it into one of the two output Choice types. </p>
          <h6><code><span title="System.IObservable<T>">IObservable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input Observable. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Tuple<IObservable<TResult1>, IObservable<TResult2>>">Tuple&lt;IObservable&lt;TResult1&gt;, IObservable&lt;TResult2&gt;&gt;</span></code></h6>
        <p>A tuple of Observables.  The first triggers when  <code>splitter</code>  returns Choice1of2
and the second triggers when  <code>splitter</code>  returns Choice2of2. </p>
      </div>
      
    </div>
	</div>
	<div id="Subscribe``1" class="method">
		<h4><span title="System.IDisposable">IDisposable</span> <strong>Subscribe&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> callback, <span title="System.IObservable<T>">IObservable&lt;T&gt;</span> source)</h4>
		<div class="content">Creates an observer which subscribes to the given observable and which calls
the given function for each observation. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> callback</h6>
          <p class="comments">The function to be called on each observation. </p>
          <h6><code><span title="System.IObservable<T>">IObservable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input Observable. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.IDisposable">IDisposable</span></code></h6>
        <p>An object that will remove the callback if disposed. </p>
      </div>
      
    </div>
	</div>
	
	<div id="footer">
  <p>Based on v4.3.0.0 of FSharp.Core.dll (Microsoft&#174; Visual Studio&#174; 2012)</p>
  <p>Generated by <a href="http://docu.jagregory.com">docu</a></p>
</div>
  </body>
</html>