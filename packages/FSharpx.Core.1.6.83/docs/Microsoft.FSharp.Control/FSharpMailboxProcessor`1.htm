<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <title>FSharpMailboxProcessor&lt;TMsg&gt; - Microsoft&#174; Visual Studio&#174; 2012 Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body><div id="namespaces">
	<h2 class="fixed">Namespaces</h2>
	<div class="scroll">
		<ul>
			<li>
          <a href="../FSharp.Control/index.htm">FSharp.Control</a>
      </li>
			<li>
          <a href="../FSharp.IO/index.htm">FSharp.IO</a>
      </li>
			<li>
          <a href="../FSharp.Net/index.htm">FSharp.Net</a>
      </li>
			<li>
          <a href="../FSharpx/index.htm">FSharpx</a>
      </li>
			<li>
          <a href="../FSharpx.Core/index.htm">FSharpx.Core</a>
      </li>
			<li>
          <a href="../FSharpx.DataStructures/index.htm">FSharpx.DataStructures</a>
      </li>
			<li>
          <a href="../FSharpx.Http/index.htm">FSharpx.Http</a>
      </li>
			<li>
          <a href="../FSharpx.Observable/index.htm">FSharpx.Observable</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders/index.htm">FSharpx.TypeProviders</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.AppSettings/index.htm">FSharpx.TypeProviders.AppSettings</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Documents/index.htm">FSharpx.TypeProviders.Documents</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Excel/index.htm">FSharpx.TypeProviders.Excel</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase/index.htm">FSharpx.TypeProviders.Freebase</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.DesignTime/index.htm">FSharpx.TypeProviders.Freebase.DesignTime</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.FreebaseRuntime/index.htm">FSharpx.TypeProviders.Freebase.FreebaseRuntime</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.FreebaseTypeExtender/index.htm">FSharpx.TypeProviders.Freebase.FreebaseTypeExtender</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Graph/index.htm">FSharpx.TypeProviders.Graph</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Machine/index.htm">FSharpx.TypeProviders.Machine</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Math/index.htm">FSharpx.TypeProviders.Math</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Regex/index.htm">FSharpx.TypeProviders.Regex</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Xaml/index.htm">FSharpx.TypeProviders.Xaml</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections/index.htm">Microsoft.FSharp.Collections</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections.Tagged/index.htm">Microsoft.FSharp.Collections.Tagged</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Control/index.htm" class="current">Microsoft.FSharp.Control</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Core/index.htm">Microsoft.FSharp.Core</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Core.CompilerServices/index.htm">Microsoft.FSharp.Core.CompilerServices</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Data.TypeProviders.DesignTime/index.htm">Microsoft.FSharp.Data.TypeProviders.DesignTime</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Data.UnitSystems.SI.UnitNames/index.htm">Microsoft.FSharp.Data.UnitSystems.SI.UnitNames</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq/index.htm">Microsoft.FSharp.Linq</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq.QueryRunExtensions/index.htm">Microsoft.FSharp.Linq.QueryRunExtensions</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq.RuntimeHelpers/index.htm">Microsoft.FSharp.Linq.RuntimeHelpers</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Math/index.htm">Microsoft.FSharp.Math</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Metadata/index.htm">Microsoft.FSharp.Metadata</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.NativeInterop/index.htm">Microsoft.FSharp.NativeInterop</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Quotations/index.htm">Microsoft.FSharp.Quotations</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Reflection/index.htm">Microsoft.FSharp.Reflection</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text/index.htm">Microsoft.FSharp.Text</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.Lexing/index.htm">Microsoft.FSharp.Text.Lexing</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.Parsing/index.htm">Microsoft.FSharp.Text.Parsing</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.StructuredFormat/index.htm">Microsoft.FSharp.Text.StructuredFormat</a>
      </li>
			<li>
          <a href="../Samples.FSharp.ProvidedTypes/index.htm">Samples.FSharp.ProvidedTypes</a>
      </li>
			<li>
          <a href="../Utilities.Caching/index.htm">Utilities.Caching</a>
      </li>
		</ul>
	</div>
</div><div id="types">
  <h2 class="fixed">Types in Microsoft.FSharp.Control</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../Microsoft.FSharp.Control/AsyncResult`1.htm">AsyncResult&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/AsyncResultCell`1.htm">AsyncResultCell&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/AsyncStreamReader.htm">AsyncStreamReader</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/AsyncWorker`1.htm">AsyncWorker&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/CommonExtensions.htm">CommonExtensions</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/EventModule.htm">EventModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/FileExtensions.htm">FileExtensions</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/FSharpAsync.htm">FSharpAsync</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/FSharpAsyncBuilder.htm">FSharpAsyncBuilder</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/FSharpAsyncReplyChannel`1.htm">FSharpAsyncReplyChannel&lt;TReply&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/FSharpDelegateEvent`1.htm">FSharpDelegateEvent&lt;TDelegate&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/FSharpEvent`1.htm">FSharpEvent&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/FSharpEvent`2.htm">FSharpEvent&lt;TDelegate, TArgs&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/FSharpHandler`1.htm">FSharpHandler&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/FSharpMailboxProcessor`1.htm" class="current">FSharpMailboxProcessor&lt;TMsg&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/IDelegateEvent`1.htm">IDelegateEvent&lt;TDelegate&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/IEvent`2.htm">IEvent&lt;TDelegate, TArgs&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/LazyExtensions.htm">LazyExtensions</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/ObservableModule.htm">ObservableModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/StreamReaderExtensions.htm">StreamReaderExtensions</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/Tags.htm">Tags</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/WebClientExtensions.htm">WebClientExtensions</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/WebExtensions.htm">WebExtensions</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/WebRequestExtensions.htm">WebRequestExtensions</a>
        </li>
		</ul>
	</div>
</div>
    <div class="header">
		<p class="class"><strong>Type</strong> FSharpMailboxProcessor&lt;TMsg&gt;</p>
		<p><strong>Namespace</strong> Microsoft.FSharp.Control</p>
		<p><strong>Interfaces</strong> <span title="System.IDisposable">IDisposable</span></p>
	</div>
    <div class="sub-header">
			<div id="summary">A message-processing agent which executes an asynchronous computation. <blockquote class="remarks">
  The agent encapsulates a message queue that supports multiple-writers and
a single reader agent. Writers send messages to the agent by using the Post
method and its variations.
The agent may wait for messages using the Receive or TryReceive methods or
scan through all available messages using the Scan or TryScan method. 
</blockquote>
			</div>
		
			<h3 class="section">Events</h3>
			<ul>
				<li><a href="../Microsoft.FSharp.Control/FSharpMailboxProcessor`1.htm#Error">Error</a></li>
			</ul>
		
			<h3 class="section">Methods</h3>
			<ul>
				<li><a href="../Microsoft.FSharp.Control/FSharpMailboxProcessor`1.htm#Post">Post</a></li>
				<li><a href="../Microsoft.FSharp.Control/FSharpMailboxProcessor`1.htm#PostAndAsyncReply``1">PostAndAsyncReply&lt;TReply&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Control/FSharpMailboxProcessor`1.htm#PostAndReply``1">PostAndReply&lt;TReply&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Control/FSharpMailboxProcessor`1.htm#PostAndTryAsyncReply``1">PostAndTryAsyncReply&lt;TReply&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Control/FSharpMailboxProcessor`1.htm#Receive">Receive</a></li>
				<li><a href="../Microsoft.FSharp.Control/FSharpMailboxProcessor`1.htm#Scan``1">Scan&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Control/FSharpMailboxProcessor`1.htm#Start">Start</a></li>
				<li><a href="../Microsoft.FSharp.Control/FSharpMailboxProcessor`1.htm#Start">Start</a></li>
				<li><a href="../Microsoft.FSharp.Control/FSharpMailboxProcessor`1.htm#TryPostAndReply``1">TryPostAndReply&lt;TReply&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Control/FSharpMailboxProcessor`1.htm#TryReceive">TryReceive</a></li>
				<li><a href="../Microsoft.FSharp.Control/FSharpMailboxProcessor`1.htm#TryScan``1">TryScan&lt;T&gt;</a></li>
			</ul>
		
			<h3 class="section">Properties</h3>
			<ul>
				<li><a href="../Microsoft.FSharp.Control/FSharpMailboxProcessor`1.htm#CurrentQueueLength">CurrentQueueLength</a></li>
				<li><a href="../Microsoft.FSharp.Control/FSharpMailboxProcessor`1.htm#DefaultTimeout">DefaultTimeout</a></li>
			</ul>
		
	</div>
	
  <h3 class="section">Events</h3>

  <div id="Error" class="method">
    <h4><strong>Error</strong></h4>
    <div class="content">
    </div>
  </div>
	
	<h3 class="section">Public instance methods</h3>
	
	<div id="Post" class="method">
		<h4><span title="System.void">void</span> <strong>Post</strong>(<span title="Microsoft.FSharp.Control.TMsg">TMsg</span> message)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="PostAndAsyncReply``1" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>PostAndAsyncReply&lt;TReply&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> buildMessage, <a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> timeout)</h4>
		<div class="content">Posts a message to an agent and await a reply on the channel, asynchronously. <blockquote class="remarks">
  The message is generated by applying  <code>buildMessage</code>  to a new reply channel
to be incorporated into the message. The receiving agent must process this
message and invoke the Reply method on this reply channel precisely once. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> buildMessage</h6>
          <p class="comments">The function to incorporate the AsyncReplyChannel into
the message to be sent. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code> timeout</h6>
          <p class="comments">An optional timeout parameter (in milliseconds) to wait for a reply message.
Defaults to -1 which corresponds to  <code>System.Threading.Timeout.Infinite</code>. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a></code></h6>
        <p>An asychronous computation that will wait for the reply from the agent. </p>
      </div>
      
    </div>
	</div>
	<div id="PostAndReply``1" class="method">
		<h4><span title="Microsoft.FSharp.Control.TReply">TReply</span> <strong>PostAndReply&lt;TReply&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> buildMessage, <a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> timeout)</h4>
		<div class="content">Posts a message to an agent and await a reply on the channel, synchronously. <blockquote class="remarks">
  The message is generated by applying  <code>buildMessage</code>  to a new reply channel
to be incorporated into the message. The receiving agent must process this
message and invoke the Reply method on this reply channel precisely once. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> buildMessage</h6>
          <p class="comments">The function to incorporate the AsyncReplyChannel into
the message to be sent. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code> timeout</h6>
          <p class="comments">An optional timeout parameter (in milliseconds) to wait for a reply message.
Defaults to -1 which corresponds to  <code>System.Threading.Timeout.Infinite</code>. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Control.TReply">TReply</span></code></h6>
        <p>The reply from the agent. </p>
      </div>
      
    </div>
	</div>
	<div id="PostAndTryAsyncReply``1" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>PostAndTryAsyncReply&lt;TReply&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> buildMessage, <a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> timeout)</h4>
		<div class="content">Like AsyncPostAndReply, but returns None if no reply within the timeout period. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> buildMessage</h6>
          <p class="comments">The function to incorporate the AsyncReplyChannel into
the message to be sent. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code> timeout</h6>
          <p class="comments">An optional timeout parameter (in milliseconds) to wait for a reply message.
Defaults to -1 which corresponds to  <code>System.Threading.Timeout.Infinite</code>. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a></code></h6>
        <p>An asynchronous computation that will return the reply or None if the timeout expires. </p>
      </div>
      
    </div>
	</div>
	<div id="Receive" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>Receive</strong>(<a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> timeout)</h4>
		<div class="content">Waits for a message. This will consume the first message in arrival order. <blockquote class="remarks">
  This method is for use within the body of the agent.
This method is for use within the body of the agent. For each agent, at most
one concurrent reader may be active, so no more than one concurrent call to
Receive, TryReceive, Scan and/or TryScan may be active. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code> timeout</h6>
          <p class="comments">An optional timeout in milliseconds. Defaults to -1 which corresponds
to  <code>System.Threading.Timeout.Infinite</code>. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a></code></h6>
        <p>An asynchronous computation that returns the received message. </p>
      </div>
      
    </div>
	</div>
	<div id="Scan``1" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>Scan&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> scanner, <a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> timeout)</h4>
		<div class="content">Scans for a message by looking through messages in arrival order until  <code>scanner</code> returns a Some value. Other messages remain in the queue. <blockquote class="remarks">
  Returns None if a timeout is given and the timeout is exceeded.
This method is for use within the body of the agent. For each agent, at most
one concurrent reader may be active, so no more than one concurrent call to
Receive, TryReceive, Scan and/or TryScan may be active. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> scanner</h6>
          <p class="comments">The function to return None if the message is to be skipped
or Some if the message is to be processed and removed from the queue. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code> timeout</h6>
          <p class="comments">An optional timeout in milliseconds. Defaults to -1 which corresponds
to  <code>System.Threading.Timeout.Infinite</code>. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a></code></h6>
        <p>An asynchronous computation that  <code>scanner</code>  built off the read message. </p>
      </div>
      
    </div>
	</div>
	<div id="Start" class="method">
		<h4><span title="System.void">void</span> <strong>Start</strong>()</h4>
		<div class="content">Starts the agent. 



      
    </div>
	</div>
	<div id="TryPostAndReply``1" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>TryPostAndReply&lt;TReply&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> buildMessage, <a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> timeout)</h4>
		<div class="content">Like PostAndReply, but returns None if no reply within the timeout period. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> buildMessage</h6>
          <p class="comments">The function to incorporate the AsyncReplyChannel into
the message to be sent. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code> timeout</h6>
          <p class="comments">An optional timeout parameter (in milliseconds) to wait for a reply message.
Defaults to -1 which corresponds to  <code>System.Threading.Timeout.Infinite</code>. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>The reply from the agent or None if the timeout expires. </p>
      </div>
      
    </div>
	</div>
	<div id="TryReceive" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>TryReceive</strong>(<a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> timeout)</h4>
		<div class="content">Waits for a message. This will consume the first message in arrival order. <blockquote class="remarks">
  This method is for use within the body of the agent.
Returns None if a timeout is given and the timeout is exceeded.
This method is for use within the body of the agent. For each agent, at most
one concurrent reader may be active, so no more than one concurrent call to
Receive, TryReceive, Scan and/or TryScan may be active. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code> timeout</h6>
          <p class="comments">An optional timeout in milliseconds. Defaults to -1 which
corresponds to  <code>System.Threading.Timeout.Infinite</code>. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a></code></h6>
        <p>An asynchronous computation that returns the received message or
None if the timeout is exceeded. </p>
      </div>
      
    </div>
	</div>
	<div id="TryScan``1" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>TryScan&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> scanner, <a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> timeout)</h4>
		<div class="content">Scans for a message by looking through messages in arrival order until  <code>scanner</code> returns a Some value. Other messages remain in the queue. <blockquote class="remarks">
  This method is for use within the body of the agent. For each agent, at most
one concurrent reader may be active, so no more than one concurrent call to
Receive, TryReceive, Scan and/or TryScan may be active. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> scanner</h6>
          <p class="comments">The function to return None if the message is to be skipped
or Some if the message is to be processed and removed from the queue. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code> timeout</h6>
          <p class="comments">An optional timeout in milliseconds. Defaults to -1 which corresponds
to  <code>System.Threading.Timeout.Infinite</code>. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a></code></h6>
        <p>An asynchronous computation that  <code>scanner</code>  built off the read message. </p>
      </div>
      
    </div>
	</div>
	
	<h3 class="section">Public static methods</h3>
	
	<div id="Start" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpMailboxProcessor`1.htm">FSharpMailboxProcessor&lt;TMsg&gt;</a> <strong>Start</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> body, <a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> cancellationToken)</h4>
		<div class="content">Creates and starts an agent. The  <code>body</code>  function is used to generate the asynchronous
computation executed by the agent. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> body</h6>
          <p class="comments">The function to produce an asynchronous computation that will be executed
as the read loop for the MailboxProcessor when Start is called. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code> cancellationToken</h6>
          <p class="comments">An optional cancellation token for the  <code>body</code>.
Defaults to  <code>Async.DefaultCancellationToken</code>. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Control/FSharpMailboxProcessor`1.htm">FSharpMailboxProcessor&lt;TMsg&gt;</a></code></h6>
        <p>The created MailboxProcessor. </p>
      </div>
      
    </div>
	</div>
	
  <h3 class="section">Public properties</h3>

  <div id="CurrentQueueLength" class="method">
    <h4><span title="System.int">int</span> <strong>CurrentQueueLength</strong> get; </h4>
    <div class="content">Returns the number of unprocessed messages in the message queue of the agent. 
      
    </div>
  </div>
  <div id="DefaultTimeout" class="method">
    <h4><span title="System.int">int</span> <strong>DefaultTimeout</strong> get; set;</h4>
    <div class="content">Raises a timeout exception if a message not received in this amount of time. By default
no timeout is used. 
      
    </div>
  </div>
	<div id="footer">
  <p>Based on v4.3.0.0 of FSharp.Core.dll (Microsoft&#174; Visual Studio&#174; 2012)</p>
  <p>Generated by <a href="http://docu.jagregory.com">docu</a></p>
</div>
  </body>
</html>