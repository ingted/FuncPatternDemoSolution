<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <title>FSharpAsyncBuilder - Microsoft&#174; Visual Studio&#174; 2012 Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body><div id="namespaces">
	<h2 class="fixed">Namespaces</h2>
	<div class="scroll">
		<ul>
			<li>
          <a href="../FSharp.Control/index.htm">FSharp.Control</a>
      </li>
			<li>
          <a href="../FSharp.IO/index.htm">FSharp.IO</a>
      </li>
			<li>
          <a href="../FSharp.Net/index.htm">FSharp.Net</a>
      </li>
			<li>
          <a href="../FSharpx/index.htm">FSharpx</a>
      </li>
			<li>
          <a href="../FSharpx.Core/index.htm">FSharpx.Core</a>
      </li>
			<li>
          <a href="../FSharpx.DataStructures/index.htm">FSharpx.DataStructures</a>
      </li>
			<li>
          <a href="../FSharpx.Http/index.htm">FSharpx.Http</a>
      </li>
			<li>
          <a href="../FSharpx.Observable/index.htm">FSharpx.Observable</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders/index.htm">FSharpx.TypeProviders</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.AppSettings/index.htm">FSharpx.TypeProviders.AppSettings</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Documents/index.htm">FSharpx.TypeProviders.Documents</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Excel/index.htm">FSharpx.TypeProviders.Excel</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase/index.htm">FSharpx.TypeProviders.Freebase</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.DesignTime/index.htm">FSharpx.TypeProviders.Freebase.DesignTime</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.FreebaseRuntime/index.htm">FSharpx.TypeProviders.Freebase.FreebaseRuntime</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.FreebaseTypeExtender/index.htm">FSharpx.TypeProviders.Freebase.FreebaseTypeExtender</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Graph/index.htm">FSharpx.TypeProviders.Graph</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Machine/index.htm">FSharpx.TypeProviders.Machine</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Math/index.htm">FSharpx.TypeProviders.Math</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Regex/index.htm">FSharpx.TypeProviders.Regex</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Xaml/index.htm">FSharpx.TypeProviders.Xaml</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections/index.htm">Microsoft.FSharp.Collections</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections.Tagged/index.htm">Microsoft.FSharp.Collections.Tagged</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Control/index.htm" class="current">Microsoft.FSharp.Control</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Core/index.htm">Microsoft.FSharp.Core</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Core.CompilerServices/index.htm">Microsoft.FSharp.Core.CompilerServices</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Data.TypeProviders.DesignTime/index.htm">Microsoft.FSharp.Data.TypeProviders.DesignTime</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Data.UnitSystems.SI.UnitNames/index.htm">Microsoft.FSharp.Data.UnitSystems.SI.UnitNames</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq/index.htm">Microsoft.FSharp.Linq</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq.QueryRunExtensions/index.htm">Microsoft.FSharp.Linq.QueryRunExtensions</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq.RuntimeHelpers/index.htm">Microsoft.FSharp.Linq.RuntimeHelpers</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Math/index.htm">Microsoft.FSharp.Math</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Metadata/index.htm">Microsoft.FSharp.Metadata</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.NativeInterop/index.htm">Microsoft.FSharp.NativeInterop</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Quotations/index.htm">Microsoft.FSharp.Quotations</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Reflection/index.htm">Microsoft.FSharp.Reflection</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text/index.htm">Microsoft.FSharp.Text</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.Lexing/index.htm">Microsoft.FSharp.Text.Lexing</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.Parsing/index.htm">Microsoft.FSharp.Text.Parsing</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.StructuredFormat/index.htm">Microsoft.FSharp.Text.StructuredFormat</a>
      </li>
			<li>
          <a href="../Samples.FSharp.ProvidedTypes/index.htm">Samples.FSharp.ProvidedTypes</a>
      </li>
			<li>
          <a href="../Utilities.Caching/index.htm">Utilities.Caching</a>
      </li>
		</ul>
	</div>
</div><div id="types">
  <h2 class="fixed">Types in Microsoft.FSharp.Control</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../Microsoft.FSharp.Control/AsyncResult`1.htm">AsyncResult&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/AsyncResultCell`1.htm">AsyncResultCell&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/AsyncStreamReader.htm">AsyncStreamReader</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/AsyncWorker`1.htm">AsyncWorker&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/CommonExtensions.htm">CommonExtensions</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/EventModule.htm">EventModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/FileExtensions.htm">FileExtensions</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/FSharpAsync.htm">FSharpAsync</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/FSharpAsyncBuilder.htm" class="current">FSharpAsyncBuilder</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/FSharpAsyncReplyChannel`1.htm">FSharpAsyncReplyChannel&lt;TReply&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/FSharpDelegateEvent`1.htm">FSharpDelegateEvent&lt;TDelegate&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/FSharpEvent`1.htm">FSharpEvent&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/FSharpEvent`2.htm">FSharpEvent&lt;TDelegate, TArgs&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/FSharpHandler`1.htm">FSharpHandler&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/FSharpMailboxProcessor`1.htm">FSharpMailboxProcessor&lt;TMsg&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/IDelegateEvent`1.htm">IDelegateEvent&lt;TDelegate&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/IEvent`2.htm">IEvent&lt;TDelegate, TArgs&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/LazyExtensions.htm">LazyExtensions</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/ObservableModule.htm">ObservableModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/StreamReaderExtensions.htm">StreamReaderExtensions</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/Tags.htm">Tags</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/WebClientExtensions.htm">WebClientExtensions</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/WebExtensions.htm">WebExtensions</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Control/WebRequestExtensions.htm">WebRequestExtensions</a>
        </li>
		</ul>
	</div>
</div>
    <div class="header">
		<p class="class"><strong>Type</strong> FSharpAsyncBuilder</p>
		<p><strong>Namespace</strong> Microsoft.FSharp.Control</p>
	</div>
    <div class="sub-header">
			<div id="summary">The type of the  <code>async</code>  operator, used to build workflows for asynchronous computations. 
			</div>
		
		
			<h3 class="section">Methods</h3>
			<ul>
				<li><a href="../Microsoft.FSharp.Control/FSharpAsyncBuilder.htm#Bind``2">Bind&lt;T, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Control/FSharpAsyncBuilder.htm#Combine``1">Combine&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Control/FSharpAsyncBuilder.htm#Delay``1">Delay&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Control/FSharpAsyncBuilder.htm#For``1">For&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Control/FSharpAsyncBuilder.htm#Return``1">Return&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Control/FSharpAsyncBuilder.htm#ReturnFrom``1">ReturnFrom&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Control/FSharpAsyncBuilder.htm#TryFinally``1">TryFinally&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Control/FSharpAsyncBuilder.htm#TryWith``1">TryWith&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Control/FSharpAsyncBuilder.htm#Using``2">Using&lt;T, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Control/FSharpAsyncBuilder.htm#While">While</a></li>
				<li><a href="../Microsoft.FSharp.Control/FSharpAsyncBuilder.htm#Zero">Zero</a></li>
			</ul>
		
		
	</div>
	
	
	<h3 class="section">Public instance methods</h3>
	
	<div id="Bind``2" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>Bind&lt;T, TResult&gt;</strong>(<a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> computation, <a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> binder)</h4>
		<div class="content">Creates an asynchronous computation that runs  <code>computation</code> , and when <code>computation</code>  generates a result  <code>T</code> , runs  <code>binder res</code>. <blockquote class="remarks">
  A cancellation check is performed when the computation is executed.
The existence of this method permits the use of  <code>let!</code>  in the <code>async {... }</code>  computation expression syntax. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a></code> computation</h6>
          <p class="comments">The computation to provide an unbound result. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> binder</h6>
          <p class="comments">The function to bind the result of  <code>computation</code>. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a></code></h6>
        <p>An asynchronous computation that performs a monadic bind on the result
of  <code>computation</code>. </p>
      </div>
      
    </div>
	</div>
	<div id="Combine``1" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>Combine&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> computation1, <a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> computation2)</h4>
		<div class="content">Creates an asynchronous computation that first runs  <code>computation1</code> and then runs  <code>computation2</code> , returning the result of  <code>computation2</code>. <blockquote class="remarks">
  A cancellation check is performed when the computation is executed.
The existence of this method permits the use of expression sequencing in the <code>async {... }</code>  computation expression syntax. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a></code> computation1</h6>
          <p class="comments">The first part of the sequenced computation. </p>
          <h6><code><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a></code> computation2</h6>
          <p class="comments">The second part of the sequenced computation. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a></code></h6>
        <p>An asynchronous computation that runs both of the computations sequentially. </p>
      </div>
      
    </div>
	</div>
	<div id="Delay``1" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>Delay&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> generator)</h4>
		<div class="content">Returns a sequence that is built from the given delayed specification of a
sequence. <blockquote class="remarks">
  The input function is evaluated each time an IEnumerator for the sequence
is requested. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> generator</h6>
          <p class="comments">The generating function for the sequence. </p>
      </div>

      
    </div>
	</div>
	<div id="For``1" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>For&lt;T&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> sequence, <a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> body)</h4>
		<div class="content">Creates an asynchronous computation that enumerates the sequence  <code>seq</code> on demand and runs  <code>body</code>  for each element. <blockquote class="remarks">
  A cancellation check is performed on each iteration of the loop.
The existence of this method permits the use of  <code>for</code>  in the <code>async {... }</code>  computation expression syntax. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> sequence</h6>
          <p class="comments">The sequence to enumerate. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> body</h6>
          <p class="comments">A function to take an item from the sequence and create
an asynchronous computation.  Can be seen as the body of the  <code>for</code>  expression. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a></code></h6>
        <p>An asynchronous computation that will enumerate the sequence and run  <code>body</code> for each element. </p>
      </div>
      
    </div>
	</div>
	<div id="Return``1" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>Return&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Control.T">T</span> value)</h4>
		<div class="content">Creates an asynchronous computation that returns the result  <code>v</code>. <blockquote class="remarks">
  A cancellation check is performed when the computation is executed.
The existence of this method permits the use of  <code>return</code>  in the <code>async {... }</code>  computation expression syntax. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Control.T">T</span></code> value</h6>
          <p class="comments">The value to return from the computation. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a></code></h6>
        <p>An asynchronous computation that returns  <code>value</code>  when executed. </p>
      </div>
      
    </div>
	</div>
	<div id="ReturnFrom``1" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>ReturnFrom&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> computation)</h4>
		<div class="content">Delegates to the input computation. <blockquote class="remarks">
  The existence of this method permits the use of  <code>return!</code>  in the <code>async {... }</code>  computation expression syntax. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a></code> computation</h6>
          <p class="comments">The input computation. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a></code></h6>
        <p>The input computation. </p>
      </div>
      
    </div>
	</div>
	<div id="TryFinally``1" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>TryFinally&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> computation, <a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> compensation)</h4>
		<div class="content">Creates an asynchronous computation that runs  <code>computation</code>. The action  <code>compensation</code>  is executed
after  <code>computation</code>  completes, whether  <code>computation</code>  exits normally or by an exception. If  <code>compensation</code>  raises an exception itself
the original exception is discarded and the new exception becomes the overall result of the computation. <blockquote class="remarks">
  A cancellation check is performed when the computation is executed.
The existence of this method permits the use of  <code>try/finally</code>  in the <code>async {... }</code>  computation expression syntax. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a></code> computation</h6>
          <p class="comments">The input computation. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> compensation</h6>
          <p class="comments">The action to be run after  <code>computation</code>  completes or raises an
exception (including cancellation). </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a></code></h6>
        <p>An asynchronous computation that executes computation and compensation aftewards or
when an exception is raised. </p>
      </div>
      
    </div>
	</div>
	<div id="TryWith``1" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>TryWith&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> computation, <a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> catchHandler)</h4>
		<div class="content">Creates an asynchronous computation that runs  <code>computation</code>  and returns its result.
If an exception happens then  <code>catchHandler(exn)</code>  is called and the resulting computation executed instead. <blockquote class="remarks">
  A cancellation check is performed when the computation is executed.
The existence of this method permits the use of  <code>try/with</code>  in the <code>async {... }</code>  computation expression syntax. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a></code> computation</h6>
          <p class="comments">The input computation. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> catchHandler</h6>
          <p class="comments">The function to run when  <code>computation</code>  throws an exception. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a></code></h6>
        <p>An asynchronous computation that executes  <code>computation</code>  and calls  <code>catchHandler</code>  if an
exception is thrown. </p>
      </div>
      
    </div>
	</div>
	<div id="Using``2" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>Using&lt;T, TResult&gt;</strong>(<span title="Microsoft.FSharp.Control.T">T</span> resource, <a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> binder)</h4>
		<div class="content">Creates an asynchronous computation that runs  <code>binder(resource)</code>.
The action  <code>resource.Dispose()</code>  is executed as this computation yields its result
or if the asynchronous computation exits by an exception or by cancellation. <blockquote class="remarks">
  A cancellation check is performed when the computation is executed.
The existence of this method permits the use of  <code>use</code>  and  <code>use!</code>  in the <code>async {... }</code>  computation expression syntax. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Control.T">T</span></code> resource</h6>
          <p class="comments">The resource to be used and disposed. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> binder</h6>
          <p class="comments">The function that takes the resource and returns an asynchronous
computation. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a></code></h6>
        <p>An asynchronous computation that binds and eventually disposes  <code>resource</code>. </p>
      </div>
      
    </div>
	</div>
	<div id="While" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>While</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> guard, <a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> computation)</h4>
		<div class="content">Creates an asynchronous computation that runs  <code>computation</code>  repeatedly
until  <code>guard()</code>  becomes false. <blockquote class="remarks">
  A cancellation check is performed whenever the computation is executed.
The existence of this method permits the use of  <code>while</code>  in the <code>async {... }</code>  computation expression syntax. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> guard</h6>
          <p class="comments">The function to determine when to stop executing  <code>computation</code>. </p>
          <h6><code><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a></code> computation</h6>
          <p class="comments">The function to be executed.  Equivalent to the body
of a  <code>while</code>  expression. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a></code></h6>
        <p>An asynchronous computation that behaves similarly to a while loop when run. </p>
      </div>
      
    </div>
	</div>
	<div id="Zero" class="method">
		<h4><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a> <strong>Zero</strong>()</h4>
		<div class="content">Creates an asynchronous computation that just returns  <code>()</code>. <blockquote class="remarks">
  A cancellation check is performed when the computation is executed.
The existence of this method permits the use of empty  <code>else</code>  branches in the <code>async {... }</code>  computation expression syntax. 
</blockquote>



      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Control/FSharpAsync`1.htm">FSharpAsync&lt;T&gt;</a></code></h6>
        <p>An asynchronous computation that returns  <code>()</code>. </p>
      </div>
      
    </div>
	</div>
	
	
	<div id="footer">
  <p>Based on v4.3.0.0 of FSharp.Core.dll (Microsoft&#174; Visual Studio&#174; 2012)</p>
  <p>Generated by <a href="http://docu.jagregory.com">docu</a></p>
</div>
  </body>
</html>