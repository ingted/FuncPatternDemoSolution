<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <title>Operators - Microsoft&#174; Visual Studio&#174; 2012 Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body><div id="namespaces">
	<h2 class="fixed">Namespaces</h2>
	<div class="scroll">
		<ul>
			<li>
          <a href="../FSharp.Control/index.htm">FSharp.Control</a>
      </li>
			<li>
          <a href="../FSharp.IO/index.htm">FSharp.IO</a>
      </li>
			<li>
          <a href="../FSharp.Net/index.htm">FSharp.Net</a>
      </li>
			<li>
          <a href="../FSharpx/index.htm">FSharpx</a>
      </li>
			<li>
          <a href="../FSharpx.Core/index.htm">FSharpx.Core</a>
      </li>
			<li>
          <a href="../FSharpx.DataStructures/index.htm">FSharpx.DataStructures</a>
      </li>
			<li>
          <a href="../FSharpx.Http/index.htm">FSharpx.Http</a>
      </li>
			<li>
          <a href="../FSharpx.Observable/index.htm">FSharpx.Observable</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders/index.htm">FSharpx.TypeProviders</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.AppSettings/index.htm">FSharpx.TypeProviders.AppSettings</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Documents/index.htm">FSharpx.TypeProviders.Documents</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Excel/index.htm">FSharpx.TypeProviders.Excel</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase/index.htm">FSharpx.TypeProviders.Freebase</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.DesignTime/index.htm">FSharpx.TypeProviders.Freebase.DesignTime</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.FreebaseRuntime/index.htm">FSharpx.TypeProviders.Freebase.FreebaseRuntime</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.FreebaseTypeExtender/index.htm">FSharpx.TypeProviders.Freebase.FreebaseTypeExtender</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Graph/index.htm">FSharpx.TypeProviders.Graph</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Machine/index.htm">FSharpx.TypeProviders.Machine</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Math/index.htm">FSharpx.TypeProviders.Math</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Regex/index.htm">FSharpx.TypeProviders.Regex</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Xaml/index.htm">FSharpx.TypeProviders.Xaml</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections/index.htm">Microsoft.FSharp.Collections</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections.Tagged/index.htm">Microsoft.FSharp.Collections.Tagged</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Control/index.htm">Microsoft.FSharp.Control</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Core/index.htm" class="current">Microsoft.FSharp.Core</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Core.CompilerServices/index.htm">Microsoft.FSharp.Core.CompilerServices</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Data.TypeProviders.DesignTime/index.htm">Microsoft.FSharp.Data.TypeProviders.DesignTime</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Data.UnitSystems.SI.UnitNames/index.htm">Microsoft.FSharp.Data.UnitSystems.SI.UnitNames</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq/index.htm">Microsoft.FSharp.Linq</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq.QueryRunExtensions/index.htm">Microsoft.FSharp.Linq.QueryRunExtensions</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq.RuntimeHelpers/index.htm">Microsoft.FSharp.Linq.RuntimeHelpers</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Math/index.htm">Microsoft.FSharp.Math</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Metadata/index.htm">Microsoft.FSharp.Metadata</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.NativeInterop/index.htm">Microsoft.FSharp.NativeInterop</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Quotations/index.htm">Microsoft.FSharp.Quotations</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Reflection/index.htm">Microsoft.FSharp.Reflection</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text/index.htm">Microsoft.FSharp.Text</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.Lexing/index.htm">Microsoft.FSharp.Text.Lexing</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.Parsing/index.htm">Microsoft.FSharp.Text.Parsing</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.StructuredFormat/index.htm">Microsoft.FSharp.Text.StructuredFormat</a>
      </li>
			<li>
          <a href="../Samples.FSharp.ProvidedTypes/index.htm">Samples.FSharp.ProvidedTypes</a>
      </li>
			<li>
          <a href="../Utilities.Caching/index.htm">Utilities.Caching</a>
      </li>
		</ul>
	</div>
</div><div id="types">
  <h2 class="fixed">Types in Microsoft.FSharp.Core</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../Microsoft.FSharp.Core/AbstractClassAttribute.htm">AbstractClassAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/AllowNullLiteralAttribute.htm">AllowNullLiteralAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/AutoOpenAttribute.htm">AutoOpenAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/AutoSerializableAttribute.htm">AutoSerializableAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/Checked.htm">Checked</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/ClassAttribute.htm">ClassAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/CLIEventAttribute.htm">CLIEventAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/CLIMutableAttribute.htm">CLIMutableAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/ComparisonConditionalOnAttribute.htm">ComparisonConditionalOnAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/CompilationArgumentCountsAttribute.htm">CompilationArgumentCountsAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/CompilationMappingAttribute.htm">CompilationMappingAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/CompilationRepresentationAttribute.htm">CompilationRepresentationAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/CompilationRepresentationFlags.htm">CompilationRepresentationFlags</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/CompilationSourceNameAttribute.htm">CompilationSourceNameAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/CompiledNameAttribute.htm">CompiledNameAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/CompilerMessageAttribute.htm">CompilerMessageAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/CustomComparisonAttribute.htm">CustomComparisonAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/CustomEqualityAttribute.htm">CustomEqualityAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/CustomOperationAttribute.htm">CustomOperationAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/DefaultAugmentationAttribute.htm">DefaultAugmentationAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/DefaultValueAttribute.htm">DefaultValueAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/EntryPointAttribute.htm">EntryPointAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/EqualityConditionalOnAttribute.htm">EqualityConditionalOnAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/ErrorStrings.htm">ErrorStrings</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/ExperimentalAttribute.htm">ExperimentalAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/ExtraTopLevelOperators.htm">ExtraTopLevelOperators</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FSharpChoice`2.htm">FSharpChoice&lt;T1, T2&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FSharpChoice`3.htm">FSharpChoice&lt;T1, T2, T3&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FSharpChoice`4.htm">FSharpChoice&lt;T1, T2, T3, T4&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FSharpChoice`5.htm">FSharpChoice&lt;T1, T2, T3, T4, T5&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FSharpChoice`6.htm">FSharpChoice&lt;T1, T2, T3, T4, T5, T6&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FSharpChoice`7.htm">FSharpChoice&lt;T1, T2, T3, T4, T5, T6, T7&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FSharpFunc`3.htm">FSharpFunc`3</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FSharpFunc`4.htm">FSharpFunc`4</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FSharpFunc`5.htm">FSharpFunc`5</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FSharpFunc`6.htm">FSharpFunc`6</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FSharpInterfaceDataVersionAttribute.htm">FSharpInterfaceDataVersionAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FSharpRef`1.htm">FSharpRef&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FSharpTypeFunc.htm">FSharpTypeFunc</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FuncConvert.htm">FuncConvert</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FuncConvertExtensions.htm">FuncConvertExtensions</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/GeneralizableValueAttribute.htm">GeneralizableValueAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/HashCompare.htm">HashCompare</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/InterfaceAttribute.htm">InterfaceAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/IntrinsicFunctions.htm">IntrinsicFunctions</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/IntrinsicOperators.htm">IntrinsicOperators</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm">LanguagePrimitives</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/LazyModule.htm">LazyModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/LiteralAttribute.htm">LiteralAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/MatchFailureException.htm">MatchFailureException</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/MeasureAnnotatedAbbreviationAttribute.htm">MeasureAnnotatedAbbreviationAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/MeasureAttribute.htm">MeasureAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/NoComparisonAttribute.htm">NoComparisonAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/NoDynamicInvocationAttribute.htm">NoDynamicInvocationAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/NoEqualityAttribute.htm">NoEqualityAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/NumericLiteralI.htm">NumericLiteralI</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/NumericLiterals.htm">NumericLiterals</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/OperatorIntrinsics.htm">OperatorIntrinsics</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/Operators.htm" class="current">Operators</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/OptimizedClosures.htm">OptimizedClosures</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/OptionalArgumentAttribute.htm">OptionalArgumentAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/OptionModule.htm">OptionModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/PrintfFormat`4.htm">PrintfFormat&lt;TPrinter, TState, TResidue, TResult&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/PrintfFormat`5.htm">PrintfFormat&lt;TPrinter, TState, TResidue, TResult, TTuple&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/PrintfModule.htm">PrintfModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/ProjectionParameterAttribute.htm">ProjectionParameterAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/ReferenceEqualityAttribute.htm">ReferenceEqualityAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/ReflectedDefinitionAttribute.htm">ReflectedDefinitionAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/RequireQualifiedAccessAttribute.htm">RequireQualifiedAccessAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/RequiresExplicitTypeArgumentsAttribute.htm">RequiresExplicitTypeArgumentsAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/SealedAttribute.htm">SealedAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/SourceConstructFlags.htm">SourceConstructFlags</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/StringModule.htm">StringModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/StructAttribute.htm">StructAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/StructuralComparisonAttribute.htm">StructuralComparisonAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/StructuralEqualityAttribute.htm">StructuralEqualityAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/StructuredFormatDisplayAttribute.htm">StructuredFormatDisplayAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/Tags.htm">Tags</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/Unchecked.htm">Unchecked</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/Unit.htm">Unit</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/UnverifiableAttribute.htm">UnverifiableAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/VolatileFieldAttribute.htm">VolatileFieldAttribute</a>
        </li>
		</ul>
	</div>
</div>
    <div class="header">
		<p class="class"><strong>Type</strong> Operators</p>
		<p><strong>Namespace</strong> Microsoft.FSharp.Core</p>
	</div>
    <div class="sub-header">
			<div id="summary">Basic F# Operators. This module is automatically opened in all F# code. 
			</div>
		
		
			<h3 class="section">Methods</h3>
			<ul>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Abs``1">Abs&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Acos``1">Acos&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Asin``1">Asin&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Atan``1">Atan&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Atan2``2">Atan2&lt;T1, T2&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Box``1">Box&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Ceiling``1">Ceiling&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Compare``1">Compare&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#ConsoleError``1">ConsoleError&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#ConsoleIn``1">ConsoleIn&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#ConsoleOut``1">ConsoleOut&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Cos``1">Cos&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Cosh``1">Cosh&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#CreateSequence``1">CreateSequence&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Decrement">Decrement</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#DefaultArg``1">DefaultArg&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Exit``1">Exit&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Exp``1">Exp&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Failure">Failure</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#FailurePattern">FailurePattern</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#FailWith``1">FailWith&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Floor``1">Floor&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Fst``2">Fst&lt;T1, T2&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Hash``1">Hash&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Identity``1">Identity&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Ignore``1">Ignore&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Increment">Increment</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#InvalidArg``1">InvalidArg&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#InvalidOp``1">InvalidOp&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#KeyValuePattern``2">KeyValuePattern&lt;TKey, TValue&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#limitedHash``1">limitedHash&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Lock``2">Lock&lt;TLock, T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Log``1">Log&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Log10``1">Log10&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Max``1">Max&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Min``1">Min&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Not">Not</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#NullArg``1">NullArg&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#PowInteger``1">PowInteger&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Raise``1">Raise&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Ref``1">Ref&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Reraise``1">Reraise&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Rethrow``1">Rethrow&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Round``1">Round&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Sign``1">Sign&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Sin``1">Sin&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Sinh``1">Sinh&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#SizeOf``1">SizeOf&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Snd``2">Snd&lt;T1, T2&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Sqrt``2">Sqrt&lt;T, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Tan``1">Tan&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Tanh``1">Tanh&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#ToChar``1">ToChar&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#ToDecimal``1">ToDecimal&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#ToEnum``1">ToEnum&lt;TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#ToInt``1">ToInt&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#ToInt16``1">ToInt16&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#ToInt32``1">ToInt32&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#ToInt64``1">ToInt64&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#ToIntPtr``1">ToIntPtr&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#ToString``1">ToString&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#ToUInt16``1">ToUInt16&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#ToUInt32``1">ToUInt32&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#ToUInt64``1">ToUInt64&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#ToUIntPtr``1">ToUIntPtr&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Truncate``1">Truncate&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#TypeDefOf``1">TypeDefOf&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#TypeOf``1">TypeOf&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Unbox``1">Unbox&lt;T&gt;</a></li>
			</ul>
		
			<h3 class="section">Properties</h3>
			<ul>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#Infinity">Infinity</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#InfinitySingle">InfinitySingle</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#NaN">NaN</a></li>
				<li><a href="../Microsoft.FSharp.Core/Operators.htm#NaNSingle">NaNSingle</a></li>
			</ul>
		
	</div>
	
	
	
	<h3 class="section">Public static methods</h3>
	
	<div id="Abs``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>Abs&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Absolute value of the given number. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The absolute value of the input. </p>
      </div>
      
    </div>
	</div>
	<div id="Acos``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>Acos&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Inverse cosine of the given number 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The inverse cosine of the input. </p>
      </div>
      
    </div>
	</div>
	<div id="Asin``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>Asin&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Inverse sine of the given number 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The inverse sine of the input. </p>
      </div>
      
    </div>
	</div>
	<div id="Atan``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>Atan&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Inverse tangent of the given number 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The inverse tangent of the input. </p>
      </div>
      
    </div>
	</div>
	<div id="Atan2``2" class="method">
		<h4><span title="Microsoft.FSharp.Core.T2">T2</span> <strong>Atan2&lt;T1, T2&gt;</strong>(<span title="Microsoft.FSharp.Core.T1">T1</span> y, <span title="Microsoft.FSharp.Core.T1">T1</span> x)</h4>
		<div class="content">Inverse tangent of  <code>x/y</code>  where  <code>x</code>  and  <code>y</code>  are specified separately 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T1">T1</span></code> y</h6>
          <p class="comments">The y input value. </p>
          <h6><code><span title="Microsoft.FSharp.Core.T1">T1</span></code> x</h6>
          <p class="comments">The x input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T2">T2</span></code></h6>
        <p>The inverse tangent of the input ratio. </p>
      </div>
      
    </div>
	</div>
	<div id="Box``1" class="method">
		<h4><span title="System.object">object</span> <strong>Box&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Boxes a strongly typed value. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The value to box. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.object">object</span></code></h6>
        <p>The boxed object. </p>
      </div>
      
    </div>
	</div>
	<div id="Ceiling``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>Ceiling&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Ceiling of the given number 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The ceiling of the input. </p>
      </div>
      
    </div>
	</div>
	<div id="Compare``1" class="method">
		<h4><span title="System.int">int</span> <strong>Compare&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> e1, <span title="Microsoft.FSharp.Core.T">T</span> e2)</h4>
		<div class="content">Generic comparison. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> e1</h6>
          <p class="comments">The first value. </p>
          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> e2</h6>
          <p class="comments">The second value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.int">int</span></code></h6>
        <p>The result of the comparison. </p>
      </div>
      
    </div>
	</div>
	<div id="ConsoleError``1" class="method">
		<h4><span title="System.IO.TextWriter">TextWriter</span> <strong>ConsoleError&lt;T&gt;</strong>()</h4>
		<div class="content">Reads the value of the property  <code>System.Console.Error</code>. 



      
    </div>
	</div>
	<div id="ConsoleIn``1" class="method">
		<h4><span title="System.IO.TextReader">TextReader</span> <strong>ConsoleIn&lt;T&gt;</strong>()</h4>
		<div class="content">Reads the value of the property  <code>System.Console.In</code>. 



      
    </div>
	</div>
	<div id="ConsoleOut``1" class="method">
		<h4><span title="System.IO.TextWriter">TextWriter</span> <strong>ConsoleOut&lt;T&gt;</strong>()</h4>
		<div class="content">Reads the value of the property  <code>System.Console.Out</code>. 



      
    </div>
	</div>
	<div id="Cos``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>Cos&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Cosine of the given number 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The cosine of the input. </p>
      </div>
      
    </div>
	</div>
	<div id="Cosh``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>Cosh&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Hyperbolic cosine  of the given number 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The hyperbolic cosine of the input. </p>
      </div>
      
    </div>
	</div>
	<div id="CreateSequence``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> <strong>CreateSequence&lt;T&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> sequence)</h4>
		<div class="content">Builds a sequence using sequence expression syntax 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> sequence</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code></h6>
        <p>The result sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="Decrement" class="method">
		<h4><span title="System.void">void</span> <strong>Decrement</strong>(<a href="../Microsoft.FSharp.Core/FSharpRef`1.htm">FSharpRef&lt;T&gt;</a> cell)</h4>
		<div class="content">Decrement a mutable reference cell containing an integer 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpRef`1.htm">FSharpRef&lt;T&gt;</a></code> cell</h6>
          <p class="comments">The reference cell. </p>
      </div>

      
    </div>
	</div>
	<div id="DefaultArg``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>DefaultArg&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> arg, <span title="Microsoft.FSharp.Core.T">T</span> defaultValue)</h4>
		<div class="content">Used to specify a default value for an optional argument in the implementation of a function 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code> arg</h6>
          <p class="comments">An option representing the argument. </p>
          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> defaultValue</h6>
          <p class="comments">The default value of the argument. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The argument value. If it is None, the defaultValue is returned. </p>
      </div>
      
    </div>
	</div>
	<div id="Exit``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>Exit&lt;T&gt;</strong>(<span title="System.int">int</span> exitcode)</h4>
		<div class="content">Exit the current hardware isolated process, if security settings permit,
otherwise raise an exception. Calls  <code>System.Environment.Exit</code>. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.int">int</span></code> exitcode</h6>
          <p class="comments">The exit code to use. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The result value. </p>
      </div>
      
    </div>
	</div>
	<div id="Exp``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>Exp&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Exponential of the given number 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The exponential of the input. </p>
      </div>
      
    </div>
	</div>
	<div id="Failure" class="method">
		<h4><span title="System.Exception">Exception</span> <strong>Failure</strong>(<span title="System.string">string</span> message)</h4>
		<div class="content">Builds a  <code>System.Exception</code>  object. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.string">string</span></code> message</h6>
          <p class="comments">The message for the Exception. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Exception">Exception</span></code></h6>
        <p>A System.Exception. </p>
      </div>
      
    </div>
	</div>
	<div id="FailurePattern" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>FailurePattern</strong>(<span title="System.Exception">Exception</span> error)</h4>
		<div class="content">Matches  <code>System.Exception</code>  objects whose runtime type is precisely  <code>System.Exception</code> 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Exception">Exception</span></code> error</h6>
          <p class="comments">The input exception. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>A string option. </p>
      </div>
      
    </div>
	</div>
	<div id="FailWith``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>FailWith&lt;T&gt;</strong>(<span title="System.string">string</span> message)</h4>
		<div class="content">Throw a  <code>System.Exception</code>  exception. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.string">string</span></code> message</h6>
          <p class="comments">The exception message. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The result value. </p>
      </div>
      
    </div>
	</div>
	<div id="Floor``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>Floor&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Floor of the given number 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The floor of the input. </p>
      </div>
      
    </div>
	</div>
	<div id="Fst``2" class="method">
		<h4><span title="Microsoft.FSharp.Core.T1">T1</span> <strong>Fst&lt;T1, T2&gt;</strong>(<span title="System.Tuple<T1, T2>">Tuple&lt;T1, T2&gt;</span> tuple)</h4>
		<div class="content">Return the first element of a tuple,  <code>fst (a,b) = a</code>. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Tuple<T1, T2>">Tuple&lt;T1, T2&gt;</span></code> tuple</h6>
          <p class="comments">The input tuple. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T1">T1</span></code></h6>
        <p>The first value. </p>
      </div>
      
    </div>
	</div>
	<div id="Hash``1" class="method">
		<h4><span title="System.int">int</span> <strong>Hash&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> obj)</h4>
		<div class="content">A generic hash function, designed to return equal hash values for items that are
equal according to the "=" operator. By default it will use structural hashing
for F# union, record and tuple types, hashing the complete contents of the
type. The exact behaviour of the function can be adjusted on a
type-by-type basis by implementing GetHashCode for each type. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> obj</h6>
          <p class="comments">The input object. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.int">int</span></code></h6>
        <p>The computed hash. </p>
      </div>
      
    </div>
	</div>
	<div id="Identity``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>Identity&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> x)</h4>
		<div class="content">The identity function 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> x</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The same value. </p>
      </div>
      
    </div>
	</div>
	<div id="Ignore``1" class="method">
		<h4><span title="System.void">void</span> <strong>Ignore&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Ignore the passed value. This is often used to throw away results of a computation. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The value to ignore. </p>
      </div>

      
    </div>
	</div>
	<div id="Increment" class="method">
		<h4><span title="System.void">void</span> <strong>Increment</strong>(<a href="../Microsoft.FSharp.Core/FSharpRef`1.htm">FSharpRef&lt;T&gt;</a> cell)</h4>
		<div class="content">Increment a mutable reference cell containing an integer 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpRef`1.htm">FSharpRef&lt;T&gt;</a></code> cell</h6>
          <p class="comments">The reference cell. </p>
      </div>

      
    </div>
	</div>
	<div id="InvalidArg``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>InvalidArg&lt;T&gt;</strong>(<span title="System.string">string</span> argumentName, <span title="System.string">string</span> message)</h4>
		<div class="content">Throw a  <code>System.ArgumentException</code>  exception with
the given argument name and message. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.string">string</span></code> argumentName</h6>
          <p class="comments">The argument name. </p>
          <h6><code><span title="System.string">string</span></code> message</h6>
          <p class="comments">The exception message. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The result value. </p>
      </div>
      
    </div>
	</div>
	<div id="InvalidOp``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>InvalidOp&lt;T&gt;</strong>(<span title="System.string">string</span> message)</h4>
		<div class="content">Throw a  <code>System.InvalidOperationException</code>  exception 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.string">string</span></code> message</h6>
          <p class="comments">The exception message. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The result value. </p>
      </div>
      
    </div>
	</div>
	<div id="KeyValuePattern``2" class="method">
		<h4><span title="System.Tuple<TKey, TValue>">Tuple&lt;TKey, TValue&gt;</span> <strong>KeyValuePattern&lt;TKey, TValue&gt;</strong>(<span title="System.Collections.Generic.KeyValuePair<TKey, TValue>">KeyValuePair&lt;TKey, TValue&gt;</span> keyValuePair)</h4>
		<div class="content">An active pattern to match values of type  <code>System.Collections.Generic.KeyValuePair</code> 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.KeyValuePair<TKey, TValue>">KeyValuePair&lt;TKey, TValue&gt;</span></code> keyValuePair</h6>
          <p class="comments">The input key/value pair. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Tuple<TKey, TValue>">Tuple&lt;TKey, TValue&gt;</span></code></h6>
        <p>A tuple containing the key and value. </p>
      </div>
      
    </div>
	</div>
	<div id="limitedHash``1" class="method">
		<h4><span title="System.int">int</span> <strong>limitedHash&lt;T&gt;</strong>(<span title="System.int">int</span> limit, <span title="Microsoft.FSharp.Core.T">T</span> obj)</h4>
		<div class="content">A generic hash function. This function has the same behaviour as 'hash',
however the default structural hashing for F# union, record and tuple
types stops when the given limit of nodes is reached. The exact behaviour of
the function can be adjusted on a type-by-type basis by implementing
GetHashCode for each type. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.int">int</span></code> limit</h6>
          <p class="comments">The limit of nodes. </p>
          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> obj</h6>
          <p class="comments">The input object. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.int">int</span></code></h6>
        <p>The computed hash. </p>
      </div>
      
    </div>
	</div>
	<div id="Lock``2" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>Lock&lt;TLock, T&gt;</strong>(<span title="Microsoft.FSharp.Core.TLock">TLock</span> lockObject, <a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> action)</h4>
		<div class="content">Execute the function as a mutual-exclusion region using the input value as a lock. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.TLock">TLock</span></code> lockObject</h6>
          <p class="comments">The object to be locked. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> action</h6>
          <p class="comments">The action to perform during the lock. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The resulting value. </p>
      </div>
      
    </div>
	</div>
	<div id="Log``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>Log&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Natural logarithm of the given number 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The natural logarithm of the input. </p>
      </div>
      
    </div>
	</div>
	<div id="Log10``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>Log10&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Logarithm to base 10 of the given number 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The logarithm to base 10 of the input. </p>
      </div>
      
    </div>
	</div>
	<div id="Max``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>Max&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> e1, <span title="Microsoft.FSharp.Core.T">T</span> e2)</h4>
		<div class="content">Maximum based on generic comparison 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> e1</h6>
          <p class="comments">The first value. </p>
          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> e2</h6>
          <p class="comments">The second value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The maximum value. </p>
      </div>
      
    </div>
	</div>
	<div id="Min``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>Min&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> e1, <span title="Microsoft.FSharp.Core.T">T</span> e2)</h4>
		<div class="content">Minimum based on generic comparison 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> e1</h6>
          <p class="comments">The first value. </p>
          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> e2</h6>
          <p class="comments">The second value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The minimum value. </p>
      </div>
      
    </div>
	</div>
	<div id="Not" class="method">
		<h4><span title="System.bool">bool</span> <strong>Not</strong>(<span title="System.bool">bool</span> value)</h4>
		<div class="content">Negate a logical value.  <code>not true</code>  equals  <code>false</code>  and  <code>not false</code>  equals  <code>true</code> 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.bool">bool</span></code> value</h6>
          <p class="comments">The value to negate. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p>The result of the negation. </p>
      </div>
      
    </div>
	</div>
	<div id="NullArg``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>NullArg&lt;T&gt;</strong>(<span title="System.string">string</span> argumentName)</h4>
		<div class="content">Throw a  <code>System.ArgumentNullException</code>  exception 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.string">string</span></code> argumentName</h6>
          <p class="comments">The argument name. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The result value. </p>
      </div>
      
    </div>
	</div>
	<div id="PowInteger``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>PowInteger&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> x, <span title="System.int">int</span> n)</h4>
		<div class="content">Overloaded power operator. If  <code>n > 0</code>  then equivalent to  <code>x*...*x</code>  for  <code>n</code>  occurrences of  <code>x</code>. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> x</h6>
          <p class="comments">The input base. </p>
          <h6><code><span title="System.int">int</span></code> n</h6>
          <p class="comments">The input exponent. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The base raised to the exponent. </p>
      </div>
      
    </div>
	</div>
	<div id="Raise``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>Raise&lt;T&gt;</strong>(<span title="System.Exception">Exception</span> exn)</h4>
		<div class="content">Raises an exception 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Exception">Exception</span></code> exn</h6>
          <p class="comments">The exception to raise. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The result value. </p>
      </div>
      
    </div>
	</div>
	<div id="Ref``1" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpRef`1.htm">FSharpRef&lt;T&gt;</a> <strong>Ref&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Create a mutable reference cell 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The value to contain in the cell. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpRef`1.htm">FSharpRef&lt;T&gt;</a></code></h6>
        <p>The created reference cell. </p>
      </div>
      
    </div>
	</div>
	<div id="Reraise``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>Reraise&lt;T&gt;</strong>()</h4>
		<div class="content">Rethrows an exception. This should only be used when handling an exception 



      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The result value. </p>
      </div>
      
    </div>
	</div>
	<div id="Rethrow``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>Rethrow&lt;T&gt;</strong>()</h4>
		<div class="content">Rethrows an exception. This should only be used when handling an exception 



      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The result value. </p>
      </div>
      
    </div>
	</div>
	<div id="Round``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>Round&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Round the given number 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The nearest integer to the input value. </p>
      </div>
      
    </div>
	</div>
	<div id="Sign``1" class="method">
		<h4><span title="System.int">int</span> <strong>Sign&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Sign of the given number 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.int">int</span></code></h6>
        <p>-1, 0, or 1 depending on the sign of the input. </p>
      </div>
      
    </div>
	</div>
	<div id="Sin``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>Sin&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Sine of the given number 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The sine of the input. </p>
      </div>
      
    </div>
	</div>
	<div id="Sinh``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>Sinh&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Hyperbolic sine of the given number 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The hyperbolic sine of the input. </p>
      </div>
      
    </div>
	</div>
	<div id="SizeOf``1" class="method">
		<h4><span title="System.int">int</span> <strong>SizeOf&lt;T&gt;</strong>()</h4>
		<div class="content">Returns the internal size of a type in bytes. For example,  <code>sizeof<int></code>  returns 4. 



      
    </div>
	</div>
	<div id="Snd``2" class="method">
		<h4><span title="Microsoft.FSharp.Core.T2">T2</span> <strong>Snd&lt;T1, T2&gt;</strong>(<span title="System.Tuple<T1, T2>">Tuple&lt;T1, T2&gt;</span> tuple)</h4>
		<div class="content">Return the second element of a tuple,  <code>snd (a,b) = b</code>. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Tuple<T1, T2>">Tuple&lt;T1, T2&gt;</span></code> tuple</h6>
          <p class="comments">The input tuple. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T2">T2</span></code></h6>
        <p>The second value. </p>
      </div>
      
    </div>
	</div>
	<div id="Sqrt``2" class="method">
		<h4><span title="Microsoft.FSharp.Core.TResult">TResult</span> <strong>Sqrt&lt;T, TResult&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Square root of the given number 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.TResult">TResult</span></code></h6>
        <p>The square root of the input. </p>
      </div>
      
    </div>
	</div>
	<div id="Tan``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>Tan&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Tangent of the given number 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The tangent of the input. </p>
      </div>
      
    </div>
	</div>
	<div id="Tanh``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>Tanh&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Hyperbolic tangent of the given number 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The hyperbolic tangent of the input. </p>
      </div>
      
    </div>
	</div>
	<div id="ToChar``1" class="method">
		<h4><span title="System.Char">Char</span> <strong>ToChar&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Converts the argument to character. Numeric inputs are converted according to the UTF-16
encoding for characters. String inputs must be exactly one character long. For other
input types the operation requires an appropriate static conversion method on the input type. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Char">Char</span></code></h6>
        <p>The converted char. </p>
      </div>
      
    </div>
	</div>
	<div id="ToDecimal``1" class="method">
		<h4><span title="System.decimal">decimal</span> <strong>ToDecimal&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Converts the argument to System.Decimal using a direct conversion for all
primitive numeric types. For strings, the input is converted using  <code>UInt64.Parse()</code> with InvariantCulture settings. Otherwise the operation requires an appropriate
static conversion method on the input type. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.decimal">decimal</span></code></h6>
        <p>The converted decimal. </p>
      </div>
      
    </div>
	</div>
	<div id="ToEnum``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.TResult">TResult</span> <strong>ToEnum&lt;TResult&gt;</strong>(<span title="System.int">int</span> value)</h4>
		<div class="content">Converts the argument to a particular enum type. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.int">int</span></code> value</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.TResult">TResult</span></code></h6>
        <p>The converted enum type. </p>
      </div>
      
    </div>
	</div>
	<div id="ToInt``1" class="method">
		<h4><span title="System.int">int</span> <strong>ToInt&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Converts the argument to signed 32-bit integer. This is a direct conversion for all
primitive numeric types. For strings, the input is converted using  <code>Int32.Parse()</code> with InvariantCulture settings. Otherwise the operation requires an appropriate
static conversion method on the input type. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.int">int</span></code></h6>
        <p>The converted int </p>
      </div>
      
    </div>
	</div>
	<div id="ToInt16``1" class="method">
		<h4><span title="System.short">short</span> <strong>ToInt16&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Converts the argument to signed 16-bit integer. This is a direct conversion for all
primitive numeric types. For strings, the input is converted using  <code>Int16.Parse()</code> with InvariantCulture settings. Otherwise the operation requires an appropriate
static conversion method on the input type. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.short">short</span></code></h6>
        <p>The converted int16 </p>
      </div>
      
    </div>
	</div>
	<div id="ToInt32``1" class="method">
		<h4><span title="System.int">int</span> <strong>ToInt32&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Converts the argument to signed 32-bit integer. This is a direct conversion for all
primitive numeric types. For strings, the input is converted using  <code>Int32.Parse()</code> with InvariantCulture settings. Otherwise the operation requires an appropriate
static conversion method on the input type. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.int">int</span></code></h6>
        <p>The converted int32 </p>
      </div>
      
    </div>
	</div>
	<div id="ToInt64``1" class="method">
		<h4><span title="System.long">long</span> <strong>ToInt64&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Converts the argument to signed 64-bit integer. This is a direct conversion for all
primitive numeric types. For strings, the input is converted using  <code>Int64.Parse()</code> with InvariantCulture settings. Otherwise the operation requires an appropriate
static conversion method on the input type. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.long">long</span></code></h6>
        <p>The converted int64 </p>
      </div>
      
    </div>
	</div>
	<div id="ToIntPtr``1" class="method">
		<h4><span title="System.IntPtr">IntPtr</span> <strong>ToIntPtr&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Converts the argument to signed native integer. This is a direct conversion for all
primitive numeric types. Otherwise the operation requires an appropriate
static conversion method on the input type. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.IntPtr">IntPtr</span></code></h6>
        <p>The converted nativeint </p>
      </div>
      
    </div>
	</div>
	<div id="ToString``1" class="method">
		<h4><span title="System.string">string</span> <strong>ToString&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Converts the argument to a string using  <code>ToString</code>. <blockquote class="remarks">
  For standard integer and floating point values the  <code>ToString</code>  conversion
uses  <code>CultureInfo.InvariantCulture</code>. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.string">string</span></code></h6>
        <p>The converted string. </p>
      </div>
      
    </div>
	</div>
	<div id="ToUInt16``1" class="method">
		<h4><span title="System.ushort">ushort</span> <strong>ToUInt16&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Converts the argument to unsigned 16-bit integer. This is a direct conversion for all
primitive numeric types. For strings, the input is converted using  <code>UInt16.Parse()</code> with InvariantCulture settings. Otherwise the operation requires an appropriate
static conversion method on the input type. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.ushort">ushort</span></code></h6>
        <p>The converted uint16 </p>
      </div>
      
    </div>
	</div>
	<div id="ToUInt32``1" class="method">
		<h4><span title="System.uint">uint</span> <strong>ToUInt32&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Converts the argument to unsigned 32-bit integer. This is a direct conversion for all
primitive numeric types. For strings, the input is converted using  <code>UInt32.Parse()</code> with InvariantCulture settings. Otherwise the operation requires an appropriate
static conversion method on the input type. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.uint">uint</span></code></h6>
        <p>The converted uint32 </p>
      </div>
      
    </div>
	</div>
	<div id="ToUInt64``1" class="method">
		<h4><span title="System.ulong">ulong</span> <strong>ToUInt64&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Converts the argument to unsigned 64-bit integer. This is a direct conversion for all
primitive numeric types. For strings, the input is converted using  <code>UInt64.Parse()</code> with InvariantCulture settings. Otherwise the operation requires an appropriate
static conversion method on the input type. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.ulong">ulong</span></code></h6>
        <p>The converted uint64 </p>
      </div>
      
    </div>
	</div>
	<div id="ToUIntPtr``1" class="method">
		<h4><span title="System.UIntPtr">UIntPtr</span> <strong>ToUIntPtr&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Converts the argument to unsigned native integer using a direct conversion for all
primitive numeric types. Otherwise the operation requires an appropriate
static conversion method on the input type. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.UIntPtr">UIntPtr</span></code></h6>
        <p>The converted unativeint </p>
      </div>
      
    </div>
	</div>
	<div id="Truncate``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>Truncate&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Overloaded truncate operator. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The truncated value. </p>
      </div>
      
    </div>
	</div>
	<div id="TypeDefOf``1" class="method">
		<h4><span title="System.Type">Type</span> <strong>TypeDefOf&lt;T&gt;</strong>()</h4>
		<div class="content">Generate a System.Type representation for a type definition. If the
input type is a generic type instantiation then return the
generic type definition associated with all such instantiations. 



      
    </div>
	</div>
	<div id="TypeOf``1" class="method">
		<h4><span title="System.Type">Type</span> <strong>TypeOf&lt;T&gt;</strong>()</h4>
		<div class="content">Generate a System.Type runtime representation of a static type.
The static type is still maintained on the value returned. 



      
    </div>
	</div>
	<div id="Unbox``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>Unbox&lt;T&gt;</strong>(<span title="System.object">object</span> value)</h4>
		<div class="content">Unboxes a strongly typed value. This is the inverse of  <code>box</code> , unbox<t>(box<t> a) equals a. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.object">object</span></code> value</h6>
          <p class="comments">The boxed value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The unboxed result. </p>
      </div>
      
    </div>
	</div>
	
  <h3 class="section">Public properties</h3>

  <div id="Infinity" class="method">
    <h4><span title="System.double">double</span> <strong>Infinity</strong> get; </h4>
    <div class="content">Equivalent to  <code>System.Double.PositiveInfinity</code> 
      
    </div>
  </div>
  <div id="InfinitySingle" class="method">
    <h4><span title="System.float">float</span> <strong>InfinitySingle</strong> get; </h4>
    <div class="content">Equivalent to  <code>System.Single.PositiveInfinity</code> 
      
    </div>
  </div>
  <div id="NaN" class="method">
    <h4><span title="System.double">double</span> <strong>NaN</strong> get; </h4>
    <div class="content">Equivalent to  <code>System.Double.NaN</code> 
      
    </div>
  </div>
  <div id="NaNSingle" class="method">
    <h4><span title="System.float">float</span> <strong>NaNSingle</strong> get; </h4>
    <div class="content">Equivalent to  <code>System.Single.NaN</code> 
      
    </div>
  </div>
	<div id="footer">
  <p>Based on v4.3.0.0 of FSharp.Core.dll (Microsoft&#174; Visual Studio&#174; 2012)</p>
  <p>Generated by <a href="http://docu.jagregory.com">docu</a></p>
</div>
  </body>
</html>