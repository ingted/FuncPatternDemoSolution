<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <title>LanguagePrimitives - Microsoft&#174; Visual Studio&#174; 2012 Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body><div id="namespaces">
	<h2 class="fixed">Namespaces</h2>
	<div class="scroll">
		<ul>
			<li>
          <a href="../FSharp.Control/index.htm">FSharp.Control</a>
      </li>
			<li>
          <a href="../FSharp.IO/index.htm">FSharp.IO</a>
      </li>
			<li>
          <a href="../FSharp.Net/index.htm">FSharp.Net</a>
      </li>
			<li>
          <a href="../FSharpx/index.htm">FSharpx</a>
      </li>
			<li>
          <a href="../FSharpx.Core/index.htm">FSharpx.Core</a>
      </li>
			<li>
          <a href="../FSharpx.DataStructures/index.htm">FSharpx.DataStructures</a>
      </li>
			<li>
          <a href="../FSharpx.Http/index.htm">FSharpx.Http</a>
      </li>
			<li>
          <a href="../FSharpx.Observable/index.htm">FSharpx.Observable</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders/index.htm">FSharpx.TypeProviders</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.AppSettings/index.htm">FSharpx.TypeProviders.AppSettings</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Documents/index.htm">FSharpx.TypeProviders.Documents</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Excel/index.htm">FSharpx.TypeProviders.Excel</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase/index.htm">FSharpx.TypeProviders.Freebase</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.DesignTime/index.htm">FSharpx.TypeProviders.Freebase.DesignTime</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.FreebaseRuntime/index.htm">FSharpx.TypeProviders.Freebase.FreebaseRuntime</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.FreebaseTypeExtender/index.htm">FSharpx.TypeProviders.Freebase.FreebaseTypeExtender</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Graph/index.htm">FSharpx.TypeProviders.Graph</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Machine/index.htm">FSharpx.TypeProviders.Machine</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Math/index.htm">FSharpx.TypeProviders.Math</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Regex/index.htm">FSharpx.TypeProviders.Regex</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Xaml/index.htm">FSharpx.TypeProviders.Xaml</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections/index.htm">Microsoft.FSharp.Collections</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections.Tagged/index.htm">Microsoft.FSharp.Collections.Tagged</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Control/index.htm">Microsoft.FSharp.Control</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Core/index.htm" class="current">Microsoft.FSharp.Core</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Core.CompilerServices/index.htm">Microsoft.FSharp.Core.CompilerServices</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Data.TypeProviders.DesignTime/index.htm">Microsoft.FSharp.Data.TypeProviders.DesignTime</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Data.UnitSystems.SI.UnitNames/index.htm">Microsoft.FSharp.Data.UnitSystems.SI.UnitNames</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq/index.htm">Microsoft.FSharp.Linq</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq.QueryRunExtensions/index.htm">Microsoft.FSharp.Linq.QueryRunExtensions</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq.RuntimeHelpers/index.htm">Microsoft.FSharp.Linq.RuntimeHelpers</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Math/index.htm">Microsoft.FSharp.Math</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Metadata/index.htm">Microsoft.FSharp.Metadata</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.NativeInterop/index.htm">Microsoft.FSharp.NativeInterop</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Quotations/index.htm">Microsoft.FSharp.Quotations</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Reflection/index.htm">Microsoft.FSharp.Reflection</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text/index.htm">Microsoft.FSharp.Text</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.Lexing/index.htm">Microsoft.FSharp.Text.Lexing</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.Parsing/index.htm">Microsoft.FSharp.Text.Parsing</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.StructuredFormat/index.htm">Microsoft.FSharp.Text.StructuredFormat</a>
      </li>
			<li>
          <a href="../Samples.FSharp.ProvidedTypes/index.htm">Samples.FSharp.ProvidedTypes</a>
      </li>
			<li>
          <a href="../Utilities.Caching/index.htm">Utilities.Caching</a>
      </li>
		</ul>
	</div>
</div><div id="types">
  <h2 class="fixed">Types in Microsoft.FSharp.Core</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../Microsoft.FSharp.Core/AbstractClassAttribute.htm">AbstractClassAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/AllowNullLiteralAttribute.htm">AllowNullLiteralAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/AutoOpenAttribute.htm">AutoOpenAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/AutoSerializableAttribute.htm">AutoSerializableAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/Checked.htm">Checked</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/ClassAttribute.htm">ClassAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/CLIEventAttribute.htm">CLIEventAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/CLIMutableAttribute.htm">CLIMutableAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/ComparisonConditionalOnAttribute.htm">ComparisonConditionalOnAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/CompilationArgumentCountsAttribute.htm">CompilationArgumentCountsAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/CompilationMappingAttribute.htm">CompilationMappingAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/CompilationRepresentationAttribute.htm">CompilationRepresentationAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/CompilationRepresentationFlags.htm">CompilationRepresentationFlags</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/CompilationSourceNameAttribute.htm">CompilationSourceNameAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/CompiledNameAttribute.htm">CompiledNameAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/CompilerMessageAttribute.htm">CompilerMessageAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/CustomComparisonAttribute.htm">CustomComparisonAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/CustomEqualityAttribute.htm">CustomEqualityAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/CustomOperationAttribute.htm">CustomOperationAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/DefaultAugmentationAttribute.htm">DefaultAugmentationAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/DefaultValueAttribute.htm">DefaultValueAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/EntryPointAttribute.htm">EntryPointAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/EqualityConditionalOnAttribute.htm">EqualityConditionalOnAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/ErrorStrings.htm">ErrorStrings</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/ExperimentalAttribute.htm">ExperimentalAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/ExtraTopLevelOperators.htm">ExtraTopLevelOperators</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FSharpChoice`2.htm">FSharpChoice&lt;T1, T2&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FSharpChoice`3.htm">FSharpChoice&lt;T1, T2, T3&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FSharpChoice`4.htm">FSharpChoice&lt;T1, T2, T3, T4&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FSharpChoice`5.htm">FSharpChoice&lt;T1, T2, T3, T4, T5&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FSharpChoice`6.htm">FSharpChoice&lt;T1, T2, T3, T4, T5, T6&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FSharpChoice`7.htm">FSharpChoice&lt;T1, T2, T3, T4, T5, T6, T7&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FSharpFunc`3.htm">FSharpFunc`3</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FSharpFunc`4.htm">FSharpFunc`4</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FSharpFunc`5.htm">FSharpFunc`5</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FSharpFunc`6.htm">FSharpFunc`6</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FSharpInterfaceDataVersionAttribute.htm">FSharpInterfaceDataVersionAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FSharpRef`1.htm">FSharpRef&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FSharpTypeFunc.htm">FSharpTypeFunc</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FuncConvert.htm">FuncConvert</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/FuncConvertExtensions.htm">FuncConvertExtensions</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/GeneralizableValueAttribute.htm">GeneralizableValueAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/HashCompare.htm">HashCompare</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/InterfaceAttribute.htm">InterfaceAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/IntrinsicFunctions.htm">IntrinsicFunctions</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/IntrinsicOperators.htm">IntrinsicOperators</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm" class="current">LanguagePrimitives</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/LazyModule.htm">LazyModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/LiteralAttribute.htm">LiteralAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/MatchFailureException.htm">MatchFailureException</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/MeasureAnnotatedAbbreviationAttribute.htm">MeasureAnnotatedAbbreviationAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/MeasureAttribute.htm">MeasureAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/NoComparisonAttribute.htm">NoComparisonAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/NoDynamicInvocationAttribute.htm">NoDynamicInvocationAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/NoEqualityAttribute.htm">NoEqualityAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/NumericLiteralI.htm">NumericLiteralI</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/NumericLiterals.htm">NumericLiterals</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/OperatorIntrinsics.htm">OperatorIntrinsics</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/Operators.htm">Operators</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/OptimizedClosures.htm">OptimizedClosures</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/OptionalArgumentAttribute.htm">OptionalArgumentAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/OptionModule.htm">OptionModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/PrintfFormat`4.htm">PrintfFormat&lt;TPrinter, TState, TResidue, TResult&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/PrintfFormat`5.htm">PrintfFormat&lt;TPrinter, TState, TResidue, TResult, TTuple&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/PrintfModule.htm">PrintfModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/ProjectionParameterAttribute.htm">ProjectionParameterAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/ReferenceEqualityAttribute.htm">ReferenceEqualityAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/ReflectedDefinitionAttribute.htm">ReflectedDefinitionAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/RequireQualifiedAccessAttribute.htm">RequireQualifiedAccessAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/RequiresExplicitTypeArgumentsAttribute.htm">RequiresExplicitTypeArgumentsAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/SealedAttribute.htm">SealedAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/SourceConstructFlags.htm">SourceConstructFlags</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/StringModule.htm">StringModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/StructAttribute.htm">StructAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/StructuralComparisonAttribute.htm">StructuralComparisonAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/StructuralEqualityAttribute.htm">StructuralEqualityAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/StructuredFormatDisplayAttribute.htm">StructuredFormatDisplayAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/Tags.htm">Tags</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/Unchecked.htm">Unchecked</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/Unit.htm">Unit</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/UnverifiableAttribute.htm">UnverifiableAttribute</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Core/VolatileFieldAttribute.htm">VolatileFieldAttribute</a>
        </li>
		</ul>
	</div>
</div>
    <div class="header">
		<p class="class"><strong>Type</strong> LanguagePrimitives</p>
		<p><strong>Namespace</strong> Microsoft.FSharp.Core</p>
	</div>
    <div class="sub-header">
			<div id="summary">Language primitives associated with the F# language 
			</div>
		
		
			<h3 class="section">Methods</h3>
			<ul>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#AdditionDynamic``3">AdditionDynamic&lt;T1, T2, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#CheckedAdditionDynamic``3">CheckedAdditionDynamic&lt;T1, T2, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#CheckedMultiplyDynamic``3">CheckedMultiplyDynamic&lt;T1, T2, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#DecimalWithMeasure">DecimalWithMeasure</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#DivideByInt``1">DivideByInt&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#DivideByIntDynamic``1">DivideByIntDynamic&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#EnumOfValue``2">EnumOfValue&lt;T, TEnum&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#EnumToValue``2">EnumToValue&lt;TEnum, T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#FastGenericComparer``1">FastGenericComparer&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#FastGenericEqualityComparer``1">FastGenericEqualityComparer&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#FastLimitedGenericEqualityComparer``1">FastLimitedGenericEqualityComparer&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#Float32WithMeasure">Float32WithMeasure</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#FloatWithMeasure">FloatWithMeasure</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#GenericComparison``1">GenericComparison&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#GenericComparisonWithComparer``1">GenericComparisonWithComparer&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#GenericEquality``1">GenericEquality&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#GenericEqualityER``1">GenericEqualityER&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#GenericEqualityWithComparer``1">GenericEqualityWithComparer&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#GenericGreaterOrEqual``1">GenericGreaterOrEqual&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#GenericGreaterThan``1">GenericGreaterThan&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#GenericHash``1">GenericHash&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#GenericHashWithComparer``1">GenericHashWithComparer&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#GenericLessOrEqual``1">GenericLessOrEqual&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#GenericLessThan``1">GenericLessThan&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#GenericLimitedHash``1">GenericLimitedHash&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#GenericMaximum``1">GenericMaximum&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#GenericMinimum``1">GenericMinimum&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#GenericOne``1">GenericOne&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#GenericOneDynamic``1">GenericOneDynamic&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#GenericZero``1">GenericZero&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#GenericZeroDynamic``1">GenericZeroDynamic&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#Int16WithMeasure">Int16WithMeasure</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#Int32WithMeasure">Int32WithMeasure</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#Int64WithMeasure">Int64WithMeasure</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#MultiplyDynamic``3">MultiplyDynamic&lt;T1, T2, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#ParseInt32">ParseInt32</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#ParseInt64">ParseInt64</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#ParseUInt32">ParseUInt32</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#ParseUInt64">ParseUInt64</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#PhysicalEquality``1">PhysicalEquality&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#PhysicalHash``1">PhysicalHash&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#SByteWithMeasure">SByteWithMeasure</a></li>
			</ul>
		
			<h3 class="section">Properties</h3>
			<ul>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#GenericComparer">GenericComparer</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#GenericEqualityComparer">GenericEqualityComparer</a></li>
				<li><a href="../Microsoft.FSharp.Core/LanguagePrimitives.htm#GenericEqualityERComparer">GenericEqualityERComparer</a></li>
			</ul>
		
	</div>
	
	
	
	<h3 class="section">Public static methods</h3>
	
	<div id="AdditionDynamic``3" class="method">
		<h4><span title="Microsoft.FSharp.Core.TResult">TResult</span> <strong>AdditionDynamic&lt;T1, T2, TResult&gt;</strong>(<span title="Microsoft.FSharp.Core.T1">T1</span> x, <span title="Microsoft.FSharp.Core.T2">T2</span> y)</h4>
		<div class="content">A compiler intrinsic that implements dynamic invocations to the '+' operator. 



      
    </div>
	</div>
	<div id="CheckedAdditionDynamic``3" class="method">
		<h4><span title="Microsoft.FSharp.Core.TResult">TResult</span> <strong>CheckedAdditionDynamic&lt;T1, T2, TResult&gt;</strong>(<span title="Microsoft.FSharp.Core.T1">T1</span> x, <span title="Microsoft.FSharp.Core.T2">T2</span> y)</h4>
		<div class="content">A compiler intrinsic that implements dynamic invocations to the checked '+' operator. 



      
    </div>
	</div>
	<div id="CheckedMultiplyDynamic``3" class="method">
		<h4><span title="Microsoft.FSharp.Core.TResult">TResult</span> <strong>CheckedMultiplyDynamic&lt;T1, T2, TResult&gt;</strong>(<span title="Microsoft.FSharp.Core.T1">T1</span> x, <span title="Microsoft.FSharp.Core.T2">T2</span> y)</h4>
		<div class="content">A compiler intrinsic that implements dynamic invocations to the checked '*' operator. 



      
    </div>
	</div>
	<div id="DecimalWithMeasure" class="method">
		<h4><span title="System.decimal">decimal</span> <strong>DecimalWithMeasure</strong>(<span title="System.decimal">decimal</span> f)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="DivideByInt``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>DivideByInt&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> x, <span title="System.int">int</span> y)</h4>
		<div class="content">Divides a value by an integer. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> x</h6>
          <p class="comments">The input value. </p>
          <h6><code><span title="System.int">int</span></code> y</h6>
          <p class="comments">The input int. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The division result. </p>
      </div>
      
    </div>
	</div>
	<div id="DivideByIntDynamic``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>DivideByIntDynamic&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> x, <span title="System.int">int</span> y)</h4>
		<div class="content">A compiler intrinsic that implements dynamic invocations for the DivideByInt primitive. 



      
    </div>
	</div>
	<div id="EnumOfValue``2" class="method">
		<h4><span title="Microsoft.FSharp.Core.TEnum">TEnum</span> <strong>EnumOfValue&lt;T, TEnum&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> value)</h4>
		<div class="content">Build an enum value from an underlying value 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> value</h6>
          <p class="comments">The input value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.TEnum">TEnum</span></code></h6>
        <p>The value as an enumeration. </p>
      </div>
      
    </div>
	</div>
	<div id="EnumToValue``2" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>EnumToValue&lt;TEnum, T&gt;</strong>(<span title="Microsoft.FSharp.Core.TEnum">TEnum</span> enum)</h4>
		<div class="content">Get the underlying value for an enum value 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.TEnum">TEnum</span></code> enum</h6>
          <p class="comments">The input enum. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The enumeration as a value. </p>
      </div>
      
    </div>
	</div>
	<div id="FastGenericComparer``1" class="method">
		<h4><span title="System.Collections.Generic.IComparer<T>">IComparer&lt;T&gt;</span> <strong>FastGenericComparer&lt;T&gt;</strong>()</h4>
		<div class="content">Make an F# comparer object for the given type 



      
    </div>
	</div>
	<div id="FastGenericEqualityComparer``1" class="method">
		<h4><span title="System.Collections.Generic.IEqualityComparer<T>">IEqualityComparer&lt;T&gt;</span> <strong>FastGenericEqualityComparer&lt;T&gt;</strong>()</h4>
		<div class="content">Make an F# hash/equality object for the given type 



      
    </div>
	</div>
	<div id="FastLimitedGenericEqualityComparer``1" class="method">
		<h4><span title="System.Collections.Generic.IEqualityComparer<T>">IEqualityComparer&lt;T&gt;</span> <strong>FastLimitedGenericEqualityComparer&lt;T&gt;</strong>(<span title="System.int">int</span> limit)</h4>
		<div class="content">Make an F# hash/equality object for the given type using node-limited hashing when hashing F#
records, lists and union types. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.int">int</span></code> limit</h6>
          <p class="comments">The input limit on the number of nodes. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEqualityComparer<T>">IEqualityComparer&lt;T&gt;</span></code></h6>
        <p>System.Collections.Generic.IEqualityComparer<'T> </p>
      </div>
      
    </div>
	</div>
	<div id="Float32WithMeasure" class="method">
		<h4><span title="System.float">float</span> <strong>Float32WithMeasure</strong>(<span title="System.float">float</span> f)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="FloatWithMeasure" class="method">
		<h4><span title="System.double">double</span> <strong>FloatWithMeasure</strong>(<span title="System.double">double</span> f)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="GenericComparison``1" class="method">
		<h4><span title="System.int">int</span> <strong>GenericComparison&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> e1, <span title="Microsoft.FSharp.Core.T">T</span> e2)</h4>
		<div class="content">Compare two values 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> e1</h6>
          <p class="comments">The first value. </p>
          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> e2</h6>
          <p class="comments">The second value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.int">int</span></code></h6>
        <p>The result of the comparison. </p>
      </div>
      
    </div>
	</div>
	<div id="GenericComparisonWithComparer``1" class="method">
		<h4><span title="System.int">int</span> <strong>GenericComparisonWithComparer&lt;T&gt;</strong>(<span title="System.Collections.IComparer">IComparer</span> comp, <span title="Microsoft.FSharp.Core.T">T</span> e1, <span title="Microsoft.FSharp.Core.T">T</span> e2)</h4>
		<div class="content">Compare two values. May be called as a recursive case from an implementation of System.IComparable to
ensure consistent NaN comparison semantics. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.IComparer">IComparer</span></code> comp</h6>
          <p class="comments">The function to compare the values. </p>
          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> e1</h6>
          <p class="comments">The first value. </p>
          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> e2</h6>
          <p class="comments">The second value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.int">int</span></code></h6>
        <p>The result of the comparison. </p>
      </div>
      
    </div>
	</div>
	<div id="GenericEquality``1" class="method">
		<h4><span title="System.bool">bool</span> <strong>GenericEquality&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> e1, <span title="Microsoft.FSharp.Core.T">T</span> e2)</h4>
		<div class="content">Compare two values for equality using partial equivalence relation semantics ([nan] <> [nan]) 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> e1</h6>
          <p class="comments">The first value. </p>
          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> e2</h6>
          <p class="comments">The second value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p>The result of the comparison. </p>
      </div>
      
    </div>
	</div>
	<div id="GenericEqualityER``1" class="method">
		<h4><span title="System.bool">bool</span> <strong>GenericEqualityER&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> e1, <span title="Microsoft.FSharp.Core.T">T</span> e2)</h4>
		<div class="content">Compare two values for equality using equivalence relation semantics ([nan] = [nan]) 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> e1</h6>
          <p class="comments">The first value. </p>
          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> e2</h6>
          <p class="comments">The second value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p>The result of the comparison. </p>
      </div>
      
    </div>
	</div>
	<div id="GenericEqualityWithComparer``1" class="method">
		<h4><span title="System.bool">bool</span> <strong>GenericEqualityWithComparer&lt;T&gt;</strong>(<span title="System.Collections.IEqualityComparer">IEqualityComparer</span> comp, <span title="Microsoft.FSharp.Core.T">T</span> e1, <span title="Microsoft.FSharp.Core.T">T</span> e2)</h4>
		<div class="content">Compare two values for equality 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.IEqualityComparer">IEqualityComparer</span></code> comp</h6>
          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> e1</h6>
          <p class="comments">The first value. </p>
          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> e2</h6>
          <p class="comments">The second value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p>The result of the comparison. </p>
      </div>
      
    </div>
	</div>
	<div id="GenericGreaterOrEqual``1" class="method">
		<h4><span title="System.bool">bool</span> <strong>GenericGreaterOrEqual&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> e1, <span title="Microsoft.FSharp.Core.T">T</span> e2)</h4>
		<div class="content">Compare two values 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> e1</h6>
          <p class="comments">The first value. </p>
          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> e2</h6>
          <p class="comments">The second value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p>The result of the comparison. </p>
      </div>
      
    </div>
	</div>
	<div id="GenericGreaterThan``1" class="method">
		<h4><span title="System.bool">bool</span> <strong>GenericGreaterThan&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> e1, <span title="Microsoft.FSharp.Core.T">T</span> e2)</h4>
		<div class="content">Compare two values 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> e1</h6>
          <p class="comments">The first value. </p>
          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> e2</h6>
          <p class="comments">The second value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p>The result of the comparison. </p>
      </div>
      
    </div>
	</div>
	<div id="GenericHash``1" class="method">
		<h4><span title="System.int">int</span> <strong>GenericHash&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> obj)</h4>
		<div class="content">Hash a value according to its structure. This hash is not limited by an overall node count when hashing F#
records, lists and union types. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> obj</h6>
          <p class="comments">The input object. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.int">int</span></code></h6>
        <p>The hashed value. </p>
      </div>
      
    </div>
	</div>
	<div id="GenericHashWithComparer``1" class="method">
		<h4><span title="System.int">int</span> <strong>GenericHashWithComparer&lt;T&gt;</strong>(<span title="System.Collections.IEqualityComparer">IEqualityComparer</span> comparer, <span title="Microsoft.FSharp.Core.T">T</span> obj)</h4>
		<div class="content">Recursively hash a part of a value according to its structure. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.IEqualityComparer">IEqualityComparer</span></code> comparer</h6>
          <p class="comments">The comparison function. </p>
          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> obj</h6>
          <p class="comments">The input object. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.int">int</span></code></h6>
        <p>The hashed value. </p>
      </div>
      
    </div>
	</div>
	<div id="GenericLessOrEqual``1" class="method">
		<h4><span title="System.bool">bool</span> <strong>GenericLessOrEqual&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> e1, <span title="Microsoft.FSharp.Core.T">T</span> e2)</h4>
		<div class="content">Compare two values 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> e1</h6>
          <p class="comments">The first value. </p>
          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> e2</h6>
          <p class="comments">The second value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p>The result of the comparison. </p>
      </div>
      
    </div>
	</div>
	<div id="GenericLessThan``1" class="method">
		<h4><span title="System.bool">bool</span> <strong>GenericLessThan&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> e1, <span title="Microsoft.FSharp.Core.T">T</span> e2)</h4>
		<div class="content">Compare two values 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> e1</h6>
          <p class="comments">The first value. </p>
          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> e2</h6>
          <p class="comments">The second value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p>The result of the comparison. </p>
      </div>
      
    </div>
	</div>
	<div id="GenericLimitedHash``1" class="method">
		<h4><span title="System.int">int</span> <strong>GenericLimitedHash&lt;T&gt;</strong>(<span title="System.int">int</span> limit, <span title="Microsoft.FSharp.Core.T">T</span> obj)</h4>
		<div class="content">Hash a value according to its structure. Use the given limit to restrict the hash when hashing F#
records, lists and union types. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.int">int</span></code> limit</h6>
          <p class="comments">The limit on the number of nodes. </p>
          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> obj</h6>
          <p class="comments">The input object. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.int">int</span></code></h6>
        <p>The hashed value. </p>
      </div>
      
    </div>
	</div>
	<div id="GenericMaximum``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>GenericMaximum&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> e1, <span title="Microsoft.FSharp.Core.T">T</span> e2)</h4>
		<div class="content">Take the maximum of two values structurally according to the order given by GenericComparison 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> e1</h6>
          <p class="comments">The first value. </p>
          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> e2</h6>
          <p class="comments">The second value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The maximum value. </p>
      </div>
      
    </div>
	</div>
	<div id="GenericMinimum``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>GenericMinimum&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> e1, <span title="Microsoft.FSharp.Core.T">T</span> e2)</h4>
		<div class="content">Take the minimum of two values structurally according to the order given by GenericComparison 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> e1</h6>
          <p class="comments">The first value. </p>
          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> e2</h6>
          <p class="comments">The second value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code></h6>
        <p>The minimum value. </p>
      </div>
      
    </div>
	</div>
	<div id="GenericOne``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>GenericOne&lt;T&gt;</strong>()</h4>
		<div class="content">Resolves to the value 'one' for any primitive numeric type or any type with a static member called 'One' 



      
    </div>
	</div>
	<div id="GenericOneDynamic``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>GenericOneDynamic&lt;T&gt;</strong>()</h4>
		<div class="content">Resolves to the value 'one' for any primitive numeric type or any type with a static member called 'One'. 



      
    </div>
	</div>
	<div id="GenericZero``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>GenericZero&lt;T&gt;</strong>()</h4>
		<div class="content">Resolves to the zero value for any primitive numeric type or any type with a static member called 'Zero' 



      
    </div>
	</div>
	<div id="GenericZeroDynamic``1" class="method">
		<h4><span title="Microsoft.FSharp.Core.T">T</span> <strong>GenericZeroDynamic&lt;T&gt;</strong>()</h4>
		<div class="content">Resolves to the zero value for any primitive numeric type or any type with a static member called 'Zero'. 



      
    </div>
	</div>
	<div id="Int16WithMeasure" class="method">
		<h4><span title="System.short">short</span> <strong>Int16WithMeasure</strong>(<span title="System.short">short</span> f)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="Int32WithMeasure" class="method">
		<h4><span title="System.int">int</span> <strong>Int32WithMeasure</strong>(<span title="System.int">int</span> f)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="Int64WithMeasure" class="method">
		<h4><span title="System.long">long</span> <strong>Int64WithMeasure</strong>(<span title="System.long">long</span> f)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="MultiplyDynamic``3" class="method">
		<h4><span title="Microsoft.FSharp.Core.TResult">TResult</span> <strong>MultiplyDynamic&lt;T1, T2, TResult&gt;</strong>(<span title="Microsoft.FSharp.Core.T1">T1</span> x, <span title="Microsoft.FSharp.Core.T2">T2</span> y)</h4>
		<div class="content">A compiler intrinsic that implements dynamic invocations to the '*' operator. 



      
    </div>
	</div>
	<div id="ParseInt32" class="method">
		<h4><span title="System.int">int</span> <strong>ParseInt32</strong>(<span title="System.string">string</span> s)</h4>
		<div class="content">Parse an int32 according to the rules used by the overloaded 'int32' conversion operator when applied to strings 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.string">string</span></code> s</h6>
          <p class="comments">The input string. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.int">int</span></code></h6>
        <p>The parsed value. </p>
      </div>
      
    </div>
	</div>
	<div id="ParseInt64" class="method">
		<h4><span title="System.long">long</span> <strong>ParseInt64</strong>(<span title="System.string">string</span> s)</h4>
		<div class="content">Parse an int64 according to the rules used by the overloaded 'int64' conversion operator when applied to strings 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.string">string</span></code> s</h6>
          <p class="comments">The input string. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.long">long</span></code></h6>
        <p>The parsed value. </p>
      </div>
      
    </div>
	</div>
	<div id="ParseUInt32" class="method">
		<h4><span title="System.uint">uint</span> <strong>ParseUInt32</strong>(<span title="System.string">string</span> s)</h4>
		<div class="content">Parse an uint32 according to the rules used by the overloaded 'uint32' conversion operator when applied to strings 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.string">string</span></code> s</h6>
          <p class="comments">The input string. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.uint">uint</span></code></h6>
        <p>The parsed value. </p>
      </div>
      
    </div>
	</div>
	<div id="ParseUInt64" class="method">
		<h4><span title="System.ulong">ulong</span> <strong>ParseUInt64</strong>(<span title="System.string">string</span> s)</h4>
		<div class="content">Parse an uint64 according to the rules used by the overloaded 'uint64' conversion operator when applied to strings 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.string">string</span></code> s</h6>
          <p class="comments">The input string. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.ulong">ulong</span></code></h6>
        <p>The parsed value. </p>
      </div>
      
    </div>
	</div>
	<div id="PhysicalEquality``1" class="method">
		<h4><span title="System.bool">bool</span> <strong>PhysicalEquality&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> e1, <span title="Microsoft.FSharp.Core.T">T</span> e2)</h4>
		<div class="content">Reference/physical equality.
True if the inputs are reference-equal, false otherwise. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> e1</h6>
          <p class="comments">The first value. </p>
          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> e2</h6>
          <p class="comments">The second value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p>The result of the comparison. </p>
      </div>
      
    </div>
	</div>
	<div id="PhysicalHash``1" class="method">
		<h4><span title="System.int">int</span> <strong>PhysicalHash&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Core.T">T</span> obj)</h4>
		<div class="content">The physical hash. Hashes on the object identity, except for value types,
where we hash on the contents. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Core.T">T</span></code> obj</h6>
          <p class="comments">The input object. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.int">int</span></code></h6>
        <p>The hashed value. </p>
      </div>
      
    </div>
	</div>
	<div id="SByteWithMeasure" class="method">
		<h4><span title="System.SByte">SByte</span> <strong>SByteWithMeasure</strong>(<span title="System.SByte">SByte</span> f)</h4>
		<div class="content">



      
    </div>
	</div>
	
  <h3 class="section">Public properties</h3>

  <div id="GenericComparer" class="method">
    <h4><span title="System.Collections.IComparer">IComparer</span> <strong>GenericComparer</strong> get; </h4>
    <div class="content">A static F# comparer object 
      
    </div>
  </div>
  <div id="GenericEqualityComparer" class="method">
    <h4><span title="System.Collections.IEqualityComparer">IEqualityComparer</span> <strong>GenericEqualityComparer</strong> get; </h4>
    <div class="content">Return an F# comparer object suitable for hashing and equality. This hashing behaviour
of the returned comparer is not limited by an overall node count when hashing F#
records, lists and union types. 
      
    </div>
  </div>
  <div id="GenericEqualityERComparer" class="method">
    <h4><span title="System.Collections.IEqualityComparer">IEqualityComparer</span> <strong>GenericEqualityERComparer</strong> get; </h4>
    <div class="content">Return an F# comparer object suitable for hashing and equality. This hashing behaviour
of the returned comparer is not limited by an overall node count when hashing F#
records, lists and union types. This equality comparer has equivalence
relation semantics ([nan] = [nan]). 
      
    </div>
  </div>
	<div id="footer">
  <p>Based on v4.3.0.0 of FSharp.Core.dll (Microsoft&#174; Visual Studio&#174; 2012)</p>
  <p>Generated by <a href="http://docu.jagregory.com">docu</a></p>
</div>
  </body>
</html>