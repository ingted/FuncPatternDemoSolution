<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <title>FSharpValue - Microsoft&#174; Visual Studio&#174; 2012 Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body><div id="namespaces">
	<h2 class="fixed">Namespaces</h2>
	<div class="scroll">
		<ul>
			<li>
          <a href="../FSharp.Control/index.htm">FSharp.Control</a>
      </li>
			<li>
          <a href="../FSharp.IO/index.htm">FSharp.IO</a>
      </li>
			<li>
          <a href="../FSharp.Net/index.htm">FSharp.Net</a>
      </li>
			<li>
          <a href="../FSharpx/index.htm">FSharpx</a>
      </li>
			<li>
          <a href="../FSharpx.Core/index.htm">FSharpx.Core</a>
      </li>
			<li>
          <a href="../FSharpx.DataStructures/index.htm">FSharpx.DataStructures</a>
      </li>
			<li>
          <a href="../FSharpx.Http/index.htm">FSharpx.Http</a>
      </li>
			<li>
          <a href="../FSharpx.Observable/index.htm">FSharpx.Observable</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders/index.htm">FSharpx.TypeProviders</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.AppSettings/index.htm">FSharpx.TypeProviders.AppSettings</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Documents/index.htm">FSharpx.TypeProviders.Documents</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Excel/index.htm">FSharpx.TypeProviders.Excel</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase/index.htm">FSharpx.TypeProviders.Freebase</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.DesignTime/index.htm">FSharpx.TypeProviders.Freebase.DesignTime</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.FreebaseRuntime/index.htm">FSharpx.TypeProviders.Freebase.FreebaseRuntime</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.FreebaseTypeExtender/index.htm">FSharpx.TypeProviders.Freebase.FreebaseTypeExtender</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Graph/index.htm">FSharpx.TypeProviders.Graph</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Machine/index.htm">FSharpx.TypeProviders.Machine</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Math/index.htm">FSharpx.TypeProviders.Math</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Regex/index.htm">FSharpx.TypeProviders.Regex</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Xaml/index.htm">FSharpx.TypeProviders.Xaml</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections/index.htm">Microsoft.FSharp.Collections</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections.Tagged/index.htm">Microsoft.FSharp.Collections.Tagged</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Control/index.htm">Microsoft.FSharp.Control</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Core/index.htm">Microsoft.FSharp.Core</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Core.CompilerServices/index.htm">Microsoft.FSharp.Core.CompilerServices</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Data.TypeProviders.DesignTime/index.htm">Microsoft.FSharp.Data.TypeProviders.DesignTime</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Data.UnitSystems.SI.UnitNames/index.htm">Microsoft.FSharp.Data.UnitSystems.SI.UnitNames</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq/index.htm">Microsoft.FSharp.Linq</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq.QueryRunExtensions/index.htm">Microsoft.FSharp.Linq.QueryRunExtensions</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq.RuntimeHelpers/index.htm">Microsoft.FSharp.Linq.RuntimeHelpers</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Math/index.htm">Microsoft.FSharp.Math</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Metadata/index.htm">Microsoft.FSharp.Metadata</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.NativeInterop/index.htm">Microsoft.FSharp.NativeInterop</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Quotations/index.htm">Microsoft.FSharp.Quotations</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Reflection/index.htm" class="current">Microsoft.FSharp.Reflection</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text/index.htm">Microsoft.FSharp.Text</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.Lexing/index.htm">Microsoft.FSharp.Text.Lexing</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.Parsing/index.htm">Microsoft.FSharp.Text.Parsing</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.StructuredFormat/index.htm">Microsoft.FSharp.Text.StructuredFormat</a>
      </li>
			<li>
          <a href="../Samples.FSharp.ProvidedTypes/index.htm">Samples.FSharp.ProvidedTypes</a>
      </li>
			<li>
          <a href="../Utilities.Caching/index.htm">Utilities.Caching</a>
      </li>
		</ul>
	</div>
</div><div id="types">
  <h2 class="fixed">Types in Microsoft.FSharp.Reflection</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../Microsoft.FSharp.Reflection/FSharpType.htm">FSharpType</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Reflection/FSharpValue.htm" class="current">FSharpValue</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Reflection/UnionCaseInfo.htm">UnionCaseInfo</a>
        </li>
		</ul>
	</div>
</div>
    <div class="header">
		<p class="class"><strong>Type</strong> FSharpValue</p>
		<p><strong>Namespace</strong> Microsoft.FSharp.Reflection</p>
	</div>
    <div class="sub-header">
			<div id="summary">Contains operations associated with constructing and analyzing values associated with F# types
such as records, unions and tuples. 
			</div>
		
		
			<h3 class="section">Methods</h3>
			<ul>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpValue.htm#GetExceptionFields">GetExceptionFields</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpValue.htm#GetRecordField">GetRecordField</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpValue.htm#GetRecordFields">GetRecordFields</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpValue.htm#GetTupleField">GetTupleField</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpValue.htm#GetTupleFields">GetTupleFields</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpValue.htm#GetUnionFields">GetUnionFields</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpValue.htm#MakeFunction">MakeFunction</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpValue.htm#MakeRecord">MakeRecord</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpValue.htm#MakeTuple">MakeTuple</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpValue.htm#MakeUnion">MakeUnion</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpValue.htm#PreComputeRecordConstructor">PreComputeRecordConstructor</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpValue.htm#PreComputeRecordConstructorInfo">PreComputeRecordConstructorInfo</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpValue.htm#PreComputeRecordFieldReader">PreComputeRecordFieldReader</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpValue.htm#PreComputeRecordReader">PreComputeRecordReader</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpValue.htm#PreComputeTupleConstructor">PreComputeTupleConstructor</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpValue.htm#PreComputeTupleConstructorInfo">PreComputeTupleConstructorInfo</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpValue.htm#PreComputeTuplePropertyInfo">PreComputeTuplePropertyInfo</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpValue.htm#PreComputeTupleReader">PreComputeTupleReader</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpValue.htm#PreComputeUnionConstructor">PreComputeUnionConstructor</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpValue.htm#PreComputeUnionConstructorInfo">PreComputeUnionConstructorInfo</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpValue.htm#PreComputeUnionReader">PreComputeUnionReader</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpValue.htm#PreComputeUnionTagMemberInfo">PreComputeUnionTagMemberInfo</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpValue.htm#PreComputeUnionTagReader">PreComputeUnionTagReader</a></li>
			</ul>
		
		
	</div>
	
	
	
	<h3 class="section">Public static methods</h3>
	
	<div id="GetExceptionFields" class="method">
		<h4><span title="System.Object[]">Object[]</span> <strong>GetExceptionFields</strong>(<span title="System.object">object</span> exn, <a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> bindingFlags)</h4>
		<div class="content">Reads all the fields from a value built using an instance of an F# exception declaration <blockquote class="remarks">
  Assumes the given input is an F# exception value. If not, ArgumentException is raised. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.object">object</span></code> exn</h6>
          <p class="comments">The exception instance. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code> bindingFlags</h6>
          <p class="comments">Optional binding flags. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Object[]">Object[]</span></code></h6>
        <p>The fields from the given exception. </p>
      </div>
      
    </div>
	</div>
	<div id="GetRecordField" class="method">
		<h4><span title="System.object">object</span> <strong>GetRecordField</strong>(<span title="System.object">object</span> record, <span title="System.Reflection.PropertyInfo">PropertyInfo</span> info)</h4>
		<div class="content">Reads a field from a record value. <blockquote class="remarks">
  Assumes the given input is a record value. If not, ArgumentException is raised. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.object">object</span></code> record</h6>
          <p class="comments">The record object. </p>
          <h6><code><span title="System.Reflection.PropertyInfo">PropertyInfo</span></code> info</h6>
          <p class="comments">The PropertyInfo describing the field to read. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.object">object</span></code></h6>
        <p>The field from the record. </p>
      </div>
      
    </div>
	</div>
	<div id="GetRecordFields" class="method">
		<h4><span title="System.Object[]">Object[]</span> <strong>GetRecordFields</strong>(<span title="System.object">object</span> record, <a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> bindingFlags)</h4>
		<div class="content">Reads all the fields from a record value. <blockquote class="remarks">
  Assumes the given input is a record value. If not, ArgumentException is raised. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.object">object</span></code> record</h6>
          <p class="comments">The record object. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code> bindingFlags</h6>
          <p class="comments">Optional binding flags for the record. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Object[]">Object[]</span></code></h6>
        <p>The array of fields from the record. </p>
      </div>
      
    </div>
	</div>
	<div id="GetTupleField" class="method">
		<h4><span title="System.object">object</span> <strong>GetTupleField</strong>(<span title="System.object">object</span> tuple, <span title="System.int">int</span> index)</h4>
		<div class="content">Reads a field from a tuple value. <blockquote class="remarks">
  Assumes the given input is a tuple value. If not, ArgumentException is raised. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.object">object</span></code> tuple</h6>
          <p class="comments">The input tuple. </p>
          <h6><code><span title="System.int">int</span></code> index</h6>
          <p class="comments">The index of the field to read. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.object">object</span></code></h6>
        <p>The value of the field. </p>
      </div>
      
    </div>
	</div>
	<div id="GetTupleFields" class="method">
		<h4><span title="System.Object[]">Object[]</span> <strong>GetTupleFields</strong>(<span title="System.object">object</span> tuple)</h4>
		<div class="content">Reads all fields from a tuple. <blockquote class="remarks">
  Assumes the given input is a tuple value. If not, ArgumentException is raised. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.object">object</span></code> tuple</h6>
          <p class="comments">The input tuple. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Object[]">Object[]</span></code></h6>
        <p>An array of the fields from the given tuple. </p>
      </div>
      
    </div>
	</div>
	<div id="GetUnionFields" class="method">
		<h4><span title="System.Tuple<UnionCaseInfo, Object[]>">Tuple&lt;UnionCaseInfo, Object[]&gt;</span> <strong>GetUnionFields</strong>(<span title="System.object">object</span> value, <span title="System.Type">Type</span> unionType, <a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> bindingFlags)</h4>
		<div class="content">Identify the union case and its fields for an object <blockquote class="remarks">
  Assumes the given input is a union case value. If not, ArgumentException is raised.
If the type is not given, then the runtime type of the input object is used to identify the
relevant union type. The type should always be given if the input object may be null. For example,
option values may be represented using the 'null'. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.object">object</span></code> value</h6>
          <p class="comments">The input union case. </p>
          <h6><code><span title="System.Type">Type</span></code> unionType</h6>
          <p class="comments">The union type containing the value. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code> bindingFlags</h6>
          <p class="comments">Optional binding flags. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Tuple<UnionCaseInfo, Object[]>">Tuple&lt;UnionCaseInfo, Object[]&gt;</span></code></h6>
        <p>The description of the union case and its fields. </p>
      </div>
      
    </div>
	</div>
	<div id="MakeFunction" class="method">
		<h4><span title="System.object">object</span> <strong>MakeFunction</strong>(<span title="System.Type">Type</span> functionType, <a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> implementation)</h4>
		<div class="content">Builds a typed function from object from a dynamic function implementation 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Type">Type</span></code> functionType</h6>
          <p class="comments">The function type of the implementation. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> implementation</h6>
          <p class="comments">The untyped lambda of the function implementation. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.object">object</span></code></h6>
        <p>A typed function from the given dynamic implementation. </p>
      </div>
      
    </div>
	</div>
	<div id="MakeRecord" class="method">
		<h4><span title="System.object">object</span> <strong>MakeRecord</strong>(<span title="System.Type">Type</span> recordType, <span title="System.Object[]">Object[]</span> values, <a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> bindingFlags)</h4>
		<div class="content">Creates an instance of a record type. <blockquote class="remarks">
  Assumes the given input is a record type. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Type">Type</span></code> recordType</h6>
          <p class="comments">The type of record to make. </p>
          <h6><code><span title="System.Object[]">Object[]</span></code> values</h6>
          <p class="comments">The array of values to initialize the record. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code> bindingFlags</h6>
          <p class="comments">Optional binding flags for the record. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.object">object</span></code></h6>
        <p>The created record. </p>
      </div>
      
    </div>
	</div>
	<div id="MakeTuple" class="method">
		<h4><span title="System.object">object</span> <strong>MakeTuple</strong>(<span title="System.Object[]">Object[]</span> tupleElements, <span title="System.Type">Type</span> tupleType)</h4>
		<div class="content">Creates an instance of a tuple type <blockquote class="remarks">
  Assumes at least one element is given. If not, ArgumentException is raised. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Object[]">Object[]</span></code> tupleElements</h6>
          <p class="comments">The array of tuple fields. </p>
          <h6><code><span title="System.Type">Type</span></code> tupleType</h6>
          <p class="comments">The tuple type to create. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.object">object</span></code></h6>
        <p>An instance of the tuple type with the given elements. </p>
      </div>
      
    </div>
	</div>
	<div id="MakeUnion" class="method">
		<h4><span title="System.object">object</span> <strong>MakeUnion</strong>(<a href="../Microsoft.FSharp.Reflection/UnionCaseInfo.htm">UnionCaseInfo</a> unionCase, <span title="System.Object[]">Object[]</span> args, <a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> bindingFlags)</h4>
		<div class="content">Create a union case value. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Reflection/UnionCaseInfo.htm">UnionCaseInfo</a></code> unionCase</h6>
          <p class="comments">The description of the union case to create. </p>
          <h6><code><span title="System.Object[]">Object[]</span></code> args</h6>
          <p class="comments">The array of arguments to construct the given case. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code> bindingFlags</h6>
          <p class="comments">Optional binding flags. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.object">object</span></code></h6>
        <p>The constructed union case. </p>
      </div>
      
    </div>
	</div>
	<div id="PreComputeRecordConstructor" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> <strong>PreComputeRecordConstructor</strong>(<span title="System.Type">Type</span> recordType, <a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> bindingFlags)</h4>
		<div class="content">Precompute a function for constructing a record value. <blockquote class="remarks">
  Assumes the given type is a RecordType.
If not, ArgumentException is raised during pre-computation. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Type">Type</span></code> recordType</h6>
          <p class="comments">The type of record to construct. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code> bindingFlags</h6>
          <p class="comments">Optional binding flags. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code></h6>
        <p>A function to construct records of the given type. </p>
      </div>
      
    </div>
	</div>
	<div id="PreComputeRecordConstructorInfo" class="method">
		<h4><span title="System.Reflection.ConstructorInfo">ConstructorInfo</span> <strong>PreComputeRecordConstructorInfo</strong>(<span title="System.Type">Type</span> recordType, <a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> bindingFlags)</h4>
		<div class="content">Get a ConstructorInfo for a record type 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Type">Type</span></code> recordType</h6>
          <p class="comments">The record type. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code> bindingFlags</h6>
          <p class="comments">Optional binding flags. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Reflection.ConstructorInfo">ConstructorInfo</span></code></h6>
        <p>A ConstructorInfo for the given record type. </p>
      </div>
      
    </div>
	</div>
	<div id="PreComputeRecordFieldReader" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> <strong>PreComputeRecordFieldReader</strong>(<span title="System.Reflection.PropertyInfo">PropertyInfo</span> info)</h4>
		<div class="content">Precompute a function for reading a particular field from a record.
Assumes the given type is a RecordType with a field of the given name.
If not, ArgumentException is raised during pre-computation. <blockquote class="remarks">
  Using the computed function will typically be faster than executing a corresponding call to Value.GetInfo
because the path executed by the computed function is optimized given the knowledge that it will be
used to read values of the given type. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Reflection.PropertyInfo">PropertyInfo</span></code> info</h6>
          <p class="comments">The PropertyInfo of the field to read. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code></h6>
        <p>A function to read the specified field from the record. </p>
      </div>
      
    </div>
	</div>
	<div id="PreComputeRecordReader" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> <strong>PreComputeRecordReader</strong>(<span title="System.Type">Type</span> recordType, <a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> bindingFlags)</h4>
		<div class="content">Precompute a function for reading all the fields from a record. The fields are returned in the
same order as the fields reported by a call to Microsoft.FSharp.Reflection.Type.GetInfo for
this type. <blockquote class="remarks">
  Assumes the given type is a RecordType.
If not, ArgumentException is raised during pre-computation.
Using the computed function will typically be faster than executing a corresponding call to Value.GetInfo
because the path executed by the computed function is optimized given the knowledge that it will be
used to read values of the given type. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Type">Type</span></code> recordType</h6>
          <p class="comments">The type of record to read. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code> bindingFlags</h6>
          <p class="comments">Optional binding flags. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code></h6>
        <p>An optimized reader for the given record type. </p>
      </div>
      
    </div>
	</div>
	<div id="PreComputeTupleConstructor" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> <strong>PreComputeTupleConstructor</strong>(<span title="System.Type">Type</span> tupleType)</h4>
		<div class="content">Precomputes a function for reading the values of a particular tuple type <blockquote class="remarks">
  Assumes the given type is a TupleType.
If not, ArgumentException is raised during pre-computation. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Type">Type</span></code> tupleType</h6>
          <p class="comments">The type of tuple to read. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code></h6>
        <p>A function to read a particular tuple type. </p>
      </div>
      
    </div>
	</div>
	<div id="PreComputeTupleConstructorInfo" class="method">
		<h4><span title="System.Tuple<ConstructorInfo, FSharpOption<Type>>">Tuple&lt;ConstructorInfo, FSharpOption&lt;Type&gt;&gt;</span> <strong>PreComputeTupleConstructorInfo</strong>(<span title="System.Type">Type</span> tupleType)</h4>
		<div class="content">Gets a method that constructs objects of the given tuple type.
For small tuples, no additional type will be returned. <blockquote class="remarks">
  For large tuples, an additional type is returned indicating that
a nested encoding has been used for the tuple type. In this case
the suffix portion of the tuple type has the given type and an
object of this type must be created and passed as the last argument
to the ConstructorInfo. A recursive call to PreComputeTupleConstructorInfo
can be used to determine the constructor for that the suffix type. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Type">Type</span></code> tupleType</h6>
          <p class="comments">The input tuple type. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Tuple<ConstructorInfo, FSharpOption<Type>>">Tuple&lt;ConstructorInfo, FSharpOption&lt;Type&gt;&gt;</span></code></h6>
        <p>The description of the tuple type constructor and an optional extra type
for large tuples. </p>
      </div>
      
    </div>
	</div>
	<div id="PreComputeTuplePropertyInfo" class="method">
		<h4><span title="System.Tuple<PropertyInfo, FSharpOption<Tuple<Type, int>>>">Tuple&lt;PropertyInfo, FSharpOption&lt;Tuple&lt;Type, int&gt;&gt;&gt;</span> <strong>PreComputeTuplePropertyInfo</strong>(<span title="System.Type">Type</span> tupleType, <span title="System.int">int</span> index)</h4>
		<div class="content">Gets information that indicates how to read a field of a tuple 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Type">Type</span></code> tupleType</h6>
          <p class="comments">The input tuple type. </p>
          <h6><code><span title="System.int">int</span></code> index</h6>
          <p class="comments">The index of the tuple element to describe. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Tuple<PropertyInfo, FSharpOption<Tuple<Type, int>>>">Tuple&lt;PropertyInfo, FSharpOption&lt;Tuple&lt;Type, int&gt;&gt;&gt;</span></code></h6>
        <p>The description of the tuple element and an optional type and index if the tuple is big. </p>
      </div>
      
    </div>
	</div>
	<div id="PreComputeTupleReader" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> <strong>PreComputeTupleReader</strong>(<span title="System.Type">Type</span> tupleType)</h4>
		<div class="content">Precomputes a function for reading the values of a particular tuple type <blockquote class="remarks">
  Assumes the given type is a TupleType.
If not, ArgumentException is raised during pre-computation. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Type">Type</span></code> tupleType</h6>
          <p class="comments">The tuple type to read. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code></h6>
        <p>A function to read values of the given tuple type. </p>
      </div>
      
    </div>
	</div>
	<div id="PreComputeUnionConstructor" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> <strong>PreComputeUnionConstructor</strong>(<a href="../Microsoft.FSharp.Reflection/UnionCaseInfo.htm">UnionCaseInfo</a> unionCase, <a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> bindingFlags)</h4>
		<div class="content">Precomputes a function for constructing a discriminated union value for a particular union case. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Reflection/UnionCaseInfo.htm">UnionCaseInfo</a></code> unionCase</h6>
          <p class="comments">The description of the union case. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code> bindingFlags</h6>
          <p class="comments">Optional binding flags. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code></h6>
        <p>A function for constructing values of the given union case. </p>
      </div>
      
    </div>
	</div>
	<div id="PreComputeUnionConstructorInfo" class="method">
		<h4><span title="System.Reflection.MethodInfo">MethodInfo</span> <strong>PreComputeUnionConstructorInfo</strong>(<a href="../Microsoft.FSharp.Reflection/UnionCaseInfo.htm">UnionCaseInfo</a> unionCase, <a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> bindingFlags)</h4>
		<div class="content">A method that constructs objects of the given case 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Reflection/UnionCaseInfo.htm">UnionCaseInfo</a></code> unionCase</h6>
          <p class="comments">The description of the union case. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code> bindingFlags</h6>
          <p class="comments">Optional binding flags. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Reflection.MethodInfo">MethodInfo</span></code></h6>
        <p>The description of the constructor of the given union case. </p>
      </div>
      
    </div>
	</div>
	<div id="PreComputeUnionReader" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> <strong>PreComputeUnionReader</strong>(<a href="../Microsoft.FSharp.Reflection/UnionCaseInfo.htm">UnionCaseInfo</a> unionCase, <a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> bindingFlags)</h4>
		<div class="content">Precomputes a function for reading all the fields for a particular discriminator case of a union type <blockquote class="remarks">
  Using the computed function will typically be faster than executing a corresponding call to GetFields 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Reflection/UnionCaseInfo.htm">UnionCaseInfo</a></code> unionCase</h6>
          <p class="comments">The description of the union case to read. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code> bindingFlags</h6>
          <p class="comments">Optional binding flags. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code></h6>
        <p>A function to for reading the fields of the given union case. </p>
      </div>
      
    </div>
	</div>
	<div id="PreComputeUnionTagMemberInfo" class="method">
		<h4><span title="System.Reflection.MemberInfo">MemberInfo</span> <strong>PreComputeUnionTagMemberInfo</strong>(<span title="System.Type">Type</span> unionType, <a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> bindingFlags)</h4>
		<div class="content">Precompute a property or static method for reading an integer representing the case tag of a union type. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Type">Type</span></code> unionType</h6>
          <p class="comments">The type of union to read. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code> bindingFlags</h6>
          <p class="comments">Optional binding flags. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Reflection.MemberInfo">MemberInfo</span></code></h6>
        <p>The description of the union case reader. </p>
      </div>
      
    </div>
	</div>
	<div id="PreComputeUnionTagReader" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> <strong>PreComputeUnionTagReader</strong>(<span title="System.Type">Type</span> unionType, <a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> bindingFlags)</h4>
		<div class="content">Assumes the given type is a union type.
If not, ArgumentException is raised during pre-computation. <blockquote class="remarks">
  Using the computed function is more efficient than calling GetUnionCase
because the path executed by the computed function is optimized given the knowledge that it will be
used to read values of the given type. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Type">Type</span></code> unionType</h6>
          <p class="comments">The type of union to optimize reading. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code> bindingFlags</h6>
          <p class="comments">Optional binding flags. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code></h6>
        <p>An optimized function to read the tags of the given union type. </p>
      </div>
      
    </div>
	</div>
	
	<div id="footer">
  <p>Based on v4.3.0.0 of FSharp.Core.dll (Microsoft&#174; Visual Studio&#174; 2012)</p>
  <p>Generated by <a href="http://docu.jagregory.com">docu</a></p>
</div>
  </body>
</html>