<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <title>FSharpType - Microsoft&#174; Visual Studio&#174; 2012 Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body><div id="namespaces">
	<h2 class="fixed">Namespaces</h2>
	<div class="scroll">
		<ul>
			<li>
          <a href="../FSharp.Control/index.htm">FSharp.Control</a>
      </li>
			<li>
          <a href="../FSharp.IO/index.htm">FSharp.IO</a>
      </li>
			<li>
          <a href="../FSharp.Net/index.htm">FSharp.Net</a>
      </li>
			<li>
          <a href="../FSharpx/index.htm">FSharpx</a>
      </li>
			<li>
          <a href="../FSharpx.Core/index.htm">FSharpx.Core</a>
      </li>
			<li>
          <a href="../FSharpx.DataStructures/index.htm">FSharpx.DataStructures</a>
      </li>
			<li>
          <a href="../FSharpx.Http/index.htm">FSharpx.Http</a>
      </li>
			<li>
          <a href="../FSharpx.Observable/index.htm">FSharpx.Observable</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders/index.htm">FSharpx.TypeProviders</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.AppSettings/index.htm">FSharpx.TypeProviders.AppSettings</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Documents/index.htm">FSharpx.TypeProviders.Documents</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Excel/index.htm">FSharpx.TypeProviders.Excel</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase/index.htm">FSharpx.TypeProviders.Freebase</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.DesignTime/index.htm">FSharpx.TypeProviders.Freebase.DesignTime</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.FreebaseRuntime/index.htm">FSharpx.TypeProviders.Freebase.FreebaseRuntime</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.FreebaseTypeExtender/index.htm">FSharpx.TypeProviders.Freebase.FreebaseTypeExtender</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Graph/index.htm">FSharpx.TypeProviders.Graph</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Machine/index.htm">FSharpx.TypeProviders.Machine</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Math/index.htm">FSharpx.TypeProviders.Math</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Regex/index.htm">FSharpx.TypeProviders.Regex</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Xaml/index.htm">FSharpx.TypeProviders.Xaml</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections/index.htm">Microsoft.FSharp.Collections</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections.Tagged/index.htm">Microsoft.FSharp.Collections.Tagged</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Control/index.htm">Microsoft.FSharp.Control</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Core/index.htm">Microsoft.FSharp.Core</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Core.CompilerServices/index.htm">Microsoft.FSharp.Core.CompilerServices</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Data.TypeProviders.DesignTime/index.htm">Microsoft.FSharp.Data.TypeProviders.DesignTime</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Data.UnitSystems.SI.UnitNames/index.htm">Microsoft.FSharp.Data.UnitSystems.SI.UnitNames</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq/index.htm">Microsoft.FSharp.Linq</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq.QueryRunExtensions/index.htm">Microsoft.FSharp.Linq.QueryRunExtensions</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq.RuntimeHelpers/index.htm">Microsoft.FSharp.Linq.RuntimeHelpers</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Math/index.htm">Microsoft.FSharp.Math</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Metadata/index.htm">Microsoft.FSharp.Metadata</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.NativeInterop/index.htm">Microsoft.FSharp.NativeInterop</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Quotations/index.htm">Microsoft.FSharp.Quotations</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Reflection/index.htm" class="current">Microsoft.FSharp.Reflection</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text/index.htm">Microsoft.FSharp.Text</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.Lexing/index.htm">Microsoft.FSharp.Text.Lexing</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.Parsing/index.htm">Microsoft.FSharp.Text.Parsing</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.StructuredFormat/index.htm">Microsoft.FSharp.Text.StructuredFormat</a>
      </li>
			<li>
          <a href="../Samples.FSharp.ProvidedTypes/index.htm">Samples.FSharp.ProvidedTypes</a>
      </li>
			<li>
          <a href="../Utilities.Caching/index.htm">Utilities.Caching</a>
      </li>
		</ul>
	</div>
</div><div id="types">
  <h2 class="fixed">Types in Microsoft.FSharp.Reflection</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../Microsoft.FSharp.Reflection/FSharpType.htm" class="current">FSharpType</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Reflection/FSharpValue.htm">FSharpValue</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Reflection/UnionCaseInfo.htm">UnionCaseInfo</a>
        </li>
		</ul>
	</div>
</div>
    <div class="header">
		<p class="class"><strong>Type</strong> FSharpType</p>
		<p><strong>Namespace</strong> Microsoft.FSharp.Reflection</p>
	</div>
    <div class="sub-header">
			<div id="summary">Contains operations associated with constructing and analyzing F# types such as records, unions and tuples 
			</div>
		
		
			<h3 class="section">Methods</h3>
			<ul>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpType.htm#GetExceptionFields">GetExceptionFields</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpType.htm#GetFunctionElements">GetFunctionElements</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpType.htm#GetRecordFields">GetRecordFields</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpType.htm#GetTupleElements">GetTupleElements</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpType.htm#GetUnionCases">GetUnionCases</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpType.htm#IsExceptionRepresentation">IsExceptionRepresentation</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpType.htm#IsFunction">IsFunction</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpType.htm#IsModule">IsModule</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpType.htm#IsRecord">IsRecord</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpType.htm#IsTuple">IsTuple</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpType.htm#IsUnion">IsUnion</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpType.htm#MakeFunctionType">MakeFunctionType</a></li>
				<li><a href="../Microsoft.FSharp.Reflection/FSharpType.htm#MakeTupleType">MakeTupleType</a></li>
			</ul>
		
		
	</div>
	
	
	
	<h3 class="section">Public static methods</h3>
	
	<div id="GetExceptionFields" class="method">
		<h4><span title="System.Reflection.PropertyInfo[]">PropertyInfo[]</span> <strong>GetExceptionFields</strong>(<span title="System.Type">Type</span> exceptionType, <a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> bindingFlags)</h4>
		<div class="content">Reads all the fields from an F# exception declaration, in declaration order <blockquote class="remarks">
  Assumes  <code>exceptionType</code>  is an exception representation type. If not, ArgumentException is raised. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Type">Type</span></code> exceptionType</h6>
          <p class="comments">The exception type to read. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code> bindingFlags</h6>
          <p class="comments">Optional binding flags. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Reflection.PropertyInfo[]">PropertyInfo[]</span></code></h6>
        <p>An array containing the PropertyInfo of each field in the exception. </p>
      </div>
      
    </div>
	</div>
	<div id="GetFunctionElements" class="method">
		<h4><span title="System.Tuple<Type, Type>">Tuple&lt;Type, Type&gt;</span> <strong>GetFunctionElements</strong>(<span title="System.Type">Type</span> functionType)</h4>
		<div class="content">Gets the domain and range types from an F# function type  or from the runtime type of a closure implementing an F# type 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Type">Type</span></code> functionType</h6>
          <p class="comments">The input function type. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Tuple<Type, Type>">Tuple&lt;Type, Type&gt;</span></code></h6>
        <p>A tuple of the domain and range types of the input function. </p>
      </div>
      
    </div>
	</div>
	<div id="GetRecordFields" class="method">
		<h4><span title="System.Reflection.PropertyInfo[]">PropertyInfo[]</span> <strong>GetRecordFields</strong>(<span title="System.Type">Type</span> recordType, <a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> bindingFlags)</h4>
		<div class="content">Reads all the fields from a record value, in declaration order <blockquote class="remarks">
  Assumes the given input is a record value. If not, ArgumentException is raised. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Type">Type</span></code> recordType</h6>
          <p class="comments">The input record type. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code> bindingFlags</h6>
          <p class="comments">Optional binding flags. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Reflection.PropertyInfo[]">PropertyInfo[]</span></code></h6>
        <p>An array of descriptions of the properties of the record type. </p>
      </div>
      
    </div>
	</div>
	<div id="GetTupleElements" class="method">
		<h4><span title="System.Type[]">Type[]</span> <strong>GetTupleElements</strong>(<span title="System.Type">Type</span> tupleType)</h4>
		<div class="content">Gets the tuple elements from the representation of an F# tuple type. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Type">Type</span></code> tupleType</h6>
          <p class="comments">The input tuple type. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Type[]">Type[]</span></code></h6>
        <p>An array of the types contained in the given tuple type. </p>
      </div>
      
    </div>
	</div>
	<div id="GetUnionCases" class="method">
		<h4><span title="Microsoft.FSharp.Reflection.UnionCaseInfo[]">UnionCaseInfo[]</span> <strong>GetUnionCases</strong>(<span title="System.Type">Type</span> unionType, <a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> bindingFlags)</h4>
		<div class="content">Gets the cases of a union type. <blockquote class="remarks">
  Assumes the given type is a union type. If not, ArgumentException is raised during pre-computation. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Type">Type</span></code> unionType</h6>
          <p class="comments">The input union type. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code> bindingFlags</h6>
          <p class="comments">Optional binding flags. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Reflection.UnionCaseInfo[]">UnionCaseInfo[]</span></code></h6>
        <p>An array of descriptions of the cases of the given union type. </p>
      </div>
      
    </div>
	</div>
	<div id="IsExceptionRepresentation" class="method">
		<h4><span title="System.bool">bool</span> <strong>IsExceptionRepresentation</strong>(<span title="System.Type">Type</span> exceptionType, <a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> bindingFlags)</h4>
		<div class="content">Returns true if the  <code>typ</code>  is a representation of an F# exception declaration 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Type">Type</span></code> exceptionType</h6>
          <p class="comments">The type to check. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code> bindingFlags</h6>
          <p class="comments">Optional binding flags. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p>True if the type check is an F# exception. </p>
      </div>
      
    </div>
	</div>
	<div id="IsFunction" class="method">
		<h4><span title="System.bool">bool</span> <strong>IsFunction</strong>(<span title="System.Type">Type</span> typ)</h4>
		<div class="content">Return true if the  <code>typ</code>  is a representation of an F# function type or the runtime type of a closure implementing an F# function type 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Type">Type</span></code> typ</h6>
          <p class="comments">The type to check. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p>True if the type check succeeds. </p>
      </div>
      
    </div>
	</div>
	<div id="IsModule" class="method">
		<h4><span title="System.bool">bool</span> <strong>IsModule</strong>(<span title="System.Type">Type</span> typ)</h4>
		<div class="content">Return true if the  <code>typ</code>  is a  <code>System.Type</code>  value corresponding to the compiled form of an F# module 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Type">Type</span></code> typ</h6>
          <p class="comments">The type to check. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p>True if the type check succeeds. </p>
      </div>
      
    </div>
	</div>
	<div id="IsRecord" class="method">
		<h4><span title="System.bool">bool</span> <strong>IsRecord</strong>(<span title="System.Type">Type</span> typ, <a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> bindingFlags)</h4>
		<div class="content">Return true if the  <code>typ</code>  is a representation of an F# record type 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Type">Type</span></code> typ</h6>
          <p class="comments">The type to check. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code> bindingFlags</h6>
          <p class="comments">Optional binding flags. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p>True if the type check succeeds. </p>
      </div>
      
    </div>
	</div>
	<div id="IsTuple" class="method">
		<h4><span title="System.bool">bool</span> <strong>IsTuple</strong>(<span title="System.Type">Type</span> typ)</h4>
		<div class="content">Return true if the  <code>typ</code>  is a representation of an F# tuple type 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Type">Type</span></code> typ</h6>
          <p class="comments">The type to check. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p>True if the type check succeeds. </p>
      </div>
      
    </div>
	</div>
	<div id="IsUnion" class="method">
		<h4><span title="System.bool">bool</span> <strong>IsUnion</strong>(<span title="System.Type">Type</span> typ, <a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> bindingFlags)</h4>
		<div class="content">Returns true if the  <code>typ</code>  is a representation of an F# union type or the runtime type of a value of that type 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Type">Type</span></code> typ</h6>
          <p class="comments">The type to check. </p>
          <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code> bindingFlags</h6>
          <p class="comments">Optional binding flags. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p>True if the type check succeeds. </p>
      </div>
      
    </div>
	</div>
	<div id="MakeFunctionType" class="method">
		<h4><span title="System.Type">Type</span> <strong>MakeFunctionType</strong>(<span title="System.Type">Type</span> domain, <span title="System.Type">Type</span> range)</h4>
		<div class="content">Returns a  <code>System.Type</code>  representing the F# function type with the given domain and range 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Type">Type</span></code> domain</h6>
          <p class="comments">The input type of the function. </p>
          <h6><code><span title="System.Type">Type</span></code> range</h6>
          <p class="comments">The output type of the function. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Type">Type</span></code></h6>
        <p>The function type with the given domain and range. </p>
      </div>
      
    </div>
	</div>
	<div id="MakeTupleType" class="method">
		<h4><span title="System.Type">Type</span> <strong>MakeTupleType</strong>(<span title="System.Type[]">Type[]</span> types)</h4>
		<div class="content">Returns a  <code>System.Type</code>  representing an F# tuple type with the given element types 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Type[]">Type[]</span></code> types</h6>
          <p class="comments">An array of types for the tuple elements. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Type">Type</span></code></h6>
        <p>The type representing the tuple containing the input elements. </p>
      </div>
      
    </div>
	</div>
	
	<div id="footer">
  <p>Based on v4.3.0.0 of FSharp.Core.dll (Microsoft&#174; Visual Studio&#174; 2012)</p>
  <p>Generated by <a href="http://docu.jagregory.com">docu</a></p>
</div>
  </body>
</html>