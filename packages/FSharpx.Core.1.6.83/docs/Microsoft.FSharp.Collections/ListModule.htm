<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <title>ListModule - Microsoft&#174; Visual Studio&#174; 2012 Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body><div id="namespaces">
	<h2 class="fixed">Namespaces</h2>
	<div class="scroll">
		<ul>
			<li>
          <a href="../FSharp.Control/index.htm">FSharp.Control</a>
      </li>
			<li>
          <a href="../FSharp.IO/index.htm">FSharp.IO</a>
      </li>
			<li>
          <a href="../FSharp.Net/index.htm">FSharp.Net</a>
      </li>
			<li>
          <a href="../FSharpx/index.htm">FSharpx</a>
      </li>
			<li>
          <a href="../FSharpx.Core/index.htm">FSharpx.Core</a>
      </li>
			<li>
          <a href="../FSharpx.DataStructures/index.htm">FSharpx.DataStructures</a>
      </li>
			<li>
          <a href="../FSharpx.Http/index.htm">FSharpx.Http</a>
      </li>
			<li>
          <a href="../FSharpx.Observable/index.htm">FSharpx.Observable</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders/index.htm">FSharpx.TypeProviders</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.AppSettings/index.htm">FSharpx.TypeProviders.AppSettings</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Documents/index.htm">FSharpx.TypeProviders.Documents</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Excel/index.htm">FSharpx.TypeProviders.Excel</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase/index.htm">FSharpx.TypeProviders.Freebase</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.DesignTime/index.htm">FSharpx.TypeProviders.Freebase.DesignTime</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.FreebaseRuntime/index.htm">FSharpx.TypeProviders.Freebase.FreebaseRuntime</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.FreebaseTypeExtender/index.htm">FSharpx.TypeProviders.Freebase.FreebaseTypeExtender</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Graph/index.htm">FSharpx.TypeProviders.Graph</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Machine/index.htm">FSharpx.TypeProviders.Machine</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Math/index.htm">FSharpx.TypeProviders.Math</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Regex/index.htm">FSharpx.TypeProviders.Regex</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Xaml/index.htm">FSharpx.TypeProviders.Xaml</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections/index.htm" class="current">Microsoft.FSharp.Collections</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections.Tagged/index.htm">Microsoft.FSharp.Collections.Tagged</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Control/index.htm">Microsoft.FSharp.Control</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Core/index.htm">Microsoft.FSharp.Core</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Core.CompilerServices/index.htm">Microsoft.FSharp.Core.CompilerServices</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Data.TypeProviders.DesignTime/index.htm">Microsoft.FSharp.Data.TypeProviders.DesignTime</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Data.UnitSystems.SI.UnitNames/index.htm">Microsoft.FSharp.Data.UnitSystems.SI.UnitNames</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq/index.htm">Microsoft.FSharp.Linq</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq.QueryRunExtensions/index.htm">Microsoft.FSharp.Linq.QueryRunExtensions</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq.RuntimeHelpers/index.htm">Microsoft.FSharp.Linq.RuntimeHelpers</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Math/index.htm">Microsoft.FSharp.Math</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Metadata/index.htm">Microsoft.FSharp.Metadata</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.NativeInterop/index.htm">Microsoft.FSharp.NativeInterop</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Quotations/index.htm">Microsoft.FSharp.Quotations</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Reflection/index.htm">Microsoft.FSharp.Reflection</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text/index.htm">Microsoft.FSharp.Text</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.Lexing/index.htm">Microsoft.FSharp.Text.Lexing</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.Parsing/index.htm">Microsoft.FSharp.Text.Parsing</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.StructuredFormat/index.htm">Microsoft.FSharp.Text.StructuredFormat</a>
      </li>
			<li>
          <a href="../Samples.FSharp.ProvidedTypes/index.htm">Samples.FSharp.ProvidedTypes</a>
      </li>
			<li>
          <a href="../Utilities.Caching/index.htm">Utilities.Caching</a>
      </li>
		</ul>
	</div>
</div><div id="types">
  <h2 class="fixed">Types in Microsoft.FSharp.Collections</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../Microsoft.FSharp.Collections/Array2DModule.htm">Array2DModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/Array3DModule.htm">Array3DModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/Array4DModule.htm">Array4DModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/ArrayModule.htm">ArrayModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/ComparisonIdentity.htm">ComparisonIdentity</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/FSharpMap`2.htm">FSharpMap&lt;TKey, TValue&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/HashIdentity.htm">HashIdentity</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/HashMultiMap`2.htm">HashMultiMap&lt;Key, Value&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/HashSet`1.htm">HashSet&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/LazyListModule.htm">LazyListModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/ListModule.htm" class="current">ListModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/MapModule.htm">MapModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/Parallel.htm">Parallel</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/PSeqModule.htm">PSeqModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm">ResizeArrayModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/SeqModule.htm">SeqModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/SetModule.htm">SetModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/Tags.htm">Tags</a>
        </li>
		</ul>
	</div>
</div>
    <div class="header">
		<p class="class"><strong>Type</strong> ListModule</p>
		<p><strong>Namespace</strong> Microsoft.FSharp.Collections</p>
	</div>
    <div class="sub-header">
			<div id="summary">Basic operations on lists. 
			</div>
		
		
			<h3 class="section">Methods</h3>
			<ul>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Append``1">Append&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Average``1">Average&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#AverageBy``2">AverageBy&lt;T, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Choose``2">Choose&lt;T, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Collect``2">Collect&lt;T, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Exists``1">Exists&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Exists2``2">Exists2&lt;T1, T2&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Filter``1">Filter&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Find``1">Find&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#FindIndex``1">FindIndex&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Fold``2">Fold&lt;T, TState&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Fold2``3">Fold2&lt;T1, T2, TState&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#FoldBack``2">FoldBack&lt;T, TState&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#FoldBack2``3">FoldBack2&lt;T1, T2, TState&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#ForAll``1">ForAll&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#ForAll2``2">ForAll2&lt;T1, T2&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Get``1">Get&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Head``1">Head&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#IsEmpty``1">IsEmpty&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Iterate``1">Iterate&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Iterate2``2">Iterate2&lt;T1, T2&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#IterateIndexed``1">IterateIndexed&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#IterateIndexed2``2">IterateIndexed2&lt;T1, T2&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Length``1">Length&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Map``2">Map&lt;T, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Map2``3">Map2&lt;T1, T2, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Map3``4">Map3&lt;T1, T2, T3, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#MapIndexed``2">MapIndexed&lt;T, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#MapIndexed2``3">MapIndexed2&lt;T1, T2, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Max``1">Max&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#MaxBy``2">MaxBy&lt;T, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Min``1">Min&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#MinBy``2">MinBy&lt;T, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Partition``1">Partition&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Permute``1">Permute&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Pick``2">Pick&lt;T, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Reduce``1">Reduce&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#ReduceBack``1">ReduceBack&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Replicate``1">Replicate&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Reverse``1">Reverse&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Scan``2">Scan&lt;T, TState&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#ScanBack``2">ScanBack&lt;T, TState&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Sort``1">Sort&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#SortBy``2">SortBy&lt;T, TKey&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#SortWith``1">SortWith&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Sum``1">Sum&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#SumBy``2">SumBy&lt;T, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Tail``1">Tail&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#ToArray``1">ToArray&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#ToSeq``1">ToSeq&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#TryFind``1">TryFind&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#TryFindIndex``1">TryFindIndex&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#TryPick``2">TryPick&lt;T, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Unzip``2">Unzip&lt;T1, T2&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Unzip3``3">Unzip3&lt;T1, T2, T3&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Zip``2">Zip&lt;T1, T2&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/ListModule.htm#Zip3``3">Zip3&lt;T1, T2, T3&gt;</a></li>
			</ul>
		
		
	</div>
	
	
	
	<h3 class="section">Public static methods</h3>
	
	<div id="Append``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> <strong>Append&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list1, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list2)</h4>
		<div class="content">Returns a new list that contains the elements of the first list
followed by elements of the second. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list1</h6>
          <p class="comments">The first input list. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list2</h6>
          <p class="comments">The second input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code></h6>
        <p>The resulting list. </p>
      </div>
      
    </div>
	</div>
	<div id="Average``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T">T</span> <strong>Average&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Returns the average of the elements in the list. <blockquote class="remarks">
  Raises  <code>System.ArgumentException</code>  if  <code>list</code>  is empty. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.T">T</span></code></h6>
        <p>The resulting average. </p>
      </div>
      
    </div>
	</div>
	<div id="AverageBy``2" class="method">
		<h4><span title="Microsoft.FSharp.Collections.TResult">TResult</span> <strong>AverageBy&lt;T, TResult&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> projection, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Returns the average of the elements generated by applying the function to each element of the list. <blockquote class="remarks">
  Raises  <code>System.ArgumentException</code>  if  <code>list</code>  is empty. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> projection</h6>
          <p class="comments">The function to transform the list elements into the type to be averaged. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.TResult">TResult</span></code></h6>
        <p>The resulting average. </p>
      </div>
      
    </div>
	</div>
	<div id="Choose``2" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> <strong>Choose&lt;T, TResult&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> chooser, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Applies the given function to each element of the list. Returns
the list comprised of the results  <code>x</code>  for each element where
the function returns Some(x) 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> chooser</h6>
          <p class="comments">The function to generate options from the elements. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code></h6>
        <p>The list comprising the values selected from the chooser function. </p>
      </div>
      
    </div>
	</div>
	<div id="Collect``2" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> <strong>Collect&lt;T, TResult&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> mapping, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">For each element of the list, applies the given function. Concatenates all the results and return the combined list. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> mapping</h6>
          <p class="comments">The function to transform each input element into a sublist to be concatenated. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code></h6>
        <p>The concatenation of the transformed sublists. </p>
      </div>
      
    </div>
	</div>
	<div id="Exists``1" class="method">
		<h4><span title="System.bool">bool</span> <strong>Exists&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> predicate, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Tests if any element of the list satisfies the given predicate. <blockquote class="remarks">
  The predicate is applied to the elements of the input list. If any application
returns true then the overall result is true and no further elements are tested.
Otherwise, false is returned. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> predicate</h6>
          <p class="comments">The function to test the input elements. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p>True if any element satisfies the predicate. </p>
      </div>
      
    </div>
	</div>
	<div id="Exists2``2" class="method">
		<h4><span title="System.bool">bool</span> <strong>Exists2&lt;T1, T2&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> predicate, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list1, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list2)</h4>
		<div class="content">Tests if any pair of corresponding elements of the lists satisfies the given predicate. <blockquote class="remarks">
  The predicate is applied to matching elements in the two collections up to the lesser of the
two lengths of the collections. If any application returns true then the overall result is
true and no further elements are tested. Otherwise, if one collections is longer
than the other then the  <code>System.ArgumentException</code>  exception is raised.
Otherwise, false is returned. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> predicate</h6>
          <p class="comments">The function to test the input elements. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list1</h6>
          <p class="comments">The first input list. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list2</h6>
          <p class="comments">The second input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p>True if any pair of elements satisfy the predicate. </p>
      </div>
      
    </div>
	</div>
	<div id="Filter``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> <strong>Filter&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> predicate, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Returns a new collection containing only the elements of the collection
for which the given predicate returns "true" 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> predicate</h6>
          <p class="comments">The function to test the input elements. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code></h6>
        <p>A list containing only the elements that satisfy the predicate. </p>
      </div>
      
    </div>
	</div>
	<div id="Find``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T">T</span> <strong>Find&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> predicate, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Returns the first element for which the given function returns  <code>true</code>.
Raises  <code>KeyNotFoundException</code>  if no such element exists. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> predicate</h6>
          <p class="comments">The function to test the input elements. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.T">T</span></code></h6>
        <p>The first element that satisfies the predicate. </p>
      </div>
      
    </div>
	</div>
	<div id="FindIndex``1" class="method">
		<h4><span title="System.int">int</span> <strong>FindIndex&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> predicate, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Returns the index of the first element in the list
that satisfies the given predicate.
Raises  <code>KeyNotFoundException</code>  if no such element exists. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> predicate</h6>
          <p class="comments">The function to test the input elements. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.int">int</span></code></h6>
        <p>The index of the first element that satisfies the predicate. </p>
      </div>
      
    </div>
	</div>
	<div id="Fold``2" class="method">
		<h4><span title="Microsoft.FSharp.Collections.TState">TState</span> <strong>Fold&lt;T, TState&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> folder, <span title="Microsoft.FSharp.Collections.TState">TState</span> state, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Applies a function to each element of the collection, threading an accumulator argument
through the computation. Take the second argument, and apply the function to it
and the first element of the list. Then feed this result into the function along
with the second element and so on. Return the final result.
If the input function is  <code>f</code>  and the elements are  <code>i0...iN</code>  then
computes  <code>f (... (f s i0) i1...) iN</code>. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> folder</h6>
          <p class="comments">The function to update the state given the input elements. </p>
          <h6><code><span title="Microsoft.FSharp.Collections.TState">TState</span></code> state</h6>
          <p class="comments">The initial state. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.TState">TState</span></code></h6>
        <p>The final state value. </p>
      </div>
      
    </div>
	</div>
	<div id="Fold2``3" class="method">
		<h4><span title="Microsoft.FSharp.Collections.TState">TState</span> <strong>Fold2&lt;T1, T2, TState&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> folder, <span title="Microsoft.FSharp.Collections.TState">TState</span> state, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list1, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list2)</h4>
		<div class="content">Applies a function to corresponding elements of two collections, threading an accumulator argument
through the computation. The collections must have identical sizes.
If the input function is  <code>f</code>  and the elements are  <code>i0...iN</code>  and  <code>j0...jN</code> then computes  <code>f (... (f s i0 j0)...) iN jN</code>. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> folder</h6>
          <p class="comments">The function to update the state given the input elements. </p>
          <h6><code><span title="Microsoft.FSharp.Collections.TState">TState</span></code> state</h6>
          <p class="comments">The initial state. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list1</h6>
          <p class="comments">The first input list. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list2</h6>
          <p class="comments">The second input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.TState">TState</span></code></h6>
        <p>The final state value. </p>
      </div>
      
    </div>
	</div>
	<div id="FoldBack``2" class="method">
		<h4><span title="Microsoft.FSharp.Collections.TState">TState</span> <strong>FoldBack&lt;T, TState&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> folder, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list, <span title="Microsoft.FSharp.Collections.TState">TState</span> state)</h4>
		<div class="content">Applies a function to each element of the collection, threading an accumulator argument
through the computation. If the input function is  <code>f</code>  and the elements are  <code>i0...iN</code>  then
computes  <code>f i0 (...(f iN s))</code>. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> folder</h6>
          <p class="comments">The function to update the state given the input elements. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
          <h6><code><span title="Microsoft.FSharp.Collections.TState">TState</span></code> state</h6>
          <p class="comments">The initial state. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.TState">TState</span></code></h6>
        <p>The final state value. </p>
      </div>
      
    </div>
	</div>
	<div id="FoldBack2``3" class="method">
		<h4><span title="Microsoft.FSharp.Collections.TState">TState</span> <strong>FoldBack2&lt;T1, T2, TState&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> folder, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list1, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list2, <span title="Microsoft.FSharp.Collections.TState">TState</span> state)</h4>
		<div class="content">Applies a function to corresponding elements of two collections, threading an accumulator argument
through the computation. The collections must have identical sizes.
If the input function is  <code>f</code>  and the elements are  <code>i0...iN</code>  and  <code>j0...jN</code> then computes  <code>f i0 j0 (...(f iN jN s))</code>. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> folder</h6>
          <p class="comments">The function to update the state given the input elements. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list1</h6>
          <p class="comments">The first input list. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list2</h6>
          <p class="comments">The second input list. </p>
          <h6><code><span title="Microsoft.FSharp.Collections.TState">TState</span></code> state</h6>
          <p class="comments">The initial state. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.TState">TState</span></code></h6>
        <p>The final state value. </p>
      </div>
      
    </div>
	</div>
	<div id="ForAll``1" class="method">
		<h4><span title="System.bool">bool</span> <strong>ForAll&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> predicate, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Tests if all elements of the collection satisfy the given predicate. <blockquote class="remarks">
  The predicate is applied to the elements of the input list. If any application
returns false then the overall result is false and no further elements are tested.
Otherwise, true is returned. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> predicate</h6>
          <p class="comments">The function to test the input elements. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p>True if all of the elements satisfy the predicate. </p>
      </div>
      
    </div>
	</div>
	<div id="ForAll2``2" class="method">
		<h4><span title="System.bool">bool</span> <strong>ForAll2&lt;T1, T2&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> predicate, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list1, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list2)</h4>
		<div class="content">Tests if all corresponding elements of the collection satisfy the given predicate pairwise. <blockquote class="remarks">
  The predicate is applied to matching elements in the two collections up to the lesser of the
two lengths of the collections. If any application returns false then the overall result is
false and no further elements are tested. Otherwise, if one collection is longer
than the other then the  <code>System.ArgumentException</code>  exception is raised.
Otherwise, true is returned. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> predicate</h6>
          <p class="comments">The function to test the input elements. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list1</h6>
          <p class="comments">The first input list. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list2</h6>
          <p class="comments">The second input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p>True if all of the pairs of elements satisfy the predicate. </p>
      </div>
      
    </div>
	</div>
	<div id="Get``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T">T</span> <strong>Get&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list, <span title="System.int">int</span> index)</h4>
		<div class="content">Indexes into the list. The first element has index 0. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
          <h6><code><span title="System.int">int</span></code> index</h6>
          <p class="comments">The index to retrieve. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.T">T</span></code></h6>
        <p>The value at the given index. </p>
      </div>
      
    </div>
	</div>
	<div id="Head``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T">T</span> <strong>Head&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Returns the first element of the list. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.T">T</span></code></h6>
        <p>The first element of the list. </p>
      </div>
      
    </div>
	</div>
	<div id="IsEmpty``1" class="method">
		<h4><span title="System.bool">bool</span> <strong>IsEmpty&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Returns true if the list contains no elements, false otherwise. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p>True if the list is empty. </p>
      </div>
      
    </div>
	</div>
	<div id="Iterate``1" class="method">
		<h4><span title="System.void">void</span> <strong>Iterate&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> action, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Applies the given function to each element of the collection. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> action</h6>
          <p class="comments">The function to apply to elements from the input list. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      
    </div>
	</div>
	<div id="Iterate2``2" class="method">
		<h4><span title="System.void">void</span> <strong>Iterate2&lt;T1, T2&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> action, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list1, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list2)</h4>
		<div class="content">Applies the given function to two collections simultaneously. The
collections must have identical size. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> action</h6>
          <p class="comments">The function to apply to pairs of elements from the input lists. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list1</h6>
          <p class="comments">The first input list. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list2</h6>
          <p class="comments">The second input list. </p>
      </div>

      
    </div>
	</div>
	<div id="IterateIndexed``1" class="method">
		<h4><span title="System.void">void</span> <strong>IterateIndexed&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> action, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Applies the given function to each element of the collection. The integer passed to the
function indicates the index of element. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> action</h6>
          <p class="comments">The function to apply to the elements of the list along with their index. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      
    </div>
	</div>
	<div id="IterateIndexed2``2" class="method">
		<h4><span title="System.void">void</span> <strong>IterateIndexed2&lt;T1, T2&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> action, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list1, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list2)</h4>
		<div class="content">Applies the given function to two collections simultaneously. The
collections must have identical size. The integer passed to the
function indicates the index of element. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> action</h6>
          <p class="comments">The function to apply to a pair of elements from the input lists along with their index. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list1</h6>
          <p class="comments">The first input list. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list2</h6>
          <p class="comments">The second input list. </p>
      </div>

      
    </div>
	</div>
	<div id="Length``1" class="method">
		<h4><span title="System.int">int</span> <strong>Length&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Returns the length of the list. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.int">int</span></code></h6>
        <p>The length of the list. </p>
      </div>
      
    </div>
	</div>
	<div id="Map``2" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> <strong>Map&lt;T, TResult&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> mapping, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Builds a new collection whose elements are the results of applying the given function
to each of the elements of the collection. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> mapping</h6>
          <p class="comments">The function to transform elements from the input list. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code></h6>
        <p>The list of transformed elements. </p>
      </div>
      
    </div>
	</div>
	<div id="Map2``3" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> <strong>Map2&lt;T1, T2, TResult&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> mapping, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list1, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list2)</h4>
		<div class="content">Builds a new collection whose elements are the results of applying the given function
to the corresponding elements of the two collections pairwise. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> mapping</h6>
          <p class="comments">The function to transform pairs of elements from the input lists. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list1</h6>
          <p class="comments">The first input list. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list2</h6>
          <p class="comments">The second input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code></h6>
        <p>The list of transformed elements. </p>
      </div>
      
    </div>
	</div>
	<div id="Map3``4" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> <strong>Map3&lt;T1, T2, T3, TResult&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> mapping, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list1, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list2, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list3)</h4>
		<div class="content">Builds a new collection whose elements are the results of applying the given function
to the corresponding elements of the three collections simultaneously. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> mapping</h6>
          <p class="comments">The function to transform triples of elements from the input lists. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list1</h6>
          <p class="comments">The first input list. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list2</h6>
          <p class="comments">The second input list. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list3</h6>
          <p class="comments">The third input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code></h6>
        <p>The list of transformed elements. </p>
      </div>
      
    </div>
	</div>
	<div id="MapIndexed``2" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> <strong>MapIndexed&lt;T, TResult&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> mapping, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Builds a new collection whose elements are the results of applying the given function
to each of the elements of the collection. The integer index passed to the
function indicates the index (from 0) of element being transformed. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> mapping</h6>
          <p class="comments">The function to transform elements and their indices. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code></h6>
        <p>The list of transformed elements. </p>
      </div>
      
    </div>
	</div>
	<div id="MapIndexed2``3" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> <strong>MapIndexed2&lt;T1, T2, TResult&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> mapping, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list1, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list2)</h4>
		<div class="content">Like mapi, but mapping corresponding elements from two lists of equal length. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> mapping</h6>
          <p class="comments">The function to transform pairs of elements from the two lists and their index. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list1</h6>
          <p class="comments">The first input list. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list2</h6>
          <p class="comments">The second input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code></h6>
        <p>The list of transformed elements. </p>
      </div>
      
    </div>
	</div>
	<div id="Max``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T">T</span> <strong>Max&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Return the greatest of all elements of the list, compared via Operators.max. <blockquote class="remarks">
  Raises  <code>System.ArgumentException</code>  if  <code>list</code>  is empty 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.T">T</span></code></h6>
        <p>The maximum element. </p>
      </div>
      
    </div>
	</div>
	<div id="MaxBy``2" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T">T</span> <strong>MaxBy&lt;T, TResult&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> projection, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Returns the greatest of all elements of the list, compared via Operators.max on the function result. <blockquote class="remarks">
  Raises  <code>System.ArgumentException</code>  if  <code>list</code>  is empty. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> projection</h6>
          <p class="comments">The function to transform the list elements into the type to be compared. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.T">T</span></code></h6>
        <p>The maximum element. </p>
      </div>
      
    </div>
	</div>
	<div id="Min``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T">T</span> <strong>Min&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Returns the lowest of all elements of the list, compared via Operators.min. <blockquote class="remarks">
  Raises  <code>System.ArgumentException</code>  if  <code>list</code>  is empty 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.T">T</span></code></h6>
        <p>The minimum value. </p>
      </div>
      
    </div>
	</div>
	<div id="MinBy``2" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T">T</span> <strong>MinBy&lt;T, TResult&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> projection, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Returns the lowest of all elements of the list, compared via Operators.min on the function result <blockquote class="remarks">
  Raises  <code>System.ArgumentException</code>  if  <code>list</code>  is empty. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> projection</h6>
          <p class="comments">The function to transform list elements into the type to be compared. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.T">T</span></code></h6>
        <p>The minimum value. </p>
      </div>
      
    </div>
	</div>
	<div id="Partition``1" class="method">
		<h4><span title="System.Tuple<FSharpList<T>, FSharpList<T>>">Tuple&lt;FSharpList&lt;T&gt;, FSharpList&lt;T&gt;&gt;</span> <strong>Partition&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> predicate, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Splits the collection into two collections, containing the
elements for which the given predicate returns  <code>true</code>  and  <code>false</code> respectively. Element order is preserved in both of the created lists. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> predicate</h6>
          <p class="comments">The function to test the input elements. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Tuple<FSharpList<T>, FSharpList<T>>">Tuple&lt;FSharpList&lt;T&gt;, FSharpList&lt;T&gt;&gt;</span></code></h6>
        <p>A list containing the elements for which the predicate evaluated to false and a list
containing the elements for which the predicate evaluated to true. </p>
      </div>
      
    </div>
	</div>
	<div id="Permute``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> <strong>Permute&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> indexMap, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Returns a list with all elements permuted according to the
specified permutation. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> indexMap</h6>
          <p class="comments">The function to map input indices to output indices. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code></h6>
        <p>The permutated list. </p>
      </div>
      
    </div>
	</div>
	<div id="Pick``2" class="method">
		<h4><span title="Microsoft.FSharp.Collections.TResult">TResult</span> <strong>Pick&lt;T, TResult&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> chooser, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Applies the given function to successive elements, returning the first
result where function returns  <code>Some(x)</code>  for some x. If no such
element exists then raise  <code>System.Collections.Generic.KeyNotFoundException</code> 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> chooser</h6>
          <p class="comments">The function to generate options from the elements. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.TResult">TResult</span></code></h6>
        <p>The first resulting value. </p>
      </div>
      
    </div>
	</div>
	<div id="Reduce``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T">T</span> <strong>Reduce&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> reduction, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Apply a function to each element of the collection, threading an accumulator argument
through the computation. Apply the function to the first two elements of the list.
Then feed this result into the function along with the third element and so on.
Return the final result. If the input function is  <code>f</code>  and the elements are  <code>i0...iN</code>  then computes <code>f (... (f i0 i1) i2...) iN</code>. <blockquote class="remarks">
  Raises  <code>System.ArgumentException</code>  if  <code>list</code>  is empty 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> reduction</h6>
          <p class="comments">The function to reduce two list elements to a single element. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.T">T</span></code></h6>
        <p>The final reduced value. </p>
      </div>
      
    </div>
	</div>
	<div id="ReduceBack``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T">T</span> <strong>ReduceBack&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> reduction, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Applies a function to each element of the collection, threading an accumulator argument
through the computation. If the input function is  <code>f</code>  and the elements are  <code>i0...iN</code>  then computes <code>f i0 (...(f iN-1 iN))</code>. <blockquote class="remarks">
  Raises  <code>System.ArgumentException</code>  if  <code>list</code>  is empty 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> reduction</h6>
          <p class="comments">The function to reduce two list elements to a single element. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.T">T</span></code></h6>
        <p>The final reduced value. </p>
      </div>
      
    </div>
	</div>
	<div id="Replicate``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> <strong>Replicate&lt;T&gt;</strong>(<span title="System.int">int</span> count, <span title="Microsoft.FSharp.Collections.T">T</span> initial)</h4>
		<div class="content">Creates a list by calling the given generator on each index. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.int">int</span></code> count</h6>
          <p class="comments">The number of elements to replicate. </p>
          <h6><code><span title="Microsoft.FSharp.Collections.T">T</span></code> initial</h6>
          <p class="comments">The value to replicate </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code></h6>
        <p>The generated list. </p>
      </div>
      
    </div>
	</div>
	<div id="Reverse``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> <strong>Reverse&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Returns a new list with the elements in reverse order. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code></h6>
        <p>The reversed list. </p>
      </div>
      
    </div>
	</div>
	<div id="Scan``2" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> <strong>Scan&lt;T, TState&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> folder, <span title="Microsoft.FSharp.Collections.TState">TState</span> state, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Applies a function to each element of the collection, threading an accumulator argument
through the computation. Take the second argument, and apply the function to it
and the first element of the list. Then feed this result into the function along
with the second element and so on. Returns the list of intermediate results and the final result. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> folder</h6>
          <p class="comments">The function to update the state given the input elements. </p>
          <h6><code><span title="Microsoft.FSharp.Collections.TState">TState</span></code> state</h6>
          <p class="comments">The initial state. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code></h6>
        <p>The list of states. </p>
      </div>
      
    </div>
	</div>
	<div id="ScanBack``2" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> <strong>ScanBack&lt;T, TState&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> folder, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list, <span title="Microsoft.FSharp.Collections.TState">TState</span> state)</h4>
		<div class="content">Like  <code>foldBack</code> , but returns both the intermediary and final results 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> folder</h6>
          <p class="comments">The function to update the state given the input elements. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
          <h6><code><span title="Microsoft.FSharp.Collections.TState">TState</span></code> state</h6>
          <p class="comments">The initial state. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code></h6>
        <p>The list of states. </p>
      </div>
      
    </div>
	</div>
	<div id="Sort``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> <strong>Sort&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Sorts the given list using Operators.compare. <blockquote class="remarks">
  This is a stable sort, i.e. the original order of equal elements is preserved. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code></h6>
        <p>The sorted list. </p>
      </div>
      
    </div>
	</div>
	<div id="SortBy``2" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> <strong>SortBy&lt;T, TKey&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> projection, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Sorts the given list using keys given by the given projection. Keys are compared using Operators.compare. <blockquote class="remarks">
  This is a stable sort, i.e. the original order of equal elements is preserved. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> projection</h6>
          <p class="comments">The function to transform the list elements into the type to be compared. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code></h6>
        <p>The sorted list. </p>
      </div>
      
    </div>
	</div>
	<div id="SortWith``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> <strong>SortWith&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> comparer, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Sorts the given list using the given comparison function. <blockquote class="remarks">
  This is a stable sort, i.e. the original order of equal elements is preserved. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> comparer</h6>
          <p class="comments">The function to compare the list elements. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code></h6>
        <p>The sorted list. </p>
      </div>
      
    </div>
	</div>
	<div id="Sum``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T">T</span> <strong>Sum&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Returns the sum of the elements in the list. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.T">T</span></code></h6>
        <p>The resulting sum. </p>
      </div>
      
    </div>
	</div>
	<div id="SumBy``2" class="method">
		<h4><span title="Microsoft.FSharp.Collections.TResult">TResult</span> <strong>SumBy&lt;T, TResult&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> projection, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Returns the sum of the results generated by applying the function to each element of the list. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> projection</h6>
          <p class="comments">The function to transform the list elements into the type to be summed. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.TResult">TResult</span></code></h6>
        <p>The resulting sum. </p>
      </div>
      
    </div>
	</div>
	<div id="Tail``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> <strong>Tail&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Returns the list after removing the first element. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code></h6>
        <p>The list after removing the first element. </p>
      </div>
      
    </div>
	</div>
	<div id="ToArray``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T[]">T[]</span> <strong>ToArray&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Builds an array from the given list. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.T[]">T[]</span></code></h6>
        <p>The array containing the elements of the list. </p>
      </div>
      
    </div>
	</div>
	<div id="ToSeq``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> <strong>ToSeq&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Views the given list as a sequence. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code></h6>
        <p>The sequence of elements in the list. </p>
      </div>
      
    </div>
	</div>
	<div id="TryFind``1" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>TryFind&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> predicate, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Returns the first element for which the given function returns  <code>true.</code>.
Return  <code>None</code>  if no such element exists. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> predicate</h6>
          <p class="comments">The function to test the input elements. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>The first element for which the predicate returns true, or None if
every element evaluates to false. </p>
      </div>
      
    </div>
	</div>
	<div id="TryFindIndex``1" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>TryFindIndex&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> predicate, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Returns the index of the first element in the list
that satisfies the given predicate.
Return  <code>None</code>  if no such element exists. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> predicate</h6>
          <p class="comments">The function to test the input elements. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>The index of the first element for which the predicate returns true, or None if
every element evaluates to false. </p>
      </div>
      
    </div>
	</div>
	<div id="TryPick``2" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>TryPick&lt;T, TResult&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> chooser, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Applies the given function to successive elements, returning  <code>Some(x)</code>  the first
result where function returns  <code>Some(x)</code>  for some x. If no such element
exists then return  <code>None</code>. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> chooser</h6>
          <p class="comments">The function to generate options from the elements. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>The first resulting value or None. </p>
      </div>
      
    </div>
	</div>
	<div id="Unzip``2" class="method">
		<h4><span title="System.Tuple<FSharpList<T1>, FSharpList<T2>>">Tuple&lt;FSharpList&lt;T1&gt;, FSharpList&lt;T2&gt;&gt;</span> <strong>Unzip&lt;T1, T2&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Splits a list of pairs into two lists. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Tuple<FSharpList<T1>, FSharpList<T2>>">Tuple&lt;FSharpList&lt;T1&gt;, FSharpList&lt;T2&gt;&gt;</span></code></h6>
        <p>Two lists of split elements. </p>
      </div>
      
    </div>
	</div>
	<div id="Unzip3``3" class="method">
		<h4><span title="System.Tuple<FSharpList<T1>, FSharpList<T2>, FSharpList<T3>>">Tuple&lt;FSharpList&lt;T1&gt;, FSharpList&lt;T2&gt;, FSharpList&lt;T3&gt;&gt;</span> <strong>Unzip3&lt;T1, T2, T3&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list)</h4>
		<div class="content">Splits a list of triples into three lists. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list</h6>
          <p class="comments">The input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Tuple<FSharpList<T1>, FSharpList<T2>, FSharpList<T3>>">Tuple&lt;FSharpList&lt;T1&gt;, FSharpList&lt;T2&gt;, FSharpList&lt;T3&gt;&gt;</span></code></h6>
        <p>Three lists of split elements. </p>
      </div>
      
    </div>
	</div>
	<div id="Zip``2" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> <strong>Zip&lt;T1, T2&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list1, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list2)</h4>
		<div class="content">Combines the two lists into a list of pairs. The two lists must have equal lengths. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list1</h6>
          <p class="comments">The first input list. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list2</h6>
          <p class="comments">The second input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code></h6>
        <p>A single list containing pairs of matching elements from the input lists. </p>
      </div>
      
    </div>
	</div>
	<div id="Zip3``3" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> <strong>Zip3&lt;T1, T2, T3&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list1, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list2, <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> list3)</h4>
		<div class="content">Combines the three lists into a list of triples. The lists must have equal lengths. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list1</h6>
          <p class="comments">The first input list. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list2</h6>
          <p class="comments">The second input list. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code> list3</h6>
          <p class="comments">The third input list. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code></h6>
        <p>A single list containing triples of matching elements from the input lists. </p>
      </div>
      
    </div>
	</div>
	
	<div id="footer">
  <p>Based on v4.3.0.0 of FSharp.Core.dll (Microsoft&#174; Visual Studio&#174; 2012)</p>
  <p>Generated by <a href="http://docu.jagregory.com">docu</a></p>
</div>
  </body>
</html>