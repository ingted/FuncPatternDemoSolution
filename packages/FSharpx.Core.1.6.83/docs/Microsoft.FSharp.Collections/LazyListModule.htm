<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <title>LazyListModule - Microsoft&#174; Visual Studio&#174; 2012 Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body><div id="namespaces">
	<h2 class="fixed">Namespaces</h2>
	<div class="scroll">
		<ul>
			<li>
          <a href="../FSharp.Control/index.htm">FSharp.Control</a>
      </li>
			<li>
          <a href="../FSharp.IO/index.htm">FSharp.IO</a>
      </li>
			<li>
          <a href="../FSharp.Net/index.htm">FSharp.Net</a>
      </li>
			<li>
          <a href="../FSharpx/index.htm">FSharpx</a>
      </li>
			<li>
          <a href="../FSharpx.Core/index.htm">FSharpx.Core</a>
      </li>
			<li>
          <a href="../FSharpx.DataStructures/index.htm">FSharpx.DataStructures</a>
      </li>
			<li>
          <a href="../FSharpx.Http/index.htm">FSharpx.Http</a>
      </li>
			<li>
          <a href="../FSharpx.Observable/index.htm">FSharpx.Observable</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders/index.htm">FSharpx.TypeProviders</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.AppSettings/index.htm">FSharpx.TypeProviders.AppSettings</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Documents/index.htm">FSharpx.TypeProviders.Documents</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Excel/index.htm">FSharpx.TypeProviders.Excel</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase/index.htm">FSharpx.TypeProviders.Freebase</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.DesignTime/index.htm">FSharpx.TypeProviders.Freebase.DesignTime</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.FreebaseRuntime/index.htm">FSharpx.TypeProviders.Freebase.FreebaseRuntime</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.FreebaseTypeExtender/index.htm">FSharpx.TypeProviders.Freebase.FreebaseTypeExtender</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Graph/index.htm">FSharpx.TypeProviders.Graph</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Machine/index.htm">FSharpx.TypeProviders.Machine</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Math/index.htm">FSharpx.TypeProviders.Math</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Regex/index.htm">FSharpx.TypeProviders.Regex</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Xaml/index.htm">FSharpx.TypeProviders.Xaml</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections/index.htm" class="current">Microsoft.FSharp.Collections</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections.Tagged/index.htm">Microsoft.FSharp.Collections.Tagged</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Control/index.htm">Microsoft.FSharp.Control</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Core/index.htm">Microsoft.FSharp.Core</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Core.CompilerServices/index.htm">Microsoft.FSharp.Core.CompilerServices</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Data.TypeProviders.DesignTime/index.htm">Microsoft.FSharp.Data.TypeProviders.DesignTime</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Data.UnitSystems.SI.UnitNames/index.htm">Microsoft.FSharp.Data.UnitSystems.SI.UnitNames</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq/index.htm">Microsoft.FSharp.Linq</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq.QueryRunExtensions/index.htm">Microsoft.FSharp.Linq.QueryRunExtensions</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq.RuntimeHelpers/index.htm">Microsoft.FSharp.Linq.RuntimeHelpers</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Math/index.htm">Microsoft.FSharp.Math</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Metadata/index.htm">Microsoft.FSharp.Metadata</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.NativeInterop/index.htm">Microsoft.FSharp.NativeInterop</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Quotations/index.htm">Microsoft.FSharp.Quotations</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Reflection/index.htm">Microsoft.FSharp.Reflection</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text/index.htm">Microsoft.FSharp.Text</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.Lexing/index.htm">Microsoft.FSharp.Text.Lexing</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.Parsing/index.htm">Microsoft.FSharp.Text.Parsing</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.StructuredFormat/index.htm">Microsoft.FSharp.Text.StructuredFormat</a>
      </li>
			<li>
          <a href="../Samples.FSharp.ProvidedTypes/index.htm">Samples.FSharp.ProvidedTypes</a>
      </li>
			<li>
          <a href="../Utilities.Caching/index.htm">Utilities.Caching</a>
      </li>
		</ul>
	</div>
</div><div id="types">
  <h2 class="fixed">Types in Microsoft.FSharp.Collections</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../Microsoft.FSharp.Collections/Array2DModule.htm">Array2DModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/Array3DModule.htm">Array3DModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/Array4DModule.htm">Array4DModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/ArrayModule.htm">ArrayModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/ComparisonIdentity.htm">ComparisonIdentity</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/FSharpMap`2.htm">FSharpMap&lt;TKey, TValue&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/HashIdentity.htm">HashIdentity</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/HashMultiMap`2.htm">HashMultiMap&lt;Key, Value&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/HashSet`1.htm">HashSet&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/LazyListModule.htm" class="current">LazyListModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/ListModule.htm">ListModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/MapModule.htm">MapModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/Parallel.htm">Parallel</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/PSeqModule.htm">PSeqModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm">ResizeArrayModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/SeqModule.htm">SeqModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/SetModule.htm">SetModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/Tags.htm">Tags</a>
        </li>
		</ul>
	</div>
</div>
    <div class="header">
		<p class="class"><strong>Type</strong> LazyListModule</p>
		<p><strong>Namespace</strong> Microsoft.FSharp.Collections</p>
	</div>
    <div class="sub-header">
		
		
			<h3 class="section">Methods</h3>
			<ul>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#append``1">append&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#combine``2">combine&lt;T1, T2&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#concat``1">concat&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#cons``1">cons&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#consDelayed``1">consDelayed&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#consf``1">consf&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#delayed``1">delayed&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#drop``1">drop&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#empty``1">empty&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#filter``1">filter&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#find``1">find&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#first``1">first&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#folds``2">folds&lt;State, T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#get``1">get&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#hd``1">hd&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#head``1">head&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#isEmpty``1">isEmpty&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#iter``1">iter&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#length``1">length&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#map``2">map&lt;T, U&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#map2``3">map2&lt;T1, T2, U&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#nonempty``1">nonempty&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#of_array``1">of_array&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#of_list``1">of_list&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#of_seq``1">of_seq&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#ofArray``1">ofArray&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#ofList``1">ofList&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#ofSeq``1">ofSeq&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#repeat``1">repeat&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#scan``2">scan&lt;State, T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#skip``1">skip&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#tail``1">tail&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#take``1">take&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#tl``1">tl&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#to_array``1">to_array&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#to_list``1">to_list&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#to_seq``1">to_seq&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#toArray``1">toArray&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#toList``1">toList&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#toSeq``1">toSeq&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#tryFind``1">tryFind&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#unfold``2">unfold&lt;State, T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/LazyListModule.htm#zip``2">zip&lt;T1, T2&gt;</a></li>
			</ul>
		
		
	</div>
	
	
	
	<h3 class="section">Public static methods</h3>
	
	<div id="append``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>append&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> l1, <a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> source)</h4>
		<div class="content">Return the list which contains on demand the elements of the first list followed
by the elements of the second list 



      
    </div>
	</div>
	<div id="combine``2" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>combine&lt;T1, T2&gt;</strong>(<a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> s1, <a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> s2)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="concat``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>concat&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> s1)</h4>
		<div class="content">Return the list which contains on demand the list of elements of the list of lazy lists. 



      
    </div>
	</div>
	<div id="cons``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>cons&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Collections.T">T</span> x, <a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> l)</h4>
		<div class="content">Return a new list which contains the given item followed by the
given list. 



      
    </div>
	</div>
	<div id="consDelayed``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>consDelayed&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Collections.T">T</span> x, <a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> l)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="consf``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>consf&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Collections.T">T</span> x, <a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> l)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="delayed``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>delayed&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> f)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="drop``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>drop&lt;T&gt;</strong>(<span title="System.int">int</span> count, <a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> source)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="empty``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>empty&lt;T&gt;</strong>()</h4>
		<div class="content">Evaluates to the list that contains no items 



      
    </div>
	</div>
	<div id="filter``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>filter&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> predicate, <a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> source)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="find``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T">T</span> <strong>find&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> predicate, <a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> source)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="first``1" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>first&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> predicate, <a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> source)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="folds``2" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>folds&lt;State, T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> folder, <span title="Microsoft.FSharp.Collections.State">State</span> acc, <a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> source)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="get``1" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>get&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> x)</h4>
		<div class="content">Get the first cell of the list. 



      
    </div>
	</div>
	<div id="hd``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T">T</span> <strong>hd&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> s)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="head``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T">T</span> <strong>head&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> s)</h4>
		<div class="content">Return the first element of the list.  Forces the evaluation of
the first cell of the list if it is not already evaluated. 



      
    </div>
	</div>
	<div id="isEmpty``1" class="method">
		<h4><span title="System.bool">bool</span> <strong>isEmpty&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> s)</h4>
		<div class="content">Test if a list is empty.  Forces the evaluation of
the first element of the stream if it is not already evaluated. 



      
    </div>
	</div>
	<div id="iter``1" class="method">
		<h4><span title="System.void">void</span> <strong>iter&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> action, <a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> list)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="length``1" class="method">
		<h4><span title="System.int">int</span> <strong>length&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> list)</h4>
		<div class="content">Return the length of the list 



      
    </div>
	</div>
	<div id="map``2" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>map&lt;T, U&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> mapping, <a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> source)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="map2``3" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>map2&lt;T1, T2, U&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> mapping, <a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> s1, <a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> s2)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="nonempty``1" class="method">
		<h4><span title="System.bool">bool</span> <strong>nonempty&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> s)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="of_array``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>of_array&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Collections.T[]">T[]</span> l)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="of_list``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>of_list&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> l)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="of_seq``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>of_seq&lt;T&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> l)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="ofArray``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>ofArray&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Collections.T[]">T[]</span> a)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="ofList``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>ofList&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> l)</h4>
		<div class="content">Build a collection from the given list. This function will eagerly evaluate all of the
list (and thus may not terminate). 



      
    </div>
	</div>
	<div id="ofSeq``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>ofSeq&lt;T&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> c)</h4>
		<div class="content">Build a new collection from the given enumerable object 



      
    </div>
	</div>
	<div id="repeat``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>repeat&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Collections.T">T</span> x)</h4>
		<div class="content">Return the list which on consumption will consist of an infinite sequence of
the given item 



      
    </div>
	</div>
	<div id="scan``2" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>scan&lt;State, T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> folder, <span title="Microsoft.FSharp.Collections.State">State</span> acc, <a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> source)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="skip``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>skip&lt;T&gt;</strong>(<span title="System.int">int</span> count, <a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> source)</h4>
		<div class="content">Return the list which on consumption will skip the first 'n' elements of
the input list. 



      
    </div>
	</div>
	<div id="tail``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>tail&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> s)</h4>
		<div class="content">Return the list corresponding to the remaining items in the sequence.
Forces the evaluation of the first cell of the list if it is not already evaluated. 



      
    </div>
	</div>
	<div id="take``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>take&lt;T&gt;</strong>(<span title="System.int">int</span> count, <a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> source)</h4>
		<div class="content">Return the list which on consumption will consist of at most 'n' elements of
the input list. 



      
    </div>
	</div>
	<div id="tl``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>tl&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> s)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="to_array``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T[]">T[]</span> <strong>to_array&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> l)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="to_list``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> <strong>to_list&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> l)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="to_seq``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> <strong>to_seq&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> l)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="toArray``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T[]">T[]</span> <strong>toArray&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> s)</h4>
		<div class="content">Build an array from the given collection 



      
    </div>
	</div>
	<div id="toList``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> <strong>toList&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> s)</h4>
		<div class="content">Build a non-lazy list from the given collection. This function will eagerly evaluate all of the
list (and thus may not terminate). 



      
    </div>
	</div>
	<div id="toSeq``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> <strong>toSeq&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> s)</h4>
		<div class="content">Return a view of the collection as an enumerable object 



      
    </div>
	</div>
	<div id="tryFind``1" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>tryFind&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> predicate, <a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> source)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="unfold``2" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>unfold&lt;State, T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> f, <span title="Microsoft.FSharp.Collections.State">State</span> z)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="zip``2" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> <strong>zip&lt;T1, T2&gt;</strong>(<a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> s1, <a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a> s2)</h4>
		<div class="content">Return the list which contains on demand the pair of elements of the first and second list 



      
    </div>
	</div>
	
	<div id="footer">
  <p>Based on v4.3.0.0 of FSharp.Core.dll (Microsoft&#174; Visual Studio&#174; 2012)</p>
  <p>Generated by <a href="http://docu.jagregory.com">docu</a></p>
</div>
  </body>
</html>