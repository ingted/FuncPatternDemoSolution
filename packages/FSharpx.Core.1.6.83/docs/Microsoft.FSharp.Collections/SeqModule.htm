<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <title>SeqModule - Microsoft&#174; Visual Studio&#174; 2012 Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body><div id="namespaces">
	<h2 class="fixed">Namespaces</h2>
	<div class="scroll">
		<ul>
			<li>
          <a href="../FSharp.Control/index.htm">FSharp.Control</a>
      </li>
			<li>
          <a href="../FSharp.IO/index.htm">FSharp.IO</a>
      </li>
			<li>
          <a href="../FSharp.Net/index.htm">FSharp.Net</a>
      </li>
			<li>
          <a href="../FSharpx/index.htm">FSharpx</a>
      </li>
			<li>
          <a href="../FSharpx.Core/index.htm">FSharpx.Core</a>
      </li>
			<li>
          <a href="../FSharpx.DataStructures/index.htm">FSharpx.DataStructures</a>
      </li>
			<li>
          <a href="../FSharpx.Http/index.htm">FSharpx.Http</a>
      </li>
			<li>
          <a href="../FSharpx.Observable/index.htm">FSharpx.Observable</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders/index.htm">FSharpx.TypeProviders</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.AppSettings/index.htm">FSharpx.TypeProviders.AppSettings</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Documents/index.htm">FSharpx.TypeProviders.Documents</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Excel/index.htm">FSharpx.TypeProviders.Excel</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase/index.htm">FSharpx.TypeProviders.Freebase</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.DesignTime/index.htm">FSharpx.TypeProviders.Freebase.DesignTime</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.FreebaseRuntime/index.htm">FSharpx.TypeProviders.Freebase.FreebaseRuntime</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.FreebaseTypeExtender/index.htm">FSharpx.TypeProviders.Freebase.FreebaseTypeExtender</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Graph/index.htm">FSharpx.TypeProviders.Graph</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Machine/index.htm">FSharpx.TypeProviders.Machine</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Math/index.htm">FSharpx.TypeProviders.Math</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Regex/index.htm">FSharpx.TypeProviders.Regex</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Xaml/index.htm">FSharpx.TypeProviders.Xaml</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections/index.htm" class="current">Microsoft.FSharp.Collections</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections.Tagged/index.htm">Microsoft.FSharp.Collections.Tagged</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Control/index.htm">Microsoft.FSharp.Control</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Core/index.htm">Microsoft.FSharp.Core</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Core.CompilerServices/index.htm">Microsoft.FSharp.Core.CompilerServices</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Data.TypeProviders.DesignTime/index.htm">Microsoft.FSharp.Data.TypeProviders.DesignTime</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Data.UnitSystems.SI.UnitNames/index.htm">Microsoft.FSharp.Data.UnitSystems.SI.UnitNames</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq/index.htm">Microsoft.FSharp.Linq</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq.QueryRunExtensions/index.htm">Microsoft.FSharp.Linq.QueryRunExtensions</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq.RuntimeHelpers/index.htm">Microsoft.FSharp.Linq.RuntimeHelpers</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Math/index.htm">Microsoft.FSharp.Math</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Metadata/index.htm">Microsoft.FSharp.Metadata</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.NativeInterop/index.htm">Microsoft.FSharp.NativeInterop</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Quotations/index.htm">Microsoft.FSharp.Quotations</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Reflection/index.htm">Microsoft.FSharp.Reflection</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text/index.htm">Microsoft.FSharp.Text</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.Lexing/index.htm">Microsoft.FSharp.Text.Lexing</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.Parsing/index.htm">Microsoft.FSharp.Text.Parsing</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.StructuredFormat/index.htm">Microsoft.FSharp.Text.StructuredFormat</a>
      </li>
			<li>
          <a href="../Samples.FSharp.ProvidedTypes/index.htm">Samples.FSharp.ProvidedTypes</a>
      </li>
			<li>
          <a href="../Utilities.Caching/index.htm">Utilities.Caching</a>
      </li>
		</ul>
	</div>
</div><div id="types">
  <h2 class="fixed">Types in Microsoft.FSharp.Collections</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../Microsoft.FSharp.Collections/Array2DModule.htm">Array2DModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/Array3DModule.htm">Array3DModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/Array4DModule.htm">Array4DModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/ArrayModule.htm">ArrayModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/ComparisonIdentity.htm">ComparisonIdentity</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/FSharpMap`2.htm">FSharpMap&lt;TKey, TValue&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/HashIdentity.htm">HashIdentity</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/HashMultiMap`2.htm">HashMultiMap&lt;Key, Value&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/HashSet`1.htm">HashSet&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/LazyListModule.htm">LazyListModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/ListModule.htm">ListModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/MapModule.htm">MapModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/Parallel.htm">Parallel</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/PSeqModule.htm">PSeqModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm">ResizeArrayModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/SeqModule.htm" class="current">SeqModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/SetModule.htm">SetModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/Tags.htm">Tags</a>
        </li>
		</ul>
	</div>
</div>
    <div class="header">
		<p class="class"><strong>Type</strong> SeqModule</p>
		<p><strong>Namespace</strong> Microsoft.FSharp.Collections</p>
	</div>
    <div class="sub-header">
			<div id="summary">Basic operations on IEnumerables. 
			</div>
		
		
			<h3 class="section">Methods</h3>
			<ul>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Append``1">Append&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Average``1">Average&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#AverageBy``2">AverageBy&lt;T, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Cache``1">Cache&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Cast``1">Cast&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Choose``2">Choose&lt;T, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Collect``3">Collect&lt;T, TCollection, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#CompareWith``1">CompareWith&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Concat``2">Concat&lt;TCollection, T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#CountBy``2">CountBy&lt;T, TKey&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Distinct``1">Distinct&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#DistinctBy``2">DistinctBy&lt;T, TKey&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#ExactlyOne``1">ExactlyOne&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Exists``1">Exists&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Exists2``2">Exists2&lt;T1, T2&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Filter``1">Filter&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Find``1">Find&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#FindIndex``1">FindIndex&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Fold``2">Fold&lt;T, TState&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#ForAll``1">ForAll&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#ForAll2``2">ForAll2&lt;T1, T2&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Get``1">Get&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#GroupBy``2">GroupBy&lt;T, TKey&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Head``1">Head&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#InitializeInfinite``1">InitializeInfinite&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#IsEmpty``1">IsEmpty&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Iterate``1">Iterate&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Iterate2``2">Iterate2&lt;T1, T2&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#IterateIndexed``1">IterateIndexed&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Last``1">Last&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Length``1">Length&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Map``2">Map&lt;T, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Map2``3">Map2&lt;T1, T2, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#MapIndexed``2">MapIndexed&lt;T, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Max``1">Max&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#MaxBy``2">MaxBy&lt;T, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Min``1">Min&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#MinBy``2">MinBy&lt;T, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Pairwise``1">Pairwise&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Pick``2">Pick&lt;T, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#ReadOnly``1">ReadOnly&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Reduce``1">Reduce&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Scan``2">Scan&lt;T, TState&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Skip``1">Skip&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#SkipWhile``1">SkipWhile&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Sort``1">Sort&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#SortBy``2">SortBy&lt;T, TKey&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Sum``1">Sum&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#SumBy``2">SumBy&lt;T, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Take``1">Take&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#TakeWhile``1">TakeWhile&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#ToArray``1">ToArray&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#ToList``1">ToList&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Truncate``1">Truncate&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#TryFind``1">TryFind&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#TryFindIndex``1">TryFindIndex&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#TryPick``2">TryPick&lt;T, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Unfold``2">Unfold&lt;TState, T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Where``1">Where&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Windowed``1">Windowed&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Zip``2">Zip&lt;T1, T2&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SeqModule.htm#Zip3``3">Zip3&lt;T1, T2, T3&gt;</a></li>
			</ul>
		
		
	</div>
	
	
	
	<h3 class="section">Public static methods</h3>
	
	<div id="Append``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> <strong>Append&lt;T&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source1, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source2)</h4>
		<div class="content">Wraps the two given enumerations as a single concatenated
enumeration. <blockquote class="remarks">
  The returned sequence may be passed between threads safely. However,
individual IEnumerator values generated from the returned sequence should not be accessed
concurrently. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source1</h6>
          <p class="comments">The first sequence. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source2</h6>
          <p class="comments">The second sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code></h6>
        <p>The result sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="Average``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T">T</span> <strong>Average&lt;T&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns the average of the elements in the sequence. <blockquote class="remarks">
  The elements are averaged using the  <code>+</code>  operator,  <code>DivideByInt</code>  method and  <code>Zero</code>  property
associated with the element type. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.T">T</span></code></h6>
        <p>The average. </p>
      </div>
      
    </div>
	</div>
	<div id="AverageBy``2" class="method">
		<h4><span title="Microsoft.FSharp.Collections.TResult">TResult</span> <strong>AverageBy&lt;T, TResult&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> projection, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns the average of the results generated by applying the function to each element
of the sequence. <blockquote class="remarks">
  The elements are averaged using the  <code>+</code>  operator,  <code>DivideByInt</code>  method and  <code>Zero</code>  property
associated with the generated type. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> projection</h6>
          <p class="comments">A function applied to transform each element of the sequence. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.TResult">TResult</span></code></h6>
        <p>The average. </p>
      </div>
      
    </div>
	</div>
	<div id="Cache``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> <strong>Cache&lt;T&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns a sequence that corresponds to a cached version of the input sequence.
This result sequence will have the same elements as the input sequence. The result
can be enumerated multiple times. The input sequence will be enumerated at most
once and only as far as is necessary.  Caching a sequence is typically useful when repeatedly
evaluating items in the original sequence is computationally expensive or if
iterating the sequence causes side-effects that the user does not want to be
repeated multiple times.
Enumeration of the result sequence is thread safe in the sense that multiple independent IEnumerator
values may be used simultaneously from different threads (accesses to
the internal lookaside table are thread safe). Each individual IEnumerator
is not typically thread safe and should not be accessed concurrently. <blockquote class="remarks">
  Once enumeration of the input sequence has started,
it's enumerator will be kept live by this object until the enumeration has completed.
At that point, the enumerator will be disposed.
The enumerator may be disposed and underlying cache storage released by
converting the returned sequence object to type IDisposable, and calling the Dispose method
on this object. The sequence object may then be re-enumerated and a fresh enumerator will
be used. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code></h6>
        <p>The result sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="Cast``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> <strong>Cast&lt;T&gt;</strong>(<span title="System.Collections.IEnumerable">IEnumerable</span> source)</h4>
		<div class="content">Wraps a loosely-typed System.Collections sequence as a typed sequence. <blockquote class="remarks">
  The use of this function usually requires a type annotation.
An incorrect type annotation may result in runtime type
errors.
Individual IEnumerator values generated from the returned sequence should not be accessed concurrently. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.IEnumerable">IEnumerable</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code></h6>
        <p>The result sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="Choose``2" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<TResult>">IEnumerable&lt;TResult&gt;</span> <strong>Choose&lt;T, TResult&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> chooser, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Applies the given function to each element of the list. Return
the list comprised of the results "x" for each element where
the function returns Some(x). <blockquote class="remarks">
  The returned sequence may be passed between threads safely. However,
individual IEnumerator values generated from the returned sequence should not
be accessed concurrently. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> chooser</h6>
          <p class="comments">A function to transform items of type T into options of type U. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence of type T. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<TResult>">IEnumerable&lt;TResult&gt;</span></code></h6>
        <p>The result sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="Collect``3" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<TResult>">IEnumerable&lt;TResult&gt;</span> <strong>Collect&lt;T, TCollection, TResult&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> mapping, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Applies the given function to each element of the sequence and concatenates all the
results. <blockquote class="remarks">
  Remember sequence is lazy, effects are delayed until it is enumerated. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> mapping</h6>
          <p class="comments">A function to transform elements of the input sequence into the sequences
that will then be concatenated. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<TResult>">IEnumerable&lt;TResult&gt;</span></code></h6>
        <p>The result sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="CompareWith``1" class="method">
		<h4><span title="System.int">int</span> <strong>CompareWith&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> comparer, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source1, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source2)</h4>
		<div class="content">Compares two sequences using the given comparison function, element by element.
Returns the first non-zero result from the comparison function.  If the end of a sequence
is reached it returns a -1 if the first sequence is shorter and a 1 if the second sequence
is shorter. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> comparer</h6>
          <p class="comments">A function that takes an element from each sequence and returns an int.
If it evaluates to a non-zero value iteration is stopped and that value is returned. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source1</h6>
          <p class="comments">The first input sequence. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source2</h6>
          <p class="comments">The second input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.int">int</span></code></h6>
        <p>The first non-zero value from the comparison function. </p>
      </div>
      
    </div>
	</div>
	<div id="Concat``2" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> <strong>Concat&lt;TCollection, T&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<TCollection>">IEnumerable&lt;TCollection&gt;</span> sources)</h4>
		<div class="content">Combines the given enumeration-of-enumerations as a single concatenated
enumeration. <blockquote class="remarks">
  The returned sequence may be passed between threads safely. However,
individual IEnumerator values generated from the returned sequence should not be accessed concurrently. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<TCollection>">IEnumerable&lt;TCollection&gt;</span></code> sources</h6>
          <p class="comments">The input enumeration-of-enumerations. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code></h6>
        <p>The result sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="CountBy``2" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<Tuple<TKey, int>>">IEnumerable&lt;Tuple&lt;TKey, int&gt;&gt;</span> <strong>CountBy&lt;T, TKey&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> projection, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Applies a key-generating function to each element of a sequence and return a sequence yielding unique
keys and their number of occurrences in the original sequence. <blockquote class="remarks">
  Note that this function returns a sequence that digests the whole initial sequence as soon as
that sequence is iterated. As a result this function should not be used with
large or infinite sequences. The function makes no assumption on the ordering of the original
sequence. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> projection</h6>
          <p class="comments">A function transforming each item of input sequence into a key to be
compared against the others. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<Tuple<TKey, int>>">IEnumerable&lt;Tuple&lt;TKey, int&gt;&gt;</span></code></h6>
        <p>The result sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="Distinct``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> <strong>Distinct&lt;T&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns a sequence that contains no duplicate entries according to generic hash and
equality comparisons on the entries.
If an element occurs multiple times in the sequence then the later occurrences are discarded. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code></h6>
        <p>The result sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="DistinctBy``2" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> <strong>DistinctBy&lt;T, TKey&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> projection, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns a sequence that contains no duplicate entries according to the
generic hash and equality comparisons on the keys returned by the given key-generating function.
If an element occurs multiple times in the sequence then the later occurrences are discarded. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> projection</h6>
          <p class="comments">A function transforming the sequence items into comparable keys. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code></h6>
        <p>The result sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="ExactlyOne``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T">T</span> <strong>ExactlyOne&lt;T&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns the only element of the sequence. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.T">T</span></code></h6>
        <p>The last element of the sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="Exists``1" class="method">
		<h4><span title="System.bool">bool</span> <strong>Exists&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> predicate, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Tests if any element of the sequence satisfies the given predicate. <blockquote class="remarks">
  The predicate is applied to the elements of the input sequence. If any application
returns true then the overall result is true and no further elements are tested.
Otherwise, false is returned. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> predicate</h6>
          <p class="comments">A function to test each item of the input sequence. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p>True if any result from the predicate is true; false otherwise. </p>
      </div>
      
    </div>
	</div>
	<div id="Exists2``2" class="method">
		<h4><span title="System.bool">bool</span> <strong>Exists2&lt;T1, T2&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> predicate, <span title="System.Collections.Generic.IEnumerable<T1>">IEnumerable&lt;T1&gt;</span> source1, <span title="System.Collections.Generic.IEnumerable<T2>">IEnumerable&lt;T2&gt;</span> source2)</h4>
		<div class="content">Tests if any pair of corresponding elements of the input sequences satisfies the given predicate. <blockquote class="remarks">
  The predicate is applied to matching elements in the two sequences up to the lesser of the
two lengths of the collections. If any application returns true then the overall result is
true and no further elements are tested. Otherwise, false is returned. If one sequence is shorter than
the other then the remaining elements of the longer sequence are ignored. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> predicate</h6>
          <p class="comments">A function to test each pair of items from the input sequences. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T1>">IEnumerable&lt;T1&gt;</span></code> source1</h6>
          <p class="comments">The first input sequence. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T2>">IEnumerable&lt;T2&gt;</span></code> source2</h6>
          <p class="comments">The second input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p>True if any result from the predicate is true; false otherwise. </p>
      </div>
      
    </div>
	</div>
	<div id="Filter``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> <strong>Filter&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> predicate, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns a new collection containing only the elements of the collection
for which the given predicate returns "true". This is a synonym for Seq.where. <blockquote class="remarks">
  The returned sequence may be passed between threads safely. However,
individual IEnumerator values generated from the returned sequence should not be accessed concurrently.
Remember sequence is lazy, effects are delayed until it is enumerated. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> predicate</h6>
          <p class="comments">A function to test whether each item in the input sequence should be included in the output. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code></h6>
        <p>The result sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="Find``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T">T</span> <strong>Find&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> predicate, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns the first element for which the given function returns  <code>true</code>. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> predicate</h6>
          <p class="comments">A function to test whether an item in the sequence should be returned. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.T">T</span></code></h6>
        <p>The first element for which the predicate returns  <code>true</code>. </p>
      </div>
      
    </div>
	</div>
	<div id="FindIndex``1" class="method">
		<h4><span title="System.int">int</span> <strong>FindIndex&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> predicate, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns the index of the first element for which the given function returns  <code>true</code>. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> predicate</h6>
          <p class="comments">A function to test whether the index of a particular element should be returned. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.int">int</span></code></h6>
        <p>The index of the first element for which the predicate returns  <code>true</code>. </p>
      </div>
      
    </div>
	</div>
	<div id="Fold``2" class="method">
		<h4><span title="Microsoft.FSharp.Collections.TState">TState</span> <strong>Fold&lt;T, TState&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> folder, <span title="Microsoft.FSharp.Collections.TState">TState</span> state, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Applies a function to each element of the collection, threading an accumulator argument
through the computation. If the input function is  <code>f</code>  and the elements are  <code>i0...iN</code> then computes  <code>f (... (f s i0)...) iN</code> 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> folder</h6>
          <p class="comments">A function that updates the state with each element from the sequence. </p>
          <h6><code><span title="Microsoft.FSharp.Collections.TState">TState</span></code> state</h6>
          <p class="comments">The initial state. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.TState">TState</span></code></h6>
        <p>The state object after the folding function is applied to each element of the sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="ForAll``1" class="method">
		<h4><span title="System.bool">bool</span> <strong>ForAll&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> predicate, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Tests if all elements of the sequence satisfy the given predicate. <blockquote class="remarks">
  The predicate is applied to the elements of the input sequence. If any application
returns false then the overall result is false and no further elements are tested.
Otherwise, true is returned. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> predicate</h6>
          <p class="comments">A function to test an element of the input sequence. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p>True if every element of the sequence satisfies the predicate; false otherwise. </p>
      </div>
      
    </div>
	</div>
	<div id="ForAll2``2" class="method">
		<h4><span title="System.bool">bool</span> <strong>ForAll2&lt;T1, T2&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> predicate, <span title="System.Collections.Generic.IEnumerable<T1>">IEnumerable&lt;T1&gt;</span> source1, <span title="System.Collections.Generic.IEnumerable<T2>">IEnumerable&lt;T2&gt;</span> source2)</h4>
		<div class="content">Tests the all pairs of elements drawn from the two sequences satisfy the
given predicate. If one sequence is shorter than
the other then the remaining elements of the longer sequence are ignored. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> predicate</h6>
          <p class="comments">A function to test pairs of elements from the input sequences. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T1>">IEnumerable&lt;T1&gt;</span></code> source1</h6>
          <p class="comments">The first input sequence. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T2>">IEnumerable&lt;T2&gt;</span></code> source2</h6>
          <p class="comments">The second input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p>True if all pairs satisfy the predicate; false otherwise. </p>
      </div>
      
    </div>
	</div>
	<div id="Get``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T">T</span> <strong>Get&lt;T&gt;</strong>(<span title="System.int">int</span> index, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Computes the nth element in the collection. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.int">int</span></code> index</h6>
          <p class="comments">The index of element to retrieve. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.T">T</span></code></h6>
        <p>The nth element of the sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="GroupBy``2" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<Tuple<TKey, IEnumerable<T>>>">IEnumerable&lt;Tuple&lt;TKey, IEnumerable&lt;T&gt;&gt;&gt;</span> <strong>GroupBy&lt;T, TKey&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> projection, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Applies a key-generating function to each element of a sequence and yields a sequence of
unique keys. Each unique key contains a sequence of all elements that match
to this key. <blockquote class="remarks">
  This function returns a sequence that digests the whole initial sequence as soon as
that sequence is iterated. As a result this function should not be used with
large or infinite sequences. The function makes no assumption on the ordering of the original
sequence. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> projection</h6>
          <p class="comments">A function that transforms an element of the sequence into a comparable key. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<Tuple<TKey, IEnumerable<T>>>">IEnumerable&lt;Tuple&lt;TKey, IEnumerable&lt;T&gt;&gt;&gt;</span></code></h6>
        <p>The result sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="Head``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T">T</span> <strong>Head&lt;T&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns the first element of the sequence. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.T">T</span></code></h6>
        <p>The first element of the sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="InitializeInfinite``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> <strong>InitializeInfinite&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> initializer)</h4>
		<div class="content">Generates a new sequence which, when iterated, will return successive
elements by calling the given function.  The results of calling the function
will not be saved, that is the function will be reapplied as necessary to
regenerate the elements.  The function is passed the index of the item being
generated. <blockquote class="remarks">
  The returned sequence may be passed between threads safely. However,
individual IEnumerator values generated from the returned sequence should not be accessed concurrently.
Iteration can continue up to  <code>Int32.MaxValue</code>. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> initializer</h6>
          <p class="comments">A function that generates an item in the sequence from a given index. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code></h6>
        <p>The result sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="IsEmpty``1" class="method">
		<h4><span title="System.bool">bool</span> <strong>IsEmpty&lt;T&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns true if the sequence contains no elements, false otherwise. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p>True if the sequence is empty; false otherwise. </p>
      </div>
      
    </div>
	</div>
	<div id="Iterate``1" class="method">
		<h4><span title="System.void">void</span> <strong>Iterate&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> action, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Applies the given function to each element of the collection. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> action</h6>
          <p class="comments">A function to apply to each element of the sequence. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      
    </div>
	</div>
	<div id="Iterate2``2" class="method">
		<h4><span title="System.void">void</span> <strong>Iterate2&lt;T1, T2&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> action, <span title="System.Collections.Generic.IEnumerable<T1>">IEnumerable&lt;T1&gt;</span> source1, <span title="System.Collections.Generic.IEnumerable<T2>">IEnumerable&lt;T2&gt;</span> source2)</h4>
		<div class="content">Applies the given function to two collections simultaneously. If one sequence is shorter than
the other then the remaining elements of the longer sequence are ignored. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> action</h6>
          <p class="comments">A function to apply to each pair of elements from the input sequences. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T1>">IEnumerable&lt;T1&gt;</span></code> source1</h6>
          <p class="comments">The first input sequence. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T2>">IEnumerable&lt;T2&gt;</span></code> source2</h6>
          <p class="comments">The second input sequence. </p>
      </div>

      
    </div>
	</div>
	<div id="IterateIndexed``1" class="method">
		<h4><span title="System.void">void</span> <strong>IterateIndexed&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> action, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Applies the given function to each element of the collection. The integer passed to the
function indicates the index of element. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> action</h6>
          <p class="comments">A function to apply to each element of the sequence that can also access the current index. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      
    </div>
	</div>
	<div id="Last``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T">T</span> <strong>Last&lt;T&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns the last element of the sequence. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.T">T</span></code></h6>
        <p>The last element of the sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="Length``1" class="method">
		<h4><span title="System.int">int</span> <strong>Length&lt;T&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns the length of the sequence 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.int">int</span></code></h6>
        <p>The length of the sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="Map``2" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<TResult>">IEnumerable&lt;TResult&gt;</span> <strong>Map&lt;T, TResult&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> mapping, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Builds a new collection whose elements are the results of applying the given function
to each of the elements of the collection.  The given function will be applied
as elements are demanded using the  <code>MoveNext</code>  method on enumerators retrieved from the
object. <blockquote class="remarks">
  The returned sequence may be passed between threads safely. However,
individual IEnumerator values generated from the returned sequence should not be accessed concurrently. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> mapping</h6>
          <p class="comments">A function to transform items from the input sequence. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<TResult>">IEnumerable&lt;TResult&gt;</span></code></h6>
        <p>The result sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="Map2``3" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<TResult>">IEnumerable&lt;TResult&gt;</span> <strong>Map2&lt;T1, T2, TResult&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> mapping, <span title="System.Collections.Generic.IEnumerable<T1>">IEnumerable&lt;T1&gt;</span> source1, <span title="System.Collections.Generic.IEnumerable<T2>">IEnumerable&lt;T2&gt;</span> source2)</h4>
		<div class="content">Builds a new collection whose elements are the results of applying the given function
to the corresponding pairs of elements from the two sequences. If one input sequence is shorter than
the other then the remaining elements of the longer sequence are ignored. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> mapping</h6>
          <p class="comments">A function to transform pairs of items from the input sequences. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T1>">IEnumerable&lt;T1&gt;</span></code> source1</h6>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T2>">IEnumerable&lt;T2&gt;</span></code> source2</h6>
          <p class="comments">The second input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<TResult>">IEnumerable&lt;TResult&gt;</span></code></h6>
        <p>The result sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="MapIndexed``2" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<TResult>">IEnumerable&lt;TResult&gt;</span> <strong>MapIndexed&lt;T, TResult&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> mapping, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Builds a new collection whose elements are the results of applying the given function
to each of the elements of the collection. The integer index passed to the
function indicates the index (from 0) of element being transformed. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> mapping</h6>
          <p class="comments">A function to transform items from the input sequence that also supplies the current index. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<TResult>">IEnumerable&lt;TResult&gt;</span></code></h6>
        <p>The result sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="Max``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T">T</span> <strong>Max&lt;T&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns the greatest of all elements of the sequence, compared via Operators.max 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.T">T</span></code></h6>
        <p>The largest element of the sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="MaxBy``2" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T">T</span> <strong>MaxBy&lt;T, TResult&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> projection, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns the greatest of all elements of the sequence, compared via Operators.max on the function result. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> projection</h6>
          <p class="comments">A function to transform items from the input sequence into comparable keys. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.T">T</span></code></h6>
        <p>The largest element of the sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="Min``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T">T</span> <strong>Min&lt;T&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns the lowest of all elements of the sequence, compared via  <code>Operators.min</code>. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.T">T</span></code></h6>
        <p>The smallest element of the sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="MinBy``2" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T">T</span> <strong>MinBy&lt;T, TResult&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> projection, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns the lowest of all elements of the sequence, compared via Operators.min on the function result. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> projection</h6>
          <p class="comments">A function to transform items from the input sequence into comparable keys. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.T">T</span></code></h6>
        <p>The smallest element of the sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="Pairwise``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<Tuple<T, T>>">IEnumerable&lt;Tuple&lt;T, T&gt;&gt;</span> <strong>Pairwise&lt;T&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns a sequence of each element in the input sequence and its predecessor, with the
exception of the first element which is only returned as the predecessor of the second element. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<Tuple<T, T>>">IEnumerable&lt;Tuple&lt;T, T&gt;&gt;</span></code></h6>
        <p>The result sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="Pick``2" class="method">
		<h4><span title="Microsoft.FSharp.Collections.TResult">TResult</span> <strong>Pick&lt;T, TResult&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> chooser, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Applies the given function to successive elements, returning the first <code>x</code>  where the function returns "Some(x)". 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> chooser</h6>
          <p class="comments">A function to transform each item of the input sequence into an option of the output type. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.TResult">TResult</span></code></h6>
        <p>The selected element. </p>
      </div>
      
    </div>
	</div>
	<div id="ReadOnly``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> <strong>ReadOnly&lt;T&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Builds a new sequence object that delegates to the given sequence object. This ensures
the original sequence cannot be rediscovered and mutated by a type cast. For example,
if given an array the returned sequence will return the elements of the array, but
you cannot cast the returned sequence object to an array. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code></h6>
        <p>The result sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="Reduce``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T">T</span> <strong>Reduce&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> reduction, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Applies a function to each element of the sequence, threading an accumulator argument
through the computation. Begin by applying the function to the first two elements.
Then feed this result into the function along with the third element and so on.
Return the final result. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> reduction</h6>
          <p class="comments">A function that takes in the current accumulated result and the next
element of the sequence to produce the next accumulated result. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.T">T</span></code></h6>
        <p>The final result of the reduction function. </p>
      </div>
      
    </div>
	</div>
	<div id="Scan``2" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<TState>">IEnumerable&lt;TState&gt;</span> <strong>Scan&lt;T, TState&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> folder, <span title="Microsoft.FSharp.Collections.TState">TState</span> state, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Like fold, but computes on-demand and returns the sequence of intermediary and final results. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> folder</h6>
          <p class="comments">A function that updates the state with each element from the sequence. </p>
          <h6><code><span title="Microsoft.FSharp.Collections.TState">TState</span></code> state</h6>
          <p class="comments">The initial state. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<TState>">IEnumerable&lt;TState&gt;</span></code></h6>
        <p>The resulting sequence of computed states. </p>
      </div>
      
    </div>
	</div>
	<div id="Skip``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> <strong>Skip&lt;T&gt;</strong>(<span title="System.int">int</span> count, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns a sequence that skips N elements of the underlying sequence and then yields the
remaining elements of the sequence. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.int">int</span></code> count</h6>
          <p class="comments">The number of items to skip. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code></h6>
        <p>The result sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="SkipWhile``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> <strong>SkipWhile&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> predicate, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns a sequence that, when iterated, skips elements of the underlying sequence while the
given predicate returns  <code>true</code> , and then yields the remaining elements of the sequence. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> predicate</h6>
          <p class="comments">A function that evaluates an element of the sequence to a boolean value. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code></h6>
        <p>The result sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="Sort``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> <strong>Sort&lt;T&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Yields a sequence ordered by keys. <blockquote class="remarks">
  This function returns a sequence that digests the whole initial sequence as soon as
that sequence is iterated. As a result this function should not be used with
large or infinite sequences. The function makes no assumption on the ordering of the original
sequence.
This is a stable sort, that is the original order of equal elements is preserved. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code></h6>
        <p>The result sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="SortBy``2" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> <strong>SortBy&lt;T, TKey&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> projection, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Applies a key-generating function to each element of a sequence and yield a sequence ordered
by keys.  The keys are compared using generic comparison as implemented by  <code>Operators.compare</code>. <blockquote class="remarks">
  This function returns a sequence that digests the whole initial sequence as soon as
that sequence is iterated. As a result this function should not be used with
large or infinite sequences. The function makes no assumption on the ordering of the original
sequence.
This is a stable sort, that is the original order of equal elements is preserved. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> projection</h6>
          <p class="comments">A function to transform items of the input sequence into comparable keys. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code></h6>
        <p>The result sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="Sum``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T">T</span> <strong>Sum&lt;T&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns the sum of the elements in the sequence. <blockquote class="remarks">
  The elements are summed using the  <code>+</code>  operator and  <code>Zero</code>  property associated with the generated type. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.T">T</span></code></h6>
        <p>The computed sum. </p>
      </div>
      
    </div>
	</div>
	<div id="SumBy``2" class="method">
		<h4><span title="Microsoft.FSharp.Collections.TResult">TResult</span> <strong>SumBy&lt;T, TResult&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> projection, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns the sum of the results generated by applying the function to each element of the sequence. <blockquote class="remarks">
  The generated elements are summed using the  <code>+</code>  operator and  <code>Zero</code>  property associated with the generated type. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> projection</h6>
          <p class="comments">A function to transform items from the input sequence into the type that will be summed. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.TResult">TResult</span></code></h6>
        <p>The computed sum. </p>
      </div>
      
    </div>
	</div>
	<div id="Take``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> <strong>Take&lt;T&gt;</strong>(<span title="System.int">int</span> count, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns the first N elements of the sequence. <blockquote class="remarks">
  Throws  <code>InvalidOperationException</code> if the count exceeds the number of elements in the sequence.  <code>Seq.truncate</code> returns as many items as the sequence contains instead of throwing an exception. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.int">int</span></code> count</h6>
          <p class="comments">The number of items to take. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code></h6>
        <p>The result sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="TakeWhile``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> <strong>TakeWhile&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> predicate, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns a sequence that, when iterated, yields elements of the underlying sequence while the
given predicate returns  <code>true</code> , and then returns no further elements. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> predicate</h6>
          <p class="comments">A function that evaluates to false when no more items should be returned. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code></h6>
        <p>The result sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="ToArray``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T[]">T[]</span> <strong>ToArray&lt;T&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Builds an array from the given collection. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.T[]">T[]</span></code></h6>
        <p>The result array. </p>
      </div>
      
    </div>
	</div>
	<div id="ToList``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> <strong>ToList&lt;T&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Builds a list from the given collection. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code></h6>
        <p>The result list. </p>
      </div>
      
    </div>
	</div>
	<div id="Truncate``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> <strong>Truncate&lt;T&gt;</strong>(<span title="System.int">int</span> count, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns a sequence that when enumerated returns at most N elements. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.int">int</span></code> count</h6>
          <p class="comments">The maximum number of items to enumerate. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code></h6>
        <p>The result sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="TryFind``1" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>TryFind&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> predicate, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns the first element for which the given function returns  <code>true</code>.
Return  <code>None</code>  if no such element exists. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> predicate</h6>
          <p class="comments">A function that evaluates to a Boolean when given an item in the sequence. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>The found element or  <code>None</code>. </p>
      </div>
      
    </div>
	</div>
	<div id="TryFindIndex``1" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>TryFindIndex&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> predicate, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns the index of the first element in the sequence
that satisfies the given predicate. Return  <code>None</code>  if no such element exists. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> predicate</h6>
          <p class="comments">A function that evaluates to a Boolean when given an item in the sequence. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>The found index or  <code>None</code>. </p>
      </div>
      
    </div>
	</div>
	<div id="TryPick``2" class="method">
		<h4><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a> <strong>TryPick&lt;T, TResult&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> chooser, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Applies the given function to successive elements, returning the first
result where the function returns "Some(x)". 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> chooser</h6>
          <p class="comments">A function that transforms items from the input sequence into options. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Core/FSharpOption`1.htm">FSharpOption&lt;T&gt;</a></code></h6>
        <p>The chosen element or  <code>None</code>. </p>
      </div>
      
    </div>
	</div>
	<div id="Unfold``2" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> <strong>Unfold&lt;TState, T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> generator, <span title="Microsoft.FSharp.Collections.TState">TState</span> state)</h4>
		<div class="content">Returns a sequence that contains the elements generated by the given computation.
The given initial  <code>state</code>  argument is passed to the element generator.
For each IEnumerator elements in the stream are generated on-demand by applying the element
generator, until a None value is returned by the element generator. Each call to the element
generator returns a new residual  <code>state</code>. <blockquote class="remarks">
  The stream will be recomputed each time an IEnumerator is requested and iterated for the Seq.
The returned sequence may be passed between threads safely. However,
individual IEnumerator values generated from the returned sequence should not be accessed concurrently. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> generator</h6>
          <p class="comments">A function that takes in the current state and returns an option tuple of the next
element of the sequence and the next state value. </p>
          <h6><code><span title="Microsoft.FSharp.Collections.TState">TState</span></code> state</h6>
          <p class="comments">The initial state value. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code></h6>
        <p>The result sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="Where``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> <strong>Where&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> predicate, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns a new collection containing only the elements of the collection
for which the given predicate returns "true". <blockquote class="remarks">
  The returned sequence may be passed between threads safely. However,
individual IEnumerator values generated from the returned sequence should not be accessed concurrently.
Remember sequence is lazy, effects are delayed until it is enumerated.
A synonym for Seq.filter. 
</blockquote>


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> predicate</h6>
          <p class="comments">A function to test whether each item in the input sequence should be included in the output. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code></h6>
        <p>The result sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="Windowed``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<T[]>">IEnumerable&lt;T[]&gt;</span> <strong>Windowed&lt;T&gt;</strong>(<span title="System.int">int</span> windowSize, <span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> source)</h4>
		<div class="content">Returns a sequence that yields sliding windows of containing elements drawn from the input
sequence. Each window is returned as a fresh array. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.int">int</span></code> windowSize</h6>
          <p class="comments">The number of elements in each window. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code> source</h6>
          <p class="comments">The input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<T[]>">IEnumerable&lt;T[]&gt;</span></code></h6>
        <p>The result sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="Zip``2" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<Tuple<T1, T2>>">IEnumerable&lt;Tuple&lt;T1, T2&gt;&gt;</span> <strong>Zip&lt;T1, T2&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<T1>">IEnumerable&lt;T1&gt;</span> source1, <span title="System.Collections.Generic.IEnumerable<T2>">IEnumerable&lt;T2&gt;</span> source2)</h4>
		<div class="content">Combines the two sequences into a list of pairs. The two sequences need not have equal lengths:
when one sequence is exhausted any remaining elements in the other
sequence are ignored. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<T1>">IEnumerable&lt;T1&gt;</span></code> source1</h6>
          <p class="comments">The first input sequence. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T2>">IEnumerable&lt;T2&gt;</span></code> source2</h6>
          <p class="comments">The second input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<Tuple<T1, T2>>">IEnumerable&lt;Tuple&lt;T1, T2&gt;&gt;</span></code></h6>
        <p>The result sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="Zip3``3" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<Tuple<T1, T2, T3>>">IEnumerable&lt;Tuple&lt;T1, T2, T3&gt;&gt;</span> <strong>Zip3&lt;T1, T2, T3&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<T1>">IEnumerable&lt;T1&gt;</span> source1, <span title="System.Collections.Generic.IEnumerable<T2>">IEnumerable&lt;T2&gt;</span> source2, <span title="System.Collections.Generic.IEnumerable<T3>">IEnumerable&lt;T3&gt;</span> source3)</h4>
		<div class="content">Combines the three sequences into a list of triples. The sequences need not have equal lengths:
when one sequence is exhausted any remaining elements in the other
sequences are ignored. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<T1>">IEnumerable&lt;T1&gt;</span></code> source1</h6>
          <p class="comments">The first input sequence. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T2>">IEnumerable&lt;T2&gt;</span></code> source2</h6>
          <p class="comments">The second input sequence. </p>
          <h6><code><span title="System.Collections.Generic.IEnumerable<T3>">IEnumerable&lt;T3&gt;</span></code> source3</h6>
          <p class="comments">The third input sequence. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<Tuple<T1, T2, T3>>">IEnumerable&lt;Tuple&lt;T1, T2, T3&gt;&gt;</span></code></h6>
        <p>The result sequence. </p>
      </div>
      
    </div>
	</div>
	
	<div id="footer">
  <p>Based on v4.3.0.0 of FSharp.Core.dll (Microsoft&#174; Visual Studio&#174; 2012)</p>
  <p>Generated by <a href="http://docu.jagregory.com">docu</a></p>
</div>
  </body>
</html>