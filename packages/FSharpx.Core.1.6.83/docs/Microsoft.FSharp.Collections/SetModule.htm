<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <title>SetModule - Microsoft&#174; Visual Studio&#174; 2012 Documentation</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"/>
    <link type="text/css" rel="stylesheet" href="../main.css"/>
    <script type="text/javascript" src="../js/jquery-1.3.2.min.js"></script>
    <script type="text/javascript" src="../js/jquery.scrollTo-min.js"></script>
    <script type="text/javascript" src="../js/navigation.js"></script>
    <script type="text/javascript" src="../js/example.js"></script>
  </head>
  <body><div id="namespaces">
	<h2 class="fixed">Namespaces</h2>
	<div class="scroll">
		<ul>
			<li>
          <a href="../FSharp.Control/index.htm">FSharp.Control</a>
      </li>
			<li>
          <a href="../FSharp.IO/index.htm">FSharp.IO</a>
      </li>
			<li>
          <a href="../FSharp.Net/index.htm">FSharp.Net</a>
      </li>
			<li>
          <a href="../FSharpx/index.htm">FSharpx</a>
      </li>
			<li>
          <a href="../FSharpx.Core/index.htm">FSharpx.Core</a>
      </li>
			<li>
          <a href="../FSharpx.DataStructures/index.htm">FSharpx.DataStructures</a>
      </li>
			<li>
          <a href="../FSharpx.Http/index.htm">FSharpx.Http</a>
      </li>
			<li>
          <a href="../FSharpx.Observable/index.htm">FSharpx.Observable</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders/index.htm">FSharpx.TypeProviders</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.AppSettings/index.htm">FSharpx.TypeProviders.AppSettings</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Documents/index.htm">FSharpx.TypeProviders.Documents</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Excel/index.htm">FSharpx.TypeProviders.Excel</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase/index.htm">FSharpx.TypeProviders.Freebase</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.DesignTime/index.htm">FSharpx.TypeProviders.Freebase.DesignTime</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.FreebaseRuntime/index.htm">FSharpx.TypeProviders.Freebase.FreebaseRuntime</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Freebase.FreebaseTypeExtender/index.htm">FSharpx.TypeProviders.Freebase.FreebaseTypeExtender</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Graph/index.htm">FSharpx.TypeProviders.Graph</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Machine/index.htm">FSharpx.TypeProviders.Machine</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Math/index.htm">FSharpx.TypeProviders.Math</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Regex/index.htm">FSharpx.TypeProviders.Regex</a>
      </li>
			<li>
          <a href="../FSharpx.TypeProviders.Xaml/index.htm">FSharpx.TypeProviders.Xaml</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections/index.htm" class="current">Microsoft.FSharp.Collections</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Collections.Tagged/index.htm">Microsoft.FSharp.Collections.Tagged</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Control/index.htm">Microsoft.FSharp.Control</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Core/index.htm">Microsoft.FSharp.Core</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Core.CompilerServices/index.htm">Microsoft.FSharp.Core.CompilerServices</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Data.TypeProviders.DesignTime/index.htm">Microsoft.FSharp.Data.TypeProviders.DesignTime</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Data.UnitSystems.SI.UnitNames/index.htm">Microsoft.FSharp.Data.UnitSystems.SI.UnitNames</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq/index.htm">Microsoft.FSharp.Linq</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq.QueryRunExtensions/index.htm">Microsoft.FSharp.Linq.QueryRunExtensions</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Linq.RuntimeHelpers/index.htm">Microsoft.FSharp.Linq.RuntimeHelpers</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Math/index.htm">Microsoft.FSharp.Math</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Metadata/index.htm">Microsoft.FSharp.Metadata</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.NativeInterop/index.htm">Microsoft.FSharp.NativeInterop</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Quotations/index.htm">Microsoft.FSharp.Quotations</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Reflection/index.htm">Microsoft.FSharp.Reflection</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text/index.htm">Microsoft.FSharp.Text</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.Lexing/index.htm">Microsoft.FSharp.Text.Lexing</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.Parsing/index.htm">Microsoft.FSharp.Text.Parsing</a>
      </li>
			<li>
          <a href="../Microsoft.FSharp.Text.StructuredFormat/index.htm">Microsoft.FSharp.Text.StructuredFormat</a>
      </li>
			<li>
          <a href="../Samples.FSharp.ProvidedTypes/index.htm">Samples.FSharp.ProvidedTypes</a>
      </li>
			<li>
          <a href="../Utilities.Caching/index.htm">Utilities.Caching</a>
      </li>
		</ul>
	</div>
</div><div id="types">
  <h2 class="fixed">Types in Microsoft.FSharp.Collections</h2>
	<div class="scroll">
		<ul>
				<li>
            <a href="../Microsoft.FSharp.Collections/Array2DModule.htm">Array2DModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/Array3DModule.htm">Array3DModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/Array4DModule.htm">Array4DModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/ArrayModule.htm">ArrayModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/ComparisonIdentity.htm">ComparisonIdentity</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/FSharpMap`2.htm">FSharpMap&lt;TKey, TValue&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/HashIdentity.htm">HashIdentity</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/HashMultiMap`2.htm">HashMultiMap&lt;Key, Value&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/HashSet`1.htm">HashSet&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/LazyList`1.htm">LazyList&lt;T&gt;</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/LazyListModule.htm">LazyListModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/ListModule.htm">ListModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/MapModule.htm">MapModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/Parallel.htm">Parallel</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/PSeqModule.htm">PSeqModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/ResizeArrayModule.htm">ResizeArrayModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/SeqModule.htm">SeqModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/SetModule.htm" class="current">SetModule</a>
        </li>
				<li>
            <a href="../Microsoft.FSharp.Collections/Tags.htm">Tags</a>
        </li>
		</ul>
	</div>
</div>
    <div class="header">
		<p class="class"><strong>Type</strong> SetModule</p>
		<p><strong>Namespace</strong> Microsoft.FSharp.Collections</p>
	</div>
    <div class="sub-header">
			<div id="summary">Functional programming operators related to the  <code>Set<_></code>  type. 
			</div>
		
		
			<h3 class="section">Methods</h3>
			<ul>
				<li><a href="../Microsoft.FSharp.Collections/SetModule.htm#Add``1">Add&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SetModule.htm#Contains``1">Contains&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SetModule.htm#Count``1">Count&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SetModule.htm#Difference``1">Difference&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SetModule.htm#Empty``1">Empty&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SetModule.htm#Exists``1">Exists&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SetModule.htm#Filter``1">Filter&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SetModule.htm#Fold``2">Fold&lt;T, TState&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SetModule.htm#FoldBack``2">FoldBack&lt;T, TState&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SetModule.htm#ForAll``1">ForAll&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SetModule.htm#Intersect``1">Intersect&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SetModule.htm#IntersectMany``1">IntersectMany&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SetModule.htm#IsEmpty``1">IsEmpty&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SetModule.htm#IsProperSubset``1">IsProperSubset&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SetModule.htm#IsProperSuperset``1">IsProperSuperset&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SetModule.htm#IsSubset``1">IsSubset&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SetModule.htm#IsSuperset``1">IsSuperset&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SetModule.htm#Iterate``1">Iterate&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SetModule.htm#Map``2">Map&lt;T, TResult&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SetModule.htm#MaxElement``1">MaxElement&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SetModule.htm#MinElement``1">MinElement&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SetModule.htm#OfArray``1">OfArray&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SetModule.htm#OfList``1">OfList&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SetModule.htm#OfSeq``1">OfSeq&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SetModule.htm#Partition``1">Partition&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SetModule.htm#Remove``1">Remove&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SetModule.htm#Singleton``1">Singleton&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SetModule.htm#ToArray``1">ToArray&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SetModule.htm#ToList``1">ToList&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SetModule.htm#ToSeq``1">ToSeq&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SetModule.htm#Union``1">Union&lt;T&gt;</a></li>
				<li><a href="../Microsoft.FSharp.Collections/SetModule.htm#UnionMany``1">UnionMany&lt;T&gt;</a></li>
			</ul>
		
		
	</div>
	
	
	
	<h3 class="section">Public static methods</h3>
	
	<div id="Add``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> <strong>Add&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Collections.T">T</span> value, <a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> set)</h4>
		<div class="content">Returns a new set with an element added to the set. No exception is raised if
the set already contains the given element. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Collections.T">T</span></code> value</h6>
          <p class="comments">The value to add. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code> set</h6>
          <p class="comments">The input set. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code></h6>
        <p>A new set containing  <code>value</code>. </p>
      </div>
      
    </div>
	</div>
	<div id="Contains``1" class="method">
		<h4><span title="System.bool">bool</span> <strong>Contains&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Collections.T">T</span> element, <a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> set)</h4>
		<div class="content">Evaluates to "true" if the given element is in the given set. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Collections.T">T</span></code> element</h6>
          <p class="comments">The element to test. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code> set</h6>
          <p class="comments">The input set. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p>True if  <code>element</code>  is in  <code>set</code>. </p>
      </div>
      
    </div>
	</div>
	<div id="Count``1" class="method">
		<h4><span title="System.int">int</span> <strong>Count&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> set)</h4>
		<div class="content">Returns the number of elements in the set. Same as  <code>size</code>. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code> set</h6>
          <p class="comments">The input set. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.int">int</span></code></h6>
        <p>The number of elements in the set. </p>
      </div>
      
    </div>
	</div>
	<div id="Difference``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> <strong>Difference&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> set1, <a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> set2)</h4>
		<div class="content">Returns a new set with the elements of the second set removed from the first. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code> set1</h6>
          <p class="comments">The first input set. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code> set2</h6>
          <p class="comments">The set whose elements will be removed from  <code>set1</code>. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code></h6>
        <p>The set with the elements of  <code>set2</code>  removed from  <code>set1</code>. </p>
      </div>
      
    </div>
	</div>
	<div id="Empty``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> <strong>Empty&lt;T&gt;</strong>()</h4>
		<div class="content">Returns an empty array of the given type. 



      
    </div>
	</div>
	<div id="Exists``1" class="method">
		<h4><span title="System.bool">bool</span> <strong>Exists&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> predicate, <a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> set)</h4>
		<div class="content">Tests if any element of the collection satisfies the given predicate.
If the input function is  <code>predicate</code>  and the elements are  <code>i0...iN</code> then computes  <code>p i0 or... or p iN</code>. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> predicate</h6>
          <p class="comments">The function to test set elements. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code> set</h6>
          <p class="comments">The input set. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p>True if any element of  <code>set</code>  satisfies  <code>predicate</code>. </p>
      </div>
      
    </div>
	</div>
	<div id="Filter``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> <strong>Filter&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> predicate, <a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> set)</h4>
		<div class="content">Returns a new collection containing only the elements of the collection
for which the given predicate returns  <code>true</code>. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> predicate</h6>
          <p class="comments">The function to test set elements. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code> set</h6>
          <p class="comments">The input set. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code></h6>
        <p>The set containing only the elements for which  <code>predicate</code>  returns true. </p>
      </div>
      
    </div>
	</div>
	<div id="Fold``2" class="method">
		<h4><span title="Microsoft.FSharp.Collections.TState">TState</span> <strong>Fold&lt;T, TState&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> folder, <span title="Microsoft.FSharp.Collections.TState">TState</span> state, <a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> set)</h4>
		<div class="content">Applies the given accumulating function to all the elements of the set 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> folder</h6>
          <p class="comments">The accumulating function. </p>
          <h6><code><span title="Microsoft.FSharp.Collections.TState">TState</span></code> state</h6>
          <p class="comments">The initial state. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code> set</h6>
          <p class="comments">The input set. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.TState">TState</span></code></h6>
        <p>The final state. </p>
      </div>
      
    </div>
	</div>
	<div id="FoldBack``2" class="method">
		<h4><span title="Microsoft.FSharp.Collections.TState">TState</span> <strong>FoldBack&lt;T, TState&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> folder, <a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> set, <span title="Microsoft.FSharp.Collections.TState">TState</span> state)</h4>
		<div class="content">Applies the given accumulating function to all the elements of the set. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> folder</h6>
          <p class="comments">The accumulating function. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code> set</h6>
          <p class="comments">The input set. </p>
          <h6><code><span title="Microsoft.FSharp.Collections.TState">TState</span></code> state</h6>
          <p class="comments">The initial state. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.TState">TState</span></code></h6>
        <p>The final state. </p>
      </div>
      
    </div>
	</div>
	<div id="ForAll``1" class="method">
		<h4><span title="System.bool">bool</span> <strong>ForAll&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> predicate, <a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> set)</h4>
		<div class="content">Tests if all elements of the collection satisfy the given predicate.
If the input function is  <code>f</code>  and the elements are  <code>i0...iN</code>  and "j0...jN"
then computes  <code>p i0 &&... && p iN</code>. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> predicate</h6>
          <p class="comments">The function to test set elements. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code> set</h6>
          <p class="comments">The input set. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p>True if all elements of  <code>set</code>  satisfy  <code>predicate</code>. </p>
      </div>
      
    </div>
	</div>
	<div id="Intersect``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> <strong>Intersect&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> set1, <a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> set2)</h4>
		<div class="content">Computes the intersection of the two sets. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code> set1</h6>
          <p class="comments">The first input set. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code> set2</h6>
          <p class="comments">The second input set. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code></h6>
        <p>The intersection of  <code>set1</code>  and  <code>set2</code>. </p>
      </div>
      
    </div>
	</div>
	<div id="IntersectMany``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> <strong>IntersectMany&lt;T&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<FSharpSet<T>>">IEnumerable&lt;FSharpSet&lt;T&gt;&gt;</span> sets)</h4>
		<div class="content">Computes the intersection of a sequence of sets. The sequence must be non-empty. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<FSharpSet<T>>">IEnumerable&lt;FSharpSet&lt;T&gt;&gt;</span></code> sets</h6>
          <p class="comments">The sequence of sets to intersect. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code></h6>
        <p>The intersection of the input sets. </p>
      </div>
      
    </div>
	</div>
	<div id="IsEmpty``1" class="method">
		<h4><span title="System.bool">bool</span> <strong>IsEmpty&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> set)</h4>
		<div class="content">Returns "true" if the set is empty. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code> set</h6>
          <p class="comments">The input set. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p>True if  <code>set</code>  is empty. </p>
      </div>
      
    </div>
	</div>
	<div id="IsProperSubset``1" class="method">
		<h4><span title="System.bool">bool</span> <strong>IsProperSubset&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> set1, <a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> set2)</h4>
		<div class="content">Evaluates to "true" if all elements of the first set are in the second, and at least
one element of the second is not in the first. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code> set1</h6>
          <p class="comments">The potential subset. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code> set2</h6>
          <p class="comments">The set to test against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p>True if  <code>set1</code>  is a proper subset of  <code>set2</code>. </p>
      </div>
      
    </div>
	</div>
	<div id="IsProperSuperset``1" class="method">
		<h4><span title="System.bool">bool</span> <strong>IsProperSuperset&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> set1, <a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> set2)</h4>
		<div class="content">Evaluates to "true" if all elements of the second set are in the first, and at least
one element of the first is not in the second. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code> set1</h6>
          <p class="comments">The potential superset. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code> set2</h6>
          <p class="comments">The set to test against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p>True if  <code>set1</code>  is a proper superset of  <code>set2</code>. </p>
      </div>
      
    </div>
	</div>
	<div id="IsSubset``1" class="method">
		<h4><span title="System.bool">bool</span> <strong>IsSubset&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> set1, <a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> set2)</h4>
		<div class="content">Evaluates to "true" if all elements of the first set are in the second 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code> set1</h6>
          <p class="comments">The potential subset. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code> set2</h6>
          <p class="comments">The set to test against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p>True if  <code>set1</code>  is a subset of  <code>set2</code>. </p>
      </div>
      
    </div>
	</div>
	<div id="IsSuperset``1" class="method">
		<h4><span title="System.bool">bool</span> <strong>IsSuperset&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> set1, <a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> set2)</h4>
		<div class="content">Evaluates to "true" if all elements of the second set are in the first. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code> set1</h6>
          <p class="comments">The potential superset. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code> set2</h6>
          <p class="comments">The set to test against. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.bool">bool</span></code></h6>
        <p>True if  <code>set1</code>  is a superset of  <code>set2</code>. </p>
      </div>
      
    </div>
	</div>
	<div id="Iterate``1" class="method">
		<h4><span title="System.void">void</span> <strong>Iterate&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> action, <a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> set)</h4>
		<div class="content">Applies the given function to each element of the set, in order according
to the comparison function. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> action</h6>
          <p class="comments">The function to apply to each element. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code> set</h6>
          <p class="comments">The input set. </p>
      </div>

      
    </div>
	</div>
	<div id="Map``2" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> <strong>Map&lt;T, TResult&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> mapping, <a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> set)</h4>
		<div class="content">Returns a new collection containing the results of applying the
given function to each element of the input set. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> mapping</h6>
          <p class="comments">The function to transform elements of the input set. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code> set</h6>
          <p class="comments">The input set. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code></h6>
        <p>A set containing the transformed elements. </p>
      </div>
      
    </div>
	</div>
	<div id="MaxElement``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T">T</span> <strong>MaxElement&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> set)</h4>
		<div class="content">Returns the highest element in the set according to the ordering being used for the set. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code> set</h6>
          <p class="comments">The input set. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.T">T</span></code></h6>
        <p>The max value from the set. </p>
      </div>
      
    </div>
	</div>
	<div id="MinElement``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T">T</span> <strong>MinElement&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> set)</h4>
		<div class="content">Returns the lowest element in the set according to the ordering being used for the set. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code> set</h6>
          <p class="comments">The input set. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.T">T</span></code></h6>
        <p>The min value from the set. </p>
      </div>
      
    </div>
	</div>
	<div id="OfArray``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> <strong>OfArray&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Collections.T[]">T[]</span> array)</h4>
		<div class="content">



      
    </div>
	</div>
	<div id="OfList``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> <strong>OfList&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> elements)</h4>
		<div class="content">Builds an array from the given list. 



      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code></h6>
        <p>The array of elements from the list. </p>
      </div>
      
    </div>
	</div>
	<div id="OfSeq``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> <strong>OfSeq&lt;T&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> elements)</h4>
		<div class="content">Builds a new array from the given enumerable object. 



      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code></h6>
        <p>The array of elements from the sequence. </p>
      </div>
      
    </div>
	</div>
	<div id="Partition``1" class="method">
		<h4><span title="System.Tuple<FSharpSet<T>, FSharpSet<T>>">Tuple&lt;FSharpSet&lt;T&gt;, FSharpSet&lt;T&gt;&gt;</span> <strong>Partition&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a> predicate, <a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> set)</h4>
		<div class="content">Splits the set into two sets containing the elements for which the given predicate
returns true and false respectively. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Core/FSharpFunc`2.htm">FSharpFunc&lt;T, TResult&gt;</a></code> predicate</h6>
          <p class="comments">The function to test set elements. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code> set</h6>
          <p class="comments">The input set. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Tuple<FSharpSet<T>, FSharpSet<T>>">Tuple&lt;FSharpSet&lt;T&gt;, FSharpSet&lt;T&gt;&gt;</span></code></h6>
        <p>A pair of sets with the first containing the elements for which  <code>predicate</code>  returns
true and the second containing the elements for which  <code>predicate</code>  returns false. </p>
      </div>
      
    </div>
	</div>
	<div id="Remove``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> <strong>Remove&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Collections.T">T</span> value, <a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> set)</h4>
		<div class="content">Returns a new set with the given element removed. No exception is raised if
the set doesn't contain the given element. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Collections.T">T</span></code> value</h6>
          <p class="comments">The element to remove. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code> set</h6>
          <p class="comments">The input set. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code></h6>
        <p>The input set with  <code>value</code>  removed. </p>
      </div>
      
    </div>
	</div>
	<div id="Singleton``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> <strong>Singleton&lt;T&gt;</strong>(<span title="Microsoft.FSharp.Collections.T">T</span> value)</h4>
		<div class="content">Returns a sequence that yields one item only. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="Microsoft.FSharp.Collections.T">T</span></code> value</h6>
          <p class="comments">The input item. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code></h6>
        <p>The result sequence of one item. </p>
      </div>
      
    </div>
	</div>
	<div id="ToArray``1" class="method">
		<h4><span title="Microsoft.FSharp.Collections.T[]">T[]</span> <strong>ToArray&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> set)</h4>
		<div class="content">Builds an array that contains the elements of the set in order. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code> set</h6>
          <p class="comments">The input set. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="Microsoft.FSharp.Collections.T[]">T[]</span></code></h6>
        <p>An ordered array of the elements of  <code>set</code>. </p>
      </div>
      
    </div>
	</div>
	<div id="ToList``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a> <strong>ToList&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> set)</h4>
		<div class="content">Builds a list that contains the elements of the set in order. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code> set</h6>
          <p class="comments">The input set. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpList`1.htm">FSharpList&lt;T&gt;</a></code></h6>
        <p>An ordered list of the elements of  <code>set</code>. </p>
      </div>
      
    </div>
	</div>
	<div id="ToSeq``1" class="method">
		<h4><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span> <strong>ToSeq&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> set)</h4>
		<div class="content">Returns an ordered view of the collection as an enumerable object. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code> set</h6>
          <p class="comments">The input set. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><span title="System.Collections.Generic.IEnumerable<T>">IEnumerable&lt;T&gt;</span></code></h6>
        <p>An ordered sequence of the elements of  <code>set</code>. </p>
      </div>
      
    </div>
	</div>
	<div id="Union``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> <strong>Union&lt;T&gt;</strong>(<a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> set1, <a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> set2)</h4>
		<div class="content">Computes the union of the two sets. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code> set1</h6>
          <p class="comments">The first input set. </p>
          <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code> set2</h6>
          <p class="comments">The second input set. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code></h6>
        <p>The union of  <code>set1</code>  and  <code>set2</code>. </p>
      </div>
      
    </div>
	</div>
	<div id="UnionMany``1" class="method">
		<h4><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a> <strong>UnionMany&lt;T&gt;</strong>(<span title="System.Collections.Generic.IEnumerable<FSharpSet<T>>">IEnumerable&lt;FSharpSet&lt;T&gt;&gt;</span> sets)</h4>
		<div class="content">Computes the union of a sequence of sets. 


      <div class="parameters">
        <h5>Parameters</h5>

          <h6><code><span title="System.Collections.Generic.IEnumerable<FSharpSet<T>>">IEnumerable&lt;FSharpSet&lt;T&gt;&gt;</span></code> sets</h6>
          <p class="comments">The sequence of sets to untion. </p>
      </div>

      <div class="return">
        <h5>Return</h5>
        <h6><code><a href="../Microsoft.FSharp.Collections/FSharpSet`1.htm">FSharpSet&lt;T&gt;</a></code></h6>
        <p>The union of the input sets. </p>
      </div>
      
    </div>
	</div>
	
	<div id="footer">
  <p>Based on v4.3.0.0 of FSharp.Core.dll (Microsoft&#174; Visual Studio&#174; 2012)</p>
  <p>Generated by <a href="http://docu.jagregory.com">docu</a></p>
</div>
  </body>
</html>